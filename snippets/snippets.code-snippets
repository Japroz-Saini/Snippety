{
  "import": {
    "prefix": "imp",
    "body": "import ${2:moduleName} from '${1:module}'$0"
  },
  "importNoModuleName": {
    "prefix": "imn",
    "body": "import '${1:module}'$0"
  },
  "importDestructing": {
    "prefix": "imd",
    "body": "import { $2 } from '${1:module}'$0"
  },
  "importEverything": {
    "prefix": "ime",
    "body": "import * as ${2:alias} from '${1:module}'$0"
  },
  "importAs": {
    "prefix": "ima",
    "body": "import { ${2:originalName} as ${3:alias} } from '${1:module}'$0"
  },
  "exportDefault": {
    "prefix": "exp",
    "body": "export default $1$0"
  },
  "exportDestructing": {
    "prefix": "exd",
    "body": "export { $2 } from '${1:module}'$0"
  },
  "exportAs": {
    "prefix": "exa",
    "body": "export { ${2:originalName} as ${3:alias} } from '${1:module}'$0"
  },
  "exportNamedFunction": {
    "prefix": "enf",
    "body": [
      "export const ${1:functionName} = (${2:params}) => {",
      "\t$0",
      "}",
      ""
    ],
    "description": "Export named function in ES7 syntax"
  },
  "exportDefaultFunction": {
    "prefix": "edf",
    "body": ["export default (${1:params}) => {", "\t$0", "}", ""],
    "description": "Export default function in ES7 syntax"
  },
  "method": {
    "prefix": "met",
    "body": ["${1:methodName} = (${2:params}) => {", "\t${0}", "}", ""],
    "description": "Creates a method inside a class in ES7 syntax"
  },
  "propertyGet": {
    "prefix": "pge",
    "body": ["get ${1:propertyName}() {", "\treturn this.${0}", "}", ""],
    "description": "Creates a getter property inside a class in ES7 syntax"
  },
  "propertySet": {
    "prefix": "pse",
    "body": ["set ${1:propertyName}(${2:value}) {", "\t${0}", "}", ""],
    "description": "Creates a setter property inside a class in ES7 syntax"
  },
  "forEach": {
    "prefix": "fre",
    "body": ["${1:array}.forEach(${2:currentItem} => {", "\t${0}", "})", ""],
    "description": "Creates a forEach statement in ES7 syntax"
  },
  "forOf": {
    "prefix": "fof",
    "body": ["for(let ${1:item} of ${2:object}) {", "\t${0}", "}", ""],
    "description": "Iterating over property names of iterable objects"
  },
  "forIn": {
    "prefix": "fin",
    "body": ["for(let ${1:item} in ${2:object}) {", "\t${0}", "}", ""],
    "description": "Iterating over property values of iterable objects"
  },
  "anonymousFunction": {
    "prefix": "anfn",
    "body": ["(${1:params}) => {", "\t${2}", "}", ""],
    "description": "Creates an anonymous function in ES7 syntax"
  },
  "namedFunction": {
    "prefix": "nfn",
    "body": ["const ${1:name} = (${2:params}) => {", "\t${3}", "}", ""],
    "description": "Creates a named function in ES7 syntax"
  },
  "destructingObject": {
    "prefix": "dob",
    "body": "const {${1:propertyName}} = ${2:objectToDestruct}",
    "description": "Creates and assigns a local variable using object destructing"
  },
  "destructingArray": {
    "prefix": "dar",
    "body": "const [${1:propertyName}] = ${2:arrayToDestruct}",
    "description": "Creates and assigns a local variable using array destructing"
  },
  "setInterval": {
    "prefix": "sti",
    "body": ["setInterval(() => {", "\t${2}", "}, ${0:intervalInms})", ""],
    "description": "Executes the given function at specified intervals in ES7 syntax"
  },
  "setTimeOut": {
    "prefix": "sto",
    "body": ["setTimeout(() => {", "\t${2}", "}, ${1:delayInms})", ""],
    "description": "Executes the given function after the specified delay in ES7 syntax"
  },
  "promise": {
    "prefix": "prom",
    "body": ["return new Promise((resolve, reject) => {", "\t${1}", "})", ""],
    "description": "Creates and returns a new Promise in the standard ES7 syntax"
  },
  "consoleAssert": {
    "prefix": "cas",
    "body": "console.assert(${1:expression}, ${2:object})",
    "description": "If the specified expression is false, the message is written to the console along with a stack trace"
  },
  "consoleClear": {
    "prefix": "ccl",
    "body": "console.clear()",
    "description": "Clears the console"
  },
  "consoleCount": {
    "prefix": "cco",
    "body": "console.count(${1:label})",
    "description": "Writes the the number of times that count() has been invoked at the same line and with the same label"
  },
  "consoleDir": {
    "prefix": "cdi",
    "body": "console.dir(${1:object})",
    "description": "Prints a JavaScript representation of the specified object"
  },
  "consoleError": {
    "prefix": "cer",
    "body": "console.error(${1:object})",
    "description": "Displays a message in the console and also includes a stack trace from where the method was called"
  },
  "consoleGroup": {
    "prefix": "cgr",
    "body": "console.group(\"${1:label}\")",
    "description": "Groups and indents all following output by an additional level, until console.groupEnd() is called."
  },
  "consoleGroupEnd": {
    "prefix": "cge",
    "body": "console.groupEnd()",
    "description": "Closes out the corresponding console.group()."
  },
  "consoleLog": {
    "prefix": "clg",
    "body": "console.log(${1:object})",
    "description": "Displays a message in the console"
  },
  "consoleTrace": {
    "prefix": "ctr",
    "body": "console.trace(${1:object})",
    "description": "Prints a stack trace from the point where the method was called"
  },
  "consoleLogObject": {
    "prefix": "clo",
    "body": "console.log('${1:object}', ${1:object})",
    "description": "Logs property with name."
  },
  "consoleTime": {
    "prefix": "ctm",
    "body": "console.time('${1:object}')",
    "description": "Console time wrapper"
  },
  "consoleTimeEnd": {
    "prefix": "cte",
    "body": "console.timeEnd('${1:object}')",
    "description": "Console time end wrapper"
  },
  "consoleWarn": {
    "prefix": "cwa",
    "body": "console.warn(${1:object})",
    "description": "Displays a message in the console but also displays a yellow warning icon along with the logged message"
  },
  "consoleInfo": {
    "prefix": "cin",
    "body": "console.info(${1:object})",
    "description": "Displays a message in the console but also displays a blue information icon along with the logged message"
  },
  "destructProps": {
    "prefix": "cp",
    "body": ["const { $1 } = this.props"],
    "description": "Creates and assigns a local variable using props destructing"
  },
  "destructState": {
    "prefix": "cs",
    "body": ["const { $1 } = this.state"],
    "description": "Creates and assigns a local variable using state destructing"
  },
  "import React": {
    "prefix": "imr",
    "body": ["import React from 'react'", ""]
  },
  "import ReactDOM": {
    "prefix": "imrd",
    "body": ["import ReactDOM from 'react-dom'", ""]
  },
  "import React, { Component }": {
    "prefix": "imrc",
    "body": ["import React, { Component } from 'react'", ""]
  },
  "import React, { Component } & PropTypes": {
    "prefix": "imrcp",
    "body": [
      "import React, { Component } from 'react'",
      "import PropTypes from 'prop-types'",
      ""
    ]
  },
  "import React, { PureComponent }": {
    "prefix": "imrpc",
    "body": ["import React, { PureComponent } from 'react'", ""]
  },
  "import React, { PureComponent } & PropTypes": {
    "prefix": "imrpcp",
    "body": [
      "import React, { PureComponent } from 'react'",
      "import PropTypes from 'prop-types'",
      ""
    ]
  },
  "import React, { memo }": {
    "prefix": "imrm",
    "body": ["import React, { memo } from 'react'", ""]
  },
  "import React, { memo } & PropTypes": {
    "prefix": "imrmp",
    "body": [
      "import React, { memo } from 'react'",
      "import PropTypes from 'prop-types'",
      ""
    ]
  },
  "import React, {useState}": {
    "prefix": "imrs",
    "body": ["import React, { useState } from 'react'", ""]
  },
  "import React, {useState, useEffect}": {
    "prefix": "imrse",
    "body": ["import React, { useState, useEffect } from 'react'", ""]
  },
  "import PropTypes": {
    "prefix": "impt",
    "body": ["import PropTypes from 'prop-types'", ""]
  },
  "import React Router": {
    "prefix": "imrr",
    "body": [
      "import { BrowserRouter as Router, Route, NavLink } from 'react-router-dom'",
      ""
    ]
  },
  "import React Browser Router": {
    "prefix": "imbr",
    "body": ["import { BrowserRouter as Router } from 'react-router-dom'", ""]
  },
  "import React Browser Router - Route": {
    "prefix": "imbrr",
    "body": ["import { Route } from 'react-router-dom'", ""]
  },
  "import React Browser Router - Route Combo": {
    "prefix": "imbrc",
    "body": [
      "import { Route, Switch, NavLink, Link } from 'react-router-dom'",
      ""
    ]
  },
  "import React Browser Router - Switch": {
    "prefix": "imbrs",
    "body": ["import { Switch } from 'react-router-dom'", ""]
  },
  "import React Browser Router - Link": {
    "prefix": "imbrl",
    "body": ["import { Link } from 'react-router-dom'", ""]
  },
  "import React Browser Router - NavLink": {
    "prefix": "imbrnl",
    "body": ["import { NavLink } from 'react-router-dom'", ""]
  },
  "import redux statement": {
    "prefix": "redux",
    "body": ["import { connect } from 'react-redux'", ""]
  },
  "reactClassCompoment": {
    "prefix": "rcc",
    "body": [
      "import React, { Component } from 'react'",
      "",
      "export default class ${1:${TM_FILENAME_BASE}} extends Component {",
      "\trender() {",
      "\t\treturn (",
      "\t\t\t<div>",
      "\t\t\t\t$0",
      "\t\t\t</div>",
      "\t\t)",
      "\t}",
      "}",
      ""
    ],
    "description": "Creates a React component class with ES7 module system"
  },
  "reactClassExportComponent": {
    "prefix": "rce",
    "body": [
      "import React, { Component } from 'react'",
      "",
      "export class ${1:${TM_FILENAME_BASE}} extends Component {",
      "\trender() {",
      "\t\treturn (",
      "\t\t\t<div>",
      "\t\t\t\t$0",
      "\t\t\t</div>",
      "\t\t)",
      "\t}",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}",
      ""
    ],
    "description": "Creates a React component class with ES7 module system"
  },
  "reactFunctionalExportComponent": {
    "prefix": "rfce",
    "body": [
      "import React from 'react'",
      "",
      "function ${1:${TM_FILENAME_BASE}}() {",
      "\treturn (",
      "\t\t<div>",
      "\t\t\t$0",
      "\t\t</div>",
      "\t)",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}",
      ""
    ],
    "description": "Creates a React Functional Component with ES7 module system"
  },
  "reactFunctionalComponent": {
    "prefix": "rfc",
    "body": [
      "import React from 'react'",
      "",
      "export default function ${1:${TM_FILENAME_BASE}}() {",
      "\treturn (",
      "\t\t<div>",
      "\t\t\t$0",
      "\t\t</div>",
      "\t)",
      "}",
      ""
    ],
    "description": "Creates a React Functional Component with ES7 module system"
  },
  "reactFunctionalComponentWithPropTypes": {
    "prefix": "rfcp",
    "body": [
      "import React from 'react'",
      "import PropTypes from 'prop-types'",
      "",
      "function ${1:${TM_FILENAME_BASE}}(props) {",
      "\treturn (",
      "\t\t<div>",
      "\t\t\t$0",
      "\t\t</div>",
      "\t)",
      "}",
      "",
      "${1:${TM_FILENAME_BASE}}.propTypes = {",
      "",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}",
      "",
      ""
    ],
    "description": "Creates a React Functional Component with ES7 module system with PropTypes"
  },
  "reactArrowFunctionExportComponent": {
    "prefix": "rafce",
    "body": [
      "import React from 'react'",
      "",
      "const ${1:${TM_FILENAME_BASE}} = () => {",
      "\treturn (",
      "\t\t<div>",
      "\t\t\t$0",
      "\t\t</div>",
      "\t)",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}",
      ""
    ],
    "description": "Creates a React Arrow Function Component with ES7 module system"
  },
  "reactArrowFunctionComponent": {
    "prefix": "rafc",
    "body": [
      "import React from 'react'",
      "",
      "export const ${1:${TM_FILENAME_BASE}} = () => {",
      "\treturn (",
      "\t\t<div>",
      "\t\t\t$0",
      "\t\t</div>",
      "\t)",
      "}",
      ""
    ],
    "description": "Creates a React Arrow Function Component with ES7 module system"
  },
  "reactArrowFunctionComponentWithPropTypes": {
    "prefix": "rafcp",
    "body": [
      "import React from 'react'",
      "import PropTypes from 'prop-types'",
      "",
      "const ${1:${TM_FILENAME_BASE}} = props => {",
      "\treturn (",
      "\t\t<div>",
      "\t\t\t$0",
      "\t\t</div>",
      "\t)",
      "}",
      "",
      "${1:${TM_FILENAME_BASE}}.propTypes = {",
      "",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}",
      ""
    ],
    "description": "Creates a React Arrow Function Component with ES7 module system with PropTypes"
  },
  "reactClassExportComponentWithPropTypes": {
    "prefix": "rcep",
    "body": [
      "import React, { Component } from 'react'",
      "import PropTypes from 'prop-types'",
      "",
      "export class ${1:${TM_FILENAME_BASE}} extends Component {",
      "\tstatic propTypes = {",
      "",
      "\t}",
      "",
      "\trender() {",
      "\t\treturn (",
      "\t\t\t<div>",
      "\t\t\t\t$0",
      "\t\t\t</div>",
      "\t\t)",
      "\t}",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}",
      ""
    ],
    "description": "Creates a React component class with ES7 module system"
  },
  "reactClassPureComponent": {
    "prefix": "rpc",
    "body": [
      "import React, { PureComponent } from 'react'",
      "",
      "export default class ${1:${TM_FILENAME_BASE}} extends PureComponent {",
      "\trender() {",
      "\t\treturn (",
      "\t\t\t<div>",
      "\t\t\t\t$0",
      "\t\t\t</div>",
      "\t\t)",
      "\t}",
      "}",
      ""
    ],
    "description": "Creates a React pure component class with ES7 module system"
  },
  "reactClassExportPureComponent": {
    "prefix": "rpce",
    "body": [
      "import React, { PureComponent } from 'react'",
      "",
      "export class ${1:${TM_FILENAME_BASE}} extends PureComponent {",
      "\trender() {",
      "\t\treturn (",
      "\t\t\t<div>",
      "\t\t\t\t$0",
      "\t\t\t</div>",
      "\t\t)",
      "\t}",
      "}",
      "",
      "export default ${1:$TM_FILENAME_BASE}",
      ""
    ],
    "description": "Creates a React pure component class with ES7 module system export"
  },
  "reactClassPureComponentWithPropTypes": {
    "prefix": "rpcp",
    "body": [
      "import React, { PureComponent } from 'react'",
      "import PropTypes from 'prop-types'",
      "",
      "export default class ${1:${TM_FILENAME_BASE}} extends PureComponent {",
      "\tstatic propTypes = {",
      "",
      "\t}",
      "",
      "\trender() {",
      "\t\treturn (",
      "\t\t\t<div>",
      "\t\t\t\t$0",
      "\t\t\t</div>",
      "\t\t)",
      "\t}",
      "}",
      ""
    ],
    "description": "Creates a React component class with ES7 module system"
  },
  "reactFunctionMemoComponent": {
    "prefix": "rmc",
    "body": [
      "import React, { memo } from 'react'",
      "",
      "export default memo(function ${1:${TM_FILENAME_BASE}}() {",
      "\treturn (",
      "\t\t<div>",
      "\t\t\t$0",
      "\t\t</div>",
      "\t)",
      "})",
      ""
    ],
    "description": "Creates a React Memo Function Component with ES7 module system"
  },
  "reactFunctionMemoComponentWithPropTypes": {
    "prefix": "rmcp",
    "body": [
      "import React, { memo } from 'react'",
      "import PropTypes from 'prop-types'",
      "",
      "const ${1:${TM_FILENAME_BASE}} = memo(function ${1:${TM_FILENAME_BASE}}(props) {",
      "\treturn (",
      "\t\t<div>",
      "\t\t\t$0",
      "\t\t</div>",
      "\t)",
      "})",
      "",
      "${1:${TM_FILENAME_BASE}}.propTypes = {",
      "",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}",
      ""
    ],
    "description": "Creates a React Memo Function Component with ES7 module system with PropTypes"
  },
  "reactClassCompomentPropTypes": {
    "prefix": "rccp",
    "body": [
      "import React, { Component } from 'react'",
      "import PropTypes from 'prop-types'",
      "",
      "export default class ${1:${TM_FILENAME_BASE}} extends Component {",
      "\tstatic propTypes = {",
      "\t\t${2:prop}: ${3:PropTypes}",
      "\t}",
      "",
      "\trender() {",
      "\t\treturn (",
      "\t\t\t<div>",
      "\t\t\t\t$0",
      "\t\t\t</div>",
      "\t\t)",
      "\t}",
      "}",
      ""
    ],
    "description": "Creates a React component class with PropTypes and ES7 module system"
  },
  "reactClassCompomentRedux": {
    "prefix": "rcredux",
    "body": [
      "import React, { Component } from 'react'",
      "import { connect } from 'react-redux'",
      "",
      "export class ${1:${TM_FILENAME_BASE}} extends Component {",
      "\trender() {",
      "\t\treturn (",
      "\t\t\t<div>",
      "\t\t\t\t$0",
      "\t\t\t</div>",
      "\t\t)",
      "\t}",
      "}",
      "",
      "const mapStateToProps = (state) => ({",
      "\t",
      "})",
      "",
      "const mapDispatchToProps = {",
      "\t",
      "}",
      "",
      "export default connect(mapStateToProps, mapDispatchToProps)(${1:${TM_FILENAME_BASE}})",
      ""
    ],
    "description": "Creates a React component class with connected redux and ES7 module system"
  },
  "reactClassCompomentReduxPropTypes": {
    "prefix": "rcreduxp",
    "body": [
      "import React, { Component } from 'react'",
      "import PropTypes from 'prop-types'",
      "import { connect } from 'react-redux'",
      "",
      "export class ${1:${TM_FILENAME_BASE}} extends Component {",
      "\tstatic propTypes = {",
      "\t\t${2:prop}: ${3:PropTypes}",
      "\t}",
      "",
      "\trender() {",
      "\t\treturn (",
      "\t\t\t<div>",
      "\t\t\t\t$0",
      "\t\t\t</div>",
      "\t\t)",
      "\t}",
      "}",
      "",
      "const mapStateToProps = (state) => ({",
      "\t",
      "})",
      "",
      "const mapDispatchToProps = {",
      "\t",
      "}",
      "",
      "export default connect(mapStateToProps, mapDispatchToProps)(${1:${TM_FILENAME_BASE}})",
      ""
    ],
    "description": "Creates a React component class with PropTypes with connected redux and ES7 module system"
  },
  "reactFunctionalCompomentRedux": {
    "prefix": "rfcredux",
    "body": [
      "import React, { Component } from 'react'",
      "import { connect } from 'react-redux'",
      "",
      "export const ${1:${TM_FILENAME_BASE}} = () => {",
      "\treturn (",
      "\t\t<div>",
      "\t\t\t$0",
      "\t\t</div>",
      "\t)",
      "}",
      "",
      "const mapStateToProps = (state) => ({",
      "\t",
      "})",
      "",
      "const mapDispatchToProps = {",
      "\t",
      "}",
      "",
      "export default connect(mapStateToProps, mapDispatchToProps)(${1:${TM_FILENAME_BASE}})",
      ""
    ],
    "description": "Creates a React functional component with connected redux and ES7 module system"
  },
  "reactFunctionalCompomentReduxPropTypes": {
    "prefix": "rfcreduxp",
    "body": [
      "import React, { Component } from 'react'",
      "import PropTypes from 'prop-types'",
      "import { connect } from 'react-redux'",
      "",
      "export const ${1:${TM_FILENAME_BASE}} = () => {",
      "\treturn (",
      "\t\t<div>",
      "\t\t\t$0",
      "\t\t</div>",
      "\t)",
      "}",
      "",
      "${1:${TM_FILENAME_BASE}}.propTypes = {",
      "\t${2:prop}: ${3:PropTypes}",
      "}",
      "",
      "const mapStateToProps = (state) => ({",
      "\t",
      "})",
      "",
      "const mapDispatchToProps = {",
      "\t",
      "}",
      "",
      "export default connect(mapStateToProps, mapDispatchToProps)(${1:${TM_FILENAME_BASE}})",
      ""
    ],
    "description": "Creates a React functional component with PropTypes with connected redux and ES7 module system"
  },
  "mappingToProps": {
    "prefix": "reduxmap",
    "body": [
      "const mapStateToProps = (state) => ({",
      "\t${1}",
      "})",
      "",
      "const mapDispatchToProps = {",
      "\t",
      "}",
      ""
    ]
  },
  "classConstructor": {
    "prefix": "rconst",
    "body": [
      "constructor(props) {",
      "\tsuper(props)",
      "",
      "\tthis.state = {",
      "\t\t $0",
      "\t}",
      "}",
      ""
    ],
    "description": "Adds a default constructor for it('', () => {})the class that contains props as arguments"
  },
  "emptyState": {
    "prefix": "est",
    "body": ["state = {", "\t$1", "}", ""],
    "description": "Creates empty state object. To be used in a constructor."
  },
  "componentWillMount": {
    "prefix": "cwm",
    "body": ["componentWillMount() {", "\t$0", "}", ""],
    "description": "DEPRECATED!!!. Invoked once, both on the client and server, immediately before the initial rendering occurs"
  },
  "componentDidMount": {
    "prefix": "cdm",
    "body": ["componentDidMount() {", "\t$0", "}", ""],
    "description": "Invoked once, only on the client (not on the server), immediately after the initial rendering occurs."
  },
  "componentWillReceiveProps": {
    "prefix": "cwr",
    "body": ["componentWillReceiveProps(nextProps) {", "\t$0", "}", ""],
    "description": "DEPRECATED!!!. Invoked when a component is receiving new props. This method is not called for the initial render."
  },
  "shouldComponentUpdate": {
    "prefix": "scu",
    "body": ["shouldComponentUpdate(nextProps, nextState) {", "\t$0", "}", ""],
    "description": "Invoked before rendering when new props or state are being received. "
  },
  "componentWillUpdate": {
    "prefix": "cwup",
    "body": ["componentWillUpdate(nextProps, nextState) {", "\t$0", "}", ""],
    "description": "DEPRECATED!!!. Invoked immediately before rendering when new props or state are being received."
  },
  "componentDidUpdate": {
    "prefix": "cdup",
    "body": ["componentDidUpdate(prevProps, prevState) {", "\t$0", "}", ""],
    "description": "Invoked immediately after the component's updates are flushed to the DOM."
  },
  "componentWillUnmount": {
    "prefix": "cwun",
    "body": ["componentWillUnmount() {", "\t$0", "}", ""],
    "description": "Invoked immediately before a component is unmounted from the DOM."
  },
  "getDerivedStateFromProps": {
    "prefix": "gdsfp",
    "body": ["static getDerivedStateFromProps(props, state) {", "\t${1}", "}"],
    "description": "Invoked right before calling the render method, both on the initial mount and on subsequent updates."
  },
  "getSnapshotBeforeUpdate": {
    "prefix": "gsbu",
    "body": [
      "getSnapshotBeforeUpdate = (prevProps, prevState) => {",
      "\t$0",
      "}",
      ""
    ],
    "description": "Called right before mutations are made (e.g. before the DOM is updated)"
  },
  "componentRender": {
    "prefix": "ren",
    "body": [
      "render() {",
      "\treturn (",
      "\t\t<div>",
      "\t\t\t$0",
      "\t\t</div>",
      "\t)",
      "}"
    ],
    "description": "Basic render."
  },
  "createContext": {
    "prefix": "rcontext",
    "body": ["const ${1:contextName} = React.createContext()", ""],
    "description": "Create React context"
  },
  "createRef": {
    "prefix": "cref",
    "body": ["this.${1:refName}Ref = React.createRef()", ""],
    "description": "Create ref statement used inside constructor"
  },
  "forwardRef": {
    "prefix": "fref",
    "body": ["const ref = React.createRef()", ""],
    "description": "Forward ref statement used inside component"
  },
  "componentSetStateObject": {
    "prefix": "sst",
    "body": "this.setState({$0})",
    "description": "Performs a shallow merge of nextState into current state"
  },
  "componentSetStateFunc": {
    "prefix": "ssf",
    "body": ["this.setState((state, props) => { return { $0 }})", ""],
    "description": "Performs a shallow merge of nextState into current state"
  },
  "componentProps": {
    "prefix": "props",
    "body": "this.props.$0",
    "description": "Access component's props"
  },
  "componentState": {
    "prefix": "state",
    "body": "this.state.$0"
  },
  "bindThis": {
    "prefix": "bnd",
    "body": "this.${1:methodName} = this.${1:methodName}.bind(this)$0",
    "description": "Binds this to a method"
  },
  "reduxAction": {
    "prefix": "rxaction",
    "body": [
      "export const ${1:actionName} = (payload) => ({",
      "\ttype: ${3:type},",
      "\tpayload",
      "})",
      ""
    ]
  },
  "reduxConst": {
    "prefix": "rxconst",
    "body": "export const ${1:constantName} = '${1:constantName}'"
  },
  "reduxReducer": {
    "prefix": "rxreducer",
    "body": [
      "const initialState = {",
      "",
      "}",
      "",
      "export default (state = initialState, { type, payload }) => {",
      "\tswitch (type) {",
      "",
      "\tcase ${1:typeName}:",
      "\t\treturn { ...state, ...payload }",
      "",
      "\tdefault:",
      "\t\treturn state",
      "\t}",
      "}",
      ""
    ]
  },
  "reduxSelector": {
    "prefix": "rxselect",
    "body": [
      "import { createSelector } from 'reselect'",
      "",
      "export const ${1:selectorName} = state => state.${2:selector}",
      ""
    ]
  },
  "reactNativeComponent": {
    "prefix": "rnc",
    "body": [
      "import React, { Component } from 'react'",
      "import { Text, View } from 'react-native'",
      "",
      "export default class ${1:${TM_FILENAME_BASE}} extends Component {",
      "\trender() {",
      "\t\treturn (",
      "\t\t\t<View>",
      "\t\t\t\t<Text> ${2:textInComponent} </Text>",
      "\t\t\t</View>",
      "\t\t)",
      "\t}",
      "}",
      ""
    ]
  },
  "reactNativeComponentWithStyles": {
    "prefix": "rncs",
    "body": [
      "import React, { Component } from 'react'",
      "import { Text, StyleSheet, View } from 'react-native'",
      "",
      "export default class ${1:${TM_FILENAME_BASE}} extends Component {",
      "\trender() {",
      "\t\treturn (",
      "\t\t\t<View>",
      "\t\t\t\t<Text> ${2:textInComponent} </Text>",
      "\t\t\t</View>",
      "\t\t)",
      "\t}",
      "}",
      "",
      "const styles = StyleSheet.create({})",
      ""
    ]
  },
  "reactNativeComponentExport": {
    "prefix": "rnce",
    "body": [
      "import React, { Component } from 'react'",
      "import { Text, View } from 'react-native'",
      "",
      "export class ${1:${TM_FILENAME_BASE}} extends Component {",
      "\trender() {",
      "\t\treturn (",
      "\t\t\t<View>",
      "\t\t\t\t<Text> ${2:textInComponent} </Text>",
      "\t\t\t</View>",
      "\t\t)",
      "\t}",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}",
      ""
    ]
  },
  "reactNativePureComponent": {
    "prefix": "rnpc",
    "body": [
      "import React, { PureComponent } from 'react'",
      "import { Text, View } from 'react-native'",
      "",
      "export default class ${1:${TM_FILENAME_BASE}} extends PureComponent {",
      "\trender() {",
      "\t\treturn (",
      "\t\t\t<View>",
      "\t\t\t\t<Text> ${2:textInComponent} </Text>",
      "\t\t\t</View>",
      "\t\t)",
      "\t}",
      "}",
      ""
    ]
  },
  "reactNativePureComponentExport": {
    "prefix": "rnpce",
    "body": [
      "import React, { PureComponent } from 'react'",
      "import { Text, View } from 'react-native'",
      "",
      "export class ${1:${TM_FILENAME_BASE}} extends PureComponent {",
      "\trender() {",
      "\t\treturn (",
      "\t\t\t<View>",
      "\t\t\t\t<Text> ${2:textInComponent} </Text>",
      "\t\t\t</View>",
      "\t\t)",
      "\t}",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}",
      ""
    ]
  },
  "reactNativeClassComponentRedux": {
    "prefix": "rncredux",
    "body": [
      "import React, { Component } from 'react'",
      "import { View, Text } from 'react-native'",
      "import PropTypes from 'prop-types'",
      "import { connect } from 'react-redux'",
      "",
      "export class ${1:${TM_FILENAME_BASE}} extends Component {",
      "\tstatic propTypes = {",
      "\t\t${2:prop}: ${3:PropTypes}",
      "\t}",
      "",
      "\trender() {",
      "\t\treturn (",
      "\t\t\t<View>",
      "\t\t\t\t<Text> ${2:textInComponent} </Text>",
      "\t\t\t</View>",
      "\t\t)",
      "\t}",
      "}",
      "",
      "const mapStateToProps = (state) => ({",
      "\t",
      "})",
      "",
      "const mapDispatchToProps = {",
      "\t",
      "}",
      "",
      "export default connect(mapStateToProps, mapDispatchToProps)(${1:${TM_FILENAME_BASE}})",
      ""
    ],
    "description": "Creates a React Native component class with PropTypes with connected redux and ES7 module system"
  },
  "reactNativeFunctionalExportComponent": {
    "prefix": "rnfe",
    "body": [
      "import React from 'react'",
      "import { View, Text } from 'react-native'",
      "",
      "const ${1:${TM_FILENAME_BASE}} = () => {",
      "\treturn (",
      "\t\t<View>",
      "\t\t\t<Text>$0</Text>",
      "\t\t</View>",
      "\t)",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}",
      ""
    ]
  },
  "reactNativeFunctionalExportComponentWithStyles": {
    "prefix": "rnfes",
    "body": [
      "import React from 'react'",
      "import { StyleSheet, Text, View } from 'react-native'",
      "",
      "const ${1:${TM_FILENAME_BASE}} = () => {",
      "\treturn (",
      "\t\t<View>",
      "\t\t\t<Text>$0</Text>",
      "\t\t</View>",
      "\t)",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}",
      "",
      "const styles = StyleSheet.create({})",
      ""
    ]
  },
  "reactNativeFunctionalComponent": {
    "prefix": "rnf",
    "body": [
      "import React from 'react'",
      "import { View, Text } from 'react-native'",
      "",
      "export default function ${1:${TM_FILENAME_BASE}}() {",
      "\treturn (",
      "\t\t<View>",
      "\t\t\t<Text>$0</Text>",
      "\t\t</View>",
      "\t)",
      "}",
      ""
    ]
  },
  "reactNativeFunctionalComponentWithStyles": {
    "prefix": "rnfs",
    "body": [
      "import React from 'react'",
      "import { StyleSheet, Text, View } from 'react-native'",
      "",
      "export default function ${1:${TM_FILENAME_BASE}}() {",
      "\treturn (",
      "\t\t<View>",
      "\t\t\t<Text>$0</Text>",
      "\t\t</View>",
      "\t)",
      "}",
      "",
      "const styles = StyleSheet.create({})",
      ""
    ]
  },
  "reactNativeImport": {
    "prefix": "imrn",
    "body": "import { ${1:moduleName} } from 'react-native'"
  },
  "reactNativeStyles": {
    "prefix": "rnstyle",
    "body": ["const styles = StyleSheet.create({", "\t${1:style}", "})", ""]
  },
  "propTypeArray": {
    "prefix": "pta",
    "body": "PropTypes.array,",
    "description": "Array prop type"
  },
  "propTypeArrayRequired": {
    "prefix": "ptar",
    "body": "PropTypes.array.isRequired,",
    "description": "Array prop type required"
  },
  "propTypeBool": {
    "prefix": "ptb",
    "body": "PropTypes.bool,",
    "description": "Bool prop type"
  },
  "propTypeBoolRequired": {
    "prefix": "ptbr",
    "body": "PropTypes.bool.isRequired,",
    "description": "Bool prop type required"
  },
  "propTypeFunc": {
    "prefix": "ptf",
    "body": "PropTypes.func,",
    "description": "Func prop type"
  },
  "propTypeFuncRequired": {
    "prefix": "ptfr",
    "body": "PropTypes.func.isRequired,",
    "description": "Func prop type required"
  },
  "propTypeNumber": {
    "prefix": "ptn",
    "body": "PropTypes.number,",
    "description": "Number prop type"
  },
  "propTypeNumberRequired": {
    "prefix": "ptnr",
    "body": "PropTypes.number.isRequired,",
    "description": "Number prop type required"
  },
  "propTypeObject": {
    "prefix": "pto",
    "body": "PropTypes.object,",
    "description": "Object prop type"
  },
  "propTypeObjectRequired": {
    "prefix": "ptor",
    "body": "PropTypes.object.isRequired,",
    "description": "Object prop type required"
  },
  "propTypeString": {
    "prefix": "pts",
    "body": "PropTypes.string,",
    "description": "String prop type"
  },
  "propTypeStringRequired": {
    "prefix": "ptsr",
    "body": "PropTypes.string.isRequired,",
    "description": "String prop type required"
  },
  "propTypeNode": {
    "prefix": "ptnd",
    "body": "PropTypes.node,",
    "description": "Anything that can be rendered: numbers, strings, elements or an array"
  },
  "propTypeNodeRequired": {
    "prefix": "ptndr",
    "body": "PropTypes.node.isRequired,",
    "description": "Anything that can be rendered: numbers, strings, elements or an array required"
  },
  "propTypeElement": {
    "prefix": "ptel",
    "body": "PropTypes.element,",
    "description": "React element prop type"
  },
  "propTypeElementRequired": {
    "prefix": "ptelr",
    "body": "PropTypes.element.isRequired,",
    "description": "React element prop type required"
  },
  "propTypeInstanceOf": {
    "prefix": "pti",
    "body": "PropTypes.instanceOf($0),",
    "description": "Is an instance of a class prop type"
  },
  "propTypeInstanceOfRequired": {
    "prefix": "ptir",
    "body": "PropTypes.instanceOf($0).isRequired,",
    "description": "Is an instance of a class prop type required"
  },
  "propTypeEnum": {
    "prefix": "pte",
    "body": "PropTypes.oneOf(['$0']),",
    "description": "Prop type limited to specific values by treating it as an enum"
  },
  "propTypeEnumRequired": {
    "prefix": "pter",
    "body": "PropTypes.oneOf(['$0']).isRequired,",
    "description": "Prop type limited to specific values by treating it as an enum required"
  },
  "propTypeOneOfType": {
    "prefix": "ptet",
    "body": ["PropTypes.oneOfType([", "\t$0", "]),"],
    "description": "An object that could be one of many types"
  },
  "propTypeOneOfTypeRequired": {
    "prefix": "ptetr",
    "body": ["PropTypes.oneOfType([", "\t$0", "]).isRequired,"],
    "description": "An object that could be one of many types required"
  },
  "propTypeArrayOf": {
    "prefix": "ptao",
    "body": "PropTypes.arrayOf($0),",
    "description": "An array of a certain type"
  },
  "propTypeArrayOfRequired": {
    "prefix": "ptaor",
    "body": "PropTypes.arrayOf($0).isRequired,",
    "description": "An array of a certain type required"
  },
  "propTypeObjectOf": {
    "prefix": "ptoo",
    "body": "PropTypes.objectOf($0),",
    "description": "An object with property values of a certain type"
  },
  "propTypeObjectOfRequired": {
    "prefix": "ptoor",
    "body": "PropTypes.objectOf($0).isRequired,",
    "description": "An object with property values of a certain type required"
  },
  "propTypeShape": {
    "prefix": "ptsh",
    "body": ["PropTypes.shape({", "\t$0", "}),"],
    "description": "An object taking on a particular shape"
  },
  "propTypeShapeRequired": {
    "prefix": "ptshr",
    "body": ["PropTypes.shape({", "\t$0", "}).isRequired,"],
    "description": "An object taking on a particular shape required"
  },
  "propTypeExact": {
    "prefix": "ptex",
    "body": ["PropTypes.exact({", "\t$0", "}),"],
    "description": "An object with warnings on extra properties"
  },
  "propTypeExactRequired": {
    "prefix": "ptexr",
    "body": ["PropTypes.exact({", "\t$0", "}).isRequired,"],
    "description": "An object with warnings on extra properties required"
  },
  "staticPropTpyes": {
    "prefix": "ptypes",
    "body": ["static propTypes = {", "$0", "}", ""]
  },
  "propTypeAny": {
    "prefix": "ptany",
    "body": "PropTypes.any,",
    "description": "Any prop type"
  },
  "Comment Big Block": {
    "prefix": "cmmb",
    "body": ["/**", " * ${0}", " */"]
  },
  "describeBlock": {
    "prefix": "desc",
    "body": ["describe('$1', () => {", "\t$0", "})", ""],
    "description": "Testing `describe` block"
  },
  "testBlock": {
    "prefix": "test",
    "body": ["test('should $1', () => {", "\t$0", "})", ""],
    "description": "Testing `test` block"
  },
  "testAsyncBlock": {
    "prefix": "testa",
    "body": ["test('should $1', async () => {", "\t$0", "})", ""],
    "description": "Testing `asynchronous test` block"
  },
  "itBlock": {
    "prefix": "tit",
    "body": ["it('should $1', () => {", "\t$0", "})", ""],
    "description": "Testing `it` block"
  },
  "itAsyncBlock": {
    "prefix": "tita",
    "body": ["it('should $1', async () => {", "\t$0", "})", ""],
    "description": "Testing asynchronous `it` block"
  },
  "setupReactTest": {
    "prefix": "stest",
    "body": [
      "import React from 'react'",
      "import renderer from 'react-test-renderer'",
      "",
      "import { ${1:${TM_FILENAME_BASE}} } from '../${1:${TM_FILENAME_BASE}}'",
      "",
      "describe('<${1:${TM_FILENAME_BASE}} />', () => {",
      "\tconst defaultProps = {}",
      "\tconst wrapper = renderer.create(<${1:${TM_FILENAME_BASE}} {...defaultProps} />)",
      "",
      "\ttest('render', () => {",
      "\t\texpect(wrapper).toMatchSnapshot()",
      "\t})",
      "})",
      ""
    ]
  },
  "setupReactNativeTest": {
    "prefix": "sntest",
    "body": [
      "import 'react-native'",
      "import React from 'react'",
      "import renderer from 'react-test-renderer'",
      "",
      "import ${1:${TM_FILENAME_BASE}} from '../${1:${TM_FILENAME_BASE}}'",
      "",
      "describe('<${1:${TM_FILENAME_BASE}} />', () => {",
      "\tconst defaultProps = {}",
      "\tconst wrapper = renderer.create(<${1:${TM_FILENAME_BASE}} {...defaultProps} />)",
      "",
      "\ttest('render', () => {",
      "\t\texpect(wrapper).toMatchSnapshot()",
      "\t})",
      "})",
      ""
    ]
  },
  "setupReactComponentTestWithRedux": {
    "prefix": "srtest",
    "body": [
      "import React from 'react'",
      "import renderer from 'react-test-renderer'",
      "import { Provider } from 'react-redux'",
      "",
      "import store from 'src/store'",
      "import { ${1:${TM_FILENAME_BASE}} } from '../${1:${TM_FILENAME_BASE}}'",
      "",
      "describe('<${1:${TM_FILENAME_BASE}} />', () => {",
      "\tconst defaultProps = {}",
      "\tconst wrapper = renderer.create(",
      "\t\t<Provider store={store}>",
      "\t\t <${1:${TM_FILENAME_BASE}} {...defaultProps} />",
      "\t\t</Provider>,",
      "\t)",
      "",
      "\ttest('render', () => {",
      "\t\texpect(wrapper).toMatchSnapshot()",
      "\t})",
      "})",
      ""
    ],
    "description": "Create test component"
  },
  "setupReactNativeTestWithRedux": {
    "prefix": "snrtest",
    "body": [
      "import 'react-native'",
      "import React from 'react'",
      "import renderer from 'react-test-renderer'",
      "import { Provider } from 'react-redux'",
      "",
      "import store from 'src/store'",
      "import ${1:${TM_FILENAME_BASE}} from '../${1:${TM_FILENAME_BASE}}'",
      "",
      "describe('<${1:${TM_FILENAME_BASE}} />', () => {",
      "\tconst defaultProps = {}",
      "\tconst wrapper = renderer.create(",
      "\t\t<Provider store={store}>",
      "\t\t\t<${1:${TM_FILENAME_BASE}} {...defaultProps} />",
      "\t\t</Provider>,",
      "\t)",
      "",
      "\ttest('render', () => {",
      "\t\texpect(wrapper).toMatchSnapshot()",
      "\t})",
      "})",
      ""
    ]
  },
  "graphQLForComponent": {
    "prefix": "graphql",
    "body": ["import { compose, graphql } from 'react-apollo'", ""]
  },
  "exportGraphQL": {
    "prefix": "expgql",
    "body": [
      "export default compose(",
      "\tgraphql(${1:queryOrMutation}, { name: ${2:name} }),",
      ")(${1:${TM_FILENAME_BASE}})"
    ]
  },
  "hocComponentWithRedux": {
    "prefix": "hocredux",
    "body": [
      "import React from 'react'",
      "import PropTypes from 'prop-types'",
      "import { connect } from 'react-redux'",
      "",
      "export const mapStateToProps = state => ({",
      "",
      "})",
      "",
      "export const mapDispatchToProps = {",
      " ",
      "}",
      "",
      "export const ${1:hocComponentName} = (WrappedComponent) => {",
      "\tconst hocComponent = ({ ...props }) => <WrappedComponent {...props} />",
      "",
      "\thocComponent.propTypes = {",
      "\t}",
      "",
      "\treturn hocComponent",
      "}",
      "",
      "export default WrapperComponent => connect(mapStateToProps, mapDispatchToProps)(${1:hocComponentName}(WrapperComponent))",
      ""
    ]
  },
  "hocComponent": {
    "prefix": "hoc",
    "body": [
      "import React from 'react'",
      "import PropTypes from 'prop-types'",
      "",
      "export default (WrappedComponent) => {",
      "\tconst hocComponent = ({ ...props }) => <WrappedComponent {...props} />",
      "",
      "\thocComponent.propTypes = {",
      "\t}",
      "",
      "\treturn hocComponent",
      "}",
      ""
    ]
  },
  "useState": {
    "prefix": "useState",
    "body": [
      "const [${1:state}, set${1/(.*)/${1:/capitalize}/}] = useState(${2:initialState})"
    ]
  },
  "useEffect": {
    "prefix": "useEffect",
    "body": [
      "useEffect(() => {",
      "\t${1:effect}",
      "\treturn () => {",
      "\t\t${2:cleanup}",
      "\t}",
      "}, [${3:input}])"
    ]
  },
  "useContext": {
    "prefix": "useContext",
    "body": ["const ${1:context} = useContext(${2:contextValue})"]
  },
  "useReducer": {
    "prefix": "useReducer",
    "body": [
      "const [state, dispatch] = useReducer(${1:reducer}, ${2:initialState}, ${3:init})"
    ]
  },
  "useCallback": {
    "prefix": "useCallback",
    "body": [
      "useCallback(",
      "\t() => {",
      "\t\t${1:callback}",
      "\t},",
      "\t[${2:input}],",
      ")"
    ]
  },
  "useMemo": {
    "prefix": "useMemo",
    "body": ["useMemo(() => ${1:function}, ${2:input})"]
  },
  "useRef": {
    "prefix": "useRef",
    "body": ["const ${1:ref} = useRef(${2:initialValue})"]
  },
  "useImperativeHandle": {
    "prefix": "useImperativeHandle",
    "body": [
      "useImperativeHandle(",
      "\t${1:ref},",
      "\t() => {",
      "\t\t${2:handler}",
      "\t},",
      "\t[${3:input}],",
      ")"
    ]
  },
  "useDebugValue": {
    "prefix": "useDebugValue",
    "body": ["useDebugValue(${1:value})"]
  },
  "useLayoutEffect": {
    "prefix": "useLayoutEffect",
    "body": [
      "useLayoutEffect(() => {",
      "\t${1:effect}",
      "\treturn () => {",
      "\t\t${2:cleanup}",
      "\t};",
      "}, [${3:input}])"
    ]
  },
  "useSelector": {
    "prefix": "useSelector",
    "body": ["const ${1:state} = useSelector(state => state.${1:state})"]
  },
  "useDispatch": {
    "prefix": "useDispatch",
    "body": ["const dispatch = useDispatch(${1:function})"]
  },
  "typeof": {
    "prefix": "tpf",
    "body": ["typeof ${0}"]
  },
  "Resets default styles": {
    "scope": "css,html,javascript,javascriptreact,typescript,typescriptreact",
    "prefix": "resets",
    "body": [
      "* {",
      "   margin: 0;",
      "   padding: 0;",
      "   outline: 0;",
      "   box-sizing: border-box;",
      "}"
    ],

    "description": "Resets default styles, margin, padding and outline"
  },

  "Centralize div": {
    "scope": "css,html,javascript,javascriptreact,typescript,typescriptreact",
    "prefix": "centralize",
    "body": [
      "display: flex;",
      "align-items: center;",
      "justify-content: center;"
    ],

    "description": "Stylize div to align content to center"
  },

  "Initialize HTML": {
    "scope": "html,php,javascript,javascriptreact,typescript,typescriptreact",
    "prefix": "inithtml",
    "body": [
      "<!DOCTYPE html>",
      "<html>",
      "   <head>",
      "       <meta charset='UTF-8'>",
      "       <title>Title</title>",
      "   </head>",
      "   <body>",
      "       <h1>Snippety</h1>",
      "   </body>",
      "</html>"
    ],

    "description": "Initializes a HTML file"
  },
  "multi-stage-node-and-angular-dockerfile": {
    "prefix": [
      "angular multi-stage node and dockerfile",
      "docker-angular-node-multi-stage"
    ],
    "body": [
      "# Client App",
      "FROM johnpapa/angular-cli as client-app",
      "LABEL authors=\"${1:John Papa}\"",
      "WORKDIR /usr/src/app",
      "COPY [\"package.json\", \"npm-shrinkwrap.json*\", \"./\"]",
      "RUN npm install --silent",
      "COPY . .",
      "RUN ng build --prod",
      "",
      "# Node server",
      "FROM ${2:node:12-alpine} as node-server",
      "WORKDIR /usr/src/app",
      "COPY [\"package.json\", \"npm-shrinkwrap.json*\", \"./\"]",
      "RUN npm install --production --silent && mv node_modules ../",
      "COPY ${3:server.js} .",
      "COPY ${4:/server} /usr/src/app/server",
      "",
      "# Final image",
      "FROM ${2:node:12-alpine}",
      "WORKDIR /usr/src/app",
      "COPY --from=node-server /usr/src /usr/src",
      "COPY --from=client-app /usr/src/app/dist ./",
      "EXPOSE ${5:3000}",
      "# CMD [\"node\", \"server.js\"]",
      "CMD [\"npm\", \"start\"]",
      "$0"
    ],
    "description": "Multi-stage Node and Angular Dockerfile",
    "scope": "dockerfile"
  },
  "class": {
    "prefix": ["angular class", "a-class"],
    "body": ["[class]=\"${1:expression}\""],
    "description": "Angular [class] binding",
    "scope": "html"
  },
  "style": {
    "prefix": ["angular style", "a-style"],
    "body": ["[style.${1:property}]=\"${2:expression}\""],
    "description": "Angular [style] binding",
    "scope": "html"
  },
  "ngclass": {
    "prefix": ["angular ng class", "a-ngclass"],
    "body": ["[ngClass]=\"{${1:cssClass}: ${2:expression}}\""],
    "description": "Angular ngClass",
    "scope": "html"
  },
  "ngfor": {
    "prefix": ["angular ng for", "a-ngfor"],
    "body": ["*ngFor=\"let ${1:item} of ${2:list}\"${0}"],
    "description": "Angular *ngFor",
    "scope": "html"
  },
  "ngfor-with-trackby": {
    "prefix": ["angular ng for with track by", "a-ngfor-trackby"],
    "body": ["*ngFor=\"let ${1:item} of ${2:list}; trackBy:${1:item}.id\"${0}"],
    "description": "Angular *ngFor with trackBy",
    "scope": "html"
  },
  "ngforasync": {
    "prefix": ["angular ng for async", "a-ngforasync"],
    "body": [
      "*ngFor=\"let ${1:item} of ${2:stream} | async as ${3:list}\"${0}"
    ],
    "description": "Angular *ngForAsync",
    "scope": "html"
  },
  "ngform": {
    "prefix": ["angular ng form", "a-form"],
    "body": [
      "<form (ngSubmit)=\"onSubmit()\" #${1:form}=\"ngForm\">",
      "</form>"
    ],
    "description": "Form with ngSubmit and form attributes",
    "scope": "html"
  },
  "ngformarrayname": {
    "prefix": ["angular ng form array name", "a-formarrayname"],
    "body": ["formArrayName=\"${1:control}\""],
    "description": "Angular formArrayName",
    "scope": "html"
  },
  "ngformcontrolname": {
    "prefix": ["angular ng form control name", "a-formcontrolname"],
    "body": ["formControlName=\"${1:control}\""],
    "description": "Angular formControlName",
    "scope": "html"
  },
  "ngformgroup": {
    "prefix": ["angular ng form group", "a-formgroup"],
    "body": ["[formGroup]=\"${1:form}\""],
    "description": "Angular formGroup",
    "scope": "html"
  },
  "ngformgroupname": {
    "prefix": ["angular ng form group name", "a-formgroupname"],
    "body": ["[formGroupName]=\"${1:name}\""],
    "description": "Angular formGroupName",
    "scope": "html"
  },
  "ngformsubmit": {
    "prefix": ["angular ng form submit", "a-form-submit"],
    "body": [
      "<button type=\"submit\" [disabled]=\"!${1:form}.form.valid\">",
      "\tSave",
      "</button>"
    ],
    "description": "Angular form submit",
    "scope": "html"
  },
  "ngif": {
    "prefix": ["angular ng if", "a-ngif"],
    "body": ["*ngIf=\"${1:expression}\""],
    "description": "Angular *ngIf",
    "scope": "html"
  },
  "ngifelse": {
    "prefix": ["angular ng if else", "a-ngifelse"],
    "body": ["*ngIf=\"${1:expression};else ${2:templateName}\""],
    "description": "Angular *ngIfElse",
    "scope": "html"
  },
  "ngmodel": {
    "prefix": ["angular ng model", "a-ngmodel"],
    "body": ["[(ngModel)]=\"${1:binding}\""],
    "description": "Angular ngModel",
    "scope": "html"
  },
  "ngrouterlink": {
    "prefix": ["angular ng router link", "a-routerlink"],
    "body": [
      "[routerLink]=\"['/${1:routePath}']\" routerLinkActive=\"${2:router-link-active}\" $0"
    ],
    "description": "Angular routerLink",
    "scope": "html"
  },
  "ngrouterlinkwithparameter": {
    "prefix": ["angular ng router link with parameter", "a-routerlink-param"],
    "body": [
      "[routerLink]=\"['${1:routePath}', ${2:routeParameterValue}]\"",
      "routerLinkActive=\"${3:router-link-active}\"$0"
    ],
    "description": "Angular routerLink with a route parameter",
    "scope": "html"
  },
  "ngselect": {
    "prefix": ["angular ng select", "a-select"],
    "body": [
      "<select [(ngModel)]=\"${1:model}\">",
      "\t<option *ngFor=\"let ${2:item} of ${3:list}\" [value]=\"${2:item}\">{{${2:item}}}</option>",
      "</select>"
    ],
    "description": "<select> control with ngModel",
    "scope": "html"
  },
  "ngstyle": {
    "prefix": ["angular ng style", "a-ngstyle"],
    "body": ["[ngStyle]=\"{${1:style}: ${2:expression}}\""],
    "description": "Angular ngStyle",
    "scope": "html"
  },
  "ngswitch": {
    "prefix": ["angular ng switch", "a-ngswitch"],
    "body": [
      "<div [ngSwitch]=\"${1:conditionExpression}\">",
      "\t<div *ngSwitchCase=\"${2:expression}\">${3:output}</div>",
      "\t<div *ngSwitchDefault>${4:output2}</div>",
      "</div>"
    ],
    "description": "Angular ngSwitch",
    "scope": "html"
  },
  "pre-w-json": {
    "prefix": ["angular pre json", "a-prej"],
    "body": ["<pre>{{${1:model} | json}}</pre>$0"],
    "description": "Angular pre debug | json",
    "scope": "html"
  },
  "pre-w-async-json": {
    "prefix": ["angular pre async json", "a-preja"],
    "body": ["<pre>{{${1:model} | async | json}}</pre>$0"],
    "description": "Angular pre debug | async | json",
    "scope": "html"
  },
  "ng-container": {
    "prefix": ["angular ng-container", "a-ng-container"],
    "body": ["<ng-container $0></ng-container>"],
    "description": "Angular ng-container",
    "scope": "html"
  },
  "ng-template": {
    "prefix": ["angular ng-template", "a-ng-template"],
    "body": [
      "<ng-template [ngTemplateOutlet]=\"${1:outlet}\" [ngOutletContext]=\"${2:context}\"></ng-template>"
    ],
    "description": "Angular ng-template",
    "scope": "html"
  },
  "ng-content": {
    "prefix": ["angular ng-content", "a-ng-content"],
    "body": ["<ng-content select=\"${0:selector}\"></ng-content>"],
    "description": "Angular ng-content",
    "scope": "html"
  },
  "node-js-express-server": {
    "prefix": ["angular node express server", "ex-node-server-simple"],
    "description": "Node.js Express Server",
    "body": [
      "const express = require('express');",
      "const app = express();",
      "const port = process.env.PORT || ${1:port};",
      "const www = process.env.WWW || '${2:./}';",
      "app.use(express.static(www));",
      "console.log(`serving \\${www}`);",
      "app.get('*', (req, res) => {",
      "\tres.sendFile(`index.html`, { root: www });",
      "});",
      "app.listen(port, () => console.log(`listening on http://localhost:\\${port}`));",
      "$0"
    ],
    "scope": "javascript"
  },
  "angular-component": {
    "prefix": ["angular component", "a-component"],
    "description": "Angular component",
    "body": [
      "import { Component, OnInit } from '@angular/core';",
      "",
      "@Component({",
      "\tselector: '${1:selector-name}',",
      "\ttemplateUrl: '${2:name}.component.html'",
      "})",
      "",
      "export class ${3:Name}Component implements OnInit {",
      "\tconstructor() { }",
      "",
      "\tngOnInit() { }$0",
      "}"
    ],
    "scope": "typescript"
  },
  "angular-component-with-inline-template": {
    "prefix": ["angular component inline template", "a-component-inline"],
    "description": "Angular component with an inline template",
    "body": [
      "import { Component, OnInit } from '@angular/core';",
      "",
      "@Component({",
      "\tselector: '${1:selector-name}',",
      "\ttemplate: `$0`",
      "})",
      "",
      "export class ${2:Name}Component implements OnInit {",
      "\tconstructor() { }",
      "",
      "\tngOnInit() { }",
      "}"
    ],
    "scope": "typescript"
  },
  "angular-pipe": {
    "prefix": ["angular pipe", "a-pipe"],
    "description": "Angular pipe",
    "body": [
      "import { Pipe, PipeTransform } from '@angular/core';",
      "",
      "@Pipe({",
      "\tname: '${1:selector-name}'",
      "})",
      "",
      "export class ${2:Name}Pipe implements PipeTransform {",
      "\ttransform(value: any, ...args: any[]): any {",
      "\t\t$0",
      "\t}",
      "}"
    ],
    "scope": "typescript"
  },
  "angular-service": {
    "prefix": ["angular service", "a-service"],
    "description": "Angular Service with Injectable ProvidedIn Root",
    "body": [
      "import { Injectable } from '@angular/core';",
      "",
      "@Injectable({providedIn: ${1:'root'}})",
      "export class ${2:ServiceName}Service {",
      "\tconstructor() { }",
      "\t$0",
      "}"
    ],
    "scope": "typescript"
  },
  "angular-default-route-path": {
    "prefix": ["angular default route path", "a-route-path-default"],
    "description": "Angular default route path",
    "body": ["{ path: '', pathMatch: 'full', redirectTo: '${1:path}' }$0"],
    "scope": "typescript"
  },
  "angular-route-path-with-children": {
    "prefix": ["angular route path children", "a-route-path-with-children"],
    "description": "Angular route path with children",
    "body": [
      "{",
      "\tpath: '${1:path}', ",
      "\tcomponent: ${2:Component},",
      "\tchildren: [",
      "\t\t{ path: '${3:childpath}', component: ${4:ChildComponent} }",
      "\t]",
      "}$0"
    ],
    "scope": "typescript"
  },
  "angular-404-route-path": {
    "prefix": ["angular 404 route path", "a-route-path-404"],
    "description": "Angular 404 route path",
    "body": ["{ path: '**', component: ${1:PathNotFoundComponent} }$0"],
    "scope": "typescript"
  },
  "angular-eager-route-path": {
    "prefix": ["angular eager route path", "a-route-path-eager"],
    "description": "Angular eager route path",
    "body": ["{ path: '${1:path}', component: ${2:Name}Component },"],
    "scope": "typescript"
  },
  "angular-lazy-route-path": {
    "prefix": ["angular lazy route path", "a-route-path-lazy"],
    "description": "Angular lazy route path",
    "body": [
      "{",
      "\tpath: '${1:path}', ",
      "\tloadChildren: () => import('${2:lazy-path}').then(m => m.${3:lazy-module})",
      "},"
    ],
    "scope": "typescript"
  },
  "routing-params-subscribe": {
    "prefix": ["angular routing params subscribe", "a-route-params-subscribe"],
    "description": "Angular - subscribe to routing parameters",
    "body": [
      "this.route.paramMap",
      "\t.pipe(switchMap(params => params.get('id')), tap(id => (this.id = +id)))",
      "\t.subscribe(id => {$1});",
      "$0"
    ],
    "scope": "typescript"
  },
  "httpclient-get": {
    "prefix": ["angular http client get", "a-httpclient-get"],
    "description": "Angular HttpClient.get",
    "body": ["return this.httpClient.get('${1:url}');$0"],
    "scope": "typescript"
  },
  "angular-httpclient-service": {
    "prefix": ["angular http client service", "a-service-httpclient"],
    "description": "Angular service with HttpClient",
    "body": [
      "import { Injectable } from '@angular/core';",
      "import { HttpClient } from '@angular/common/http';",
      "",
      "@Injectable({providedIn: ${1:'root'}})",
      "export class ${2:ServiceName}Service {",
      "\tconstructor(private httpClient: HttpClient) { }",
      "\t$0",
      "}"
    ],
    "scope": "typescript"
  },
  "angular-httpinterceptor-for-logging": {
    "prefix": [
      "angular http interceptor logging",
      "a-http-interceptor-logging"
    ],
    "description": "Angular HttpInterceptor for Logging HttpClient",
    "body": [
      "import { HttpInterceptor, HttpHandler, HttpRequest, HttpEvent, HttpResponse } from '@angular/common/http';",
      "import { Observable } from 'rxjs';",
      "import { tap } from 'rxjs/operators';",
      "",
      "@Injectable()",
      "export class LogInterceptor implements HttpInterceptor {",
      "\tconstructor() {}",
      "",
      "\tintercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {",
      "\t\tconst started = Date.now();",
      "\t\treturn next.handle(req).pipe(",
      "\t\t\ttap(event => {",
      "\t\t\t\tif (event instanceof HttpResponse) {",
      "\t\t\t\t\tconst elapsed = Date.now() - started;",
      "\t\t\t\t\tconsole.log(`Request for \\${req.urlWithParams} took \\${elapsed} ms.`);",
      "\t\t\t\t}",
      "\t\t\t})",
      "\t\t);",
      "\t}",
      "}"
    ],
    "scope": "typescript"
  },
  "angular-httpinterceptor-for-headers": {
    "prefix": [
      "angular http interceptor headers",
      "a-http-interceptor-headers"
    ],
    "description": "Angular HttpInterceptor for headers HttpClient",
    "body": [
      "import { Injectable } from '@angular/core';",
      "import { HttpEvent, HttpInterceptor, HttpHandler, HttpRequest } from '@angular/common/http';",
      "import { Observable } from 'rxjs';",
      "",
      "@Injectable()",
      "export class HeaderInterceptor implements HttpInterceptor {",
      "\tconstructor() {}",
      "",
      "\tintercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {",
      "\t\tconst headers = req.headers",
      "\t\t\t.set('Content-Type', 'application/json');",
      "\t\tconst authReq = req.clone({ headers });",
      "\t\treturn next.handle(authReq);",
      "\t}",
      "}"
    ],
    "scope": "typescript"
  },
  "angular-httpinterceptor-empty": {
    "prefix": ["angular http interceptor empty", "a-http-interceptor"],
    "description": "Empty Angular HttpInterceptor for HttpClient",
    "body": [
      "import { Injectable } from '@angular/core';",
      "import { HttpInterceptor, HttpEvent, HttpHandler, HttpRequest } from '@angular/common/http';",
      "import { Observable } from 'rxjs';",
      "",
      "@Injectable()",
      "export class ${2:Your}Interceptor implements HttpInterceptor {",
      "\tintercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {",
      "\t\treturn next.handle(req);",
      "\t}",
      "}"
    ],
    "scope": "typescript"
  },
  "output-event": {
    "prefix": ["angular output event", "a-output-event"],
    "body": ["@Output() ${1:eventName} = new EventEmitter<${2:eventType}>();"],
    "description": "Angular @Output event and emitter",
    "scope": "typescript"
  },
  "subscribe": {
    "prefix": ["angular subscribe", "a-subscribe"],
    "description": "Angular observable subscribe",
    "body": [
      "this.${1:service}.${2:function}",
      "\t.subscribe(${3:arg} => this.${4:property} = ${3:arg});",
      "$0"
    ],
    "scope": "typescript"
  },
  "angular-root-component": {
    "prefix": ["angular root component", "a-component-root"],
    "description": "Angular App root component",
    "body": [
      "import { Component } from '@angular/core';",
      "",
      "@Component({",
      "\tselector: '${1:prefix-app}',",
      "\ttemplate: `",
      "\t\t<router-outlet></router-outlet>",
      "\t\t`",
      "})",
      "export class ${2:App}Component { }",
      "$0"
    ],
    "scope": "typescript"
  },
  "angular-root-module": {
    "prefix": ["angular root module", "a-module-root"],
    "description": "Angular Root Module",
    "body": [
      "import { NgModule } from '@angular/core';",
      "import { BrowserModule  } from '@angular/platform-browser';",
      "import { HttpModule } from '@angular/http';",
      "",
      "import { ${1:App}Component } from './${1:app}.component';",
      "",
      "@NgModule({",
      "\timports: [",
      "\t\tBrowserModule,",
      "\t\tHttpModule,",
      "\t],",
      "\tdeclarations: [${1:App}Component],",
      "\tbootstrap: [${1:App}Component],",
      "})",
      "export class ${1:App}Module { }",
      "$0"
    ],
    "scope": "typescript"
  },
  "route-definitions": {
    "prefix": ["angular route definitions", "a-routes"],
    "description": "Route definitions",
    "body": [
      "import { Routes } from '@angular/router';",
      "",
      "export const routes: Routes = [${0}]"
    ],
    "scope": "typescript"
  },
  "angular-module": {
    "prefix": ["angular module", "a-module"],
    "description": "Angular Module",
    "body": [
      "import { NgModule } from '@angular/core';",
      "",
      "import { ${1:Name}Component } from './${2:name}.component';",
      "",
      "@NgModule({",
      "\timports: [],",
      "\texports: [],",
      "\tdeclarations: [${1:Name}Component],",
      "\tproviders: [],",
      "})",
      "export class ${1:Name}Module { }",
      "$0"
    ],
    "scope": "typescript"
  },
  "angular-directive": {
    "prefix": ["angular directive", "a-directive"],
    "description": "Angular directive",
    "body": [
      "import { Directive } from '@angular/core';",
      "",
      "@Directive({ selector: '[${1:selector-name}]' })",
      "export class ${2:Name}Directive {",
      "\tconstructor() { }",
      "}"
    ],
    "scope": "typescript"
  },
  "angular-canactivate-guard": {
    "prefix": ["angular can activate guard", "a-guard-can-activate"],
    "description": "Angular CanActivate guard",
    "body": [
      "import { Injectable } from '@angular/core';",
      "import { ActivatedRouteSnapshot, CanActivate, RouterStateSnapshot } from '@angular/router';",
      "",
      "@Injectable({providedIn: ${1:'root'}})",
      "export class ${2:Name}Guard implements CanActivate {",
      "\tconstructor() { }",
      "",
      "\tcanActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {",
      "\t\treturn true;$0",
      "\t}",
      "}"
    ],
    "scope": "typescript"
  },
  "angular-canactivatechild-guard": {
    "prefix": [
      "angular can activate child guard",
      "a-guard-can-activate-child"
    ],
    "description": "Angular CanActivateChild guard",
    "body": [
      "import { Injectable } from '@angular/core';",
      "import { ActivatedRouteSnapshot, CanActivateChild, RouterStateSnapshot } from '@angular/router';",
      "",
      "@Injectable({providedIn: ${1:'root'}})",
      "export class ${2:Name}Guard implements CanActivateChild {",
      "\tconstructor() { }",
      "",
      "\tcanActivateChild(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {",
      "\t\treturn true;$0",
      "\t}",
      "}"
    ],
    "scope": "typescript"
  },
  "angular-canload-guard": {
    "prefix": ["angular can load guard", "a-guard-can-load"],
    "description": "Angular CanLoad guard",
    "body": [
      "import { Injectable } from '@angular/core';",
      "import { CanLoad, Route } from '@angular/router';",
      "",
      "@Injectable({providedIn: ${1:'root'}})",
      "export class ${2:Name}Guard implements CanLoad {",
      "\tconstructor() { }",
      "",
      "\tcanLoad(route: Route) {",
      "\t\treturn true;$0",
      "\t}",
      "}"
    ],
    "scope": "typescript"
  },
  "angular-candeactivate-guard": {
    "prefix": ["angular can deactivate guard", "a-guard-can-deactivate"],
    "description": "Angular CanDeactivate guard",
    "body": [
      "import { Injectable } from '@angular/core';",
      "import { ActivatedRouteSnapshot, CanDeactivate, RouterStateSnapshot } from '@angular/router';",
      "import { Observable } from 'rxjs';",
      "",
      "import { ${2:ComponentName}Component } from './${3:filename}.component';",
      "",
      "// Consider using this interface for all CanDeactivate guards,",
      "// and have your components implement this interface, too.",
      "//",
      "//   e.g. export class CanDeactivateGuard implements CanDeactivate<CanComponentDeactivate> {",
      "//",
      "// export interface CanComponentDeactivate {",
      "// canDeactivate: () => any;",
      "// }",
      "",
      "@Injectable({providedIn: ${4:'root'}})",
      "export class ${1:Name}Guard implements CanDeactivate<${2:ComponentName}Component> {",
      "\tcanDeactivate(",
      "\t\tcomponent: ${2:ComponentName}Component,",
      "\t\tcurrentRoute: ActivatedRouteSnapshot, ",
      "\t\tcurrentState: RouterStateSnapshot",
      "\t): Observable<boolean>|Promise<boolean>|boolean {",
      "\t\treturn false;$0",
      "\t}",
      "}"
    ],
    "scope": "typescript"
  },
  "angular-opt-in-preload-strategy": {
    "prefix": ["angular opt-in preload strategy", "a-preload-opt-in-strategy"],
    "description": "Angular opt-in preload strategy",
    "body": [
      "import { PreloadingStrategy, Route } from '@angular/router';",
      "import { Observable, of } from 'rxjs';",
      "",
      "export class PreloadSelectedModulesList implements PreloadingStrategy {",
      "\tpreload(route: Route, load: Function): Observable<any> {",
      "\t\treturn route.data && route.data['${1:preload}'] ? load() : of(null);",
      "\t}",
      "}",
      "$0"
    ],
    "scope": "typescript"
  },
  "angular-network-aware-preload-strategy": {
    "prefix": [
      "angular network-aware preload strategy",
      "a-preload-network-strategy"
    ],
    "description": "Angular network aware preload strategy",
    "body": [
      "import { Injectable } from '@angular/core';",
      "import { PreloadingStrategy, Route } from '@angular/router';",
      "import { Observable, EMPTY } from 'rxjs';",
      "",
      "// avoid typing issues for now",
      "export declare var navigator;",
      "",
      "@Injectable({ providedIn: 'root' })",
      "export class NetworkAwarePreloadStrategy implements PreloadingStrategy {",
      "\tpreload(route: Route, load: () => Observable<any>): Observable<any> {",
      "\t\treturn this.hasGoodConnection() ? load() : EMPTY;",
      "\t}",
      "",
      "\thasGoodConnection(): boolean {",
      "\t\tconst conn = navigator.connection;",
      "\t\tif (conn) {",
      "\t\t\tif (conn.saveData) {",
      "\t\t\t\treturn false; // save data mode is enabled, so dont preload",
      "\t\t\t}",
      "\t\t\tconst avoidTheseConnections = ['slow-2g', '2g' /* , '3g', '4g' */];",
      "\t\t\tconst effectiveType = conn.effectiveType || '';",
      "\t\t\tif (avoidTheseConnections.includes(effectiveType)) {",
      "\t\t\t\treturn false;",
      "\t\t\t}",
      "\t\t}",
      "\t\treturn true;",
      "\t}",
      "}"
    ],
    "scope": "typescript"
  },
  "angular-router-events": {
    "prefix": ["angular router events", "a-router-events"],
    "description": "Angular Router Events",
    "body": [
      "checkEvents() {",
      "\tthis.router.events.subscribe(event => {",
      "\t\tswitch (true) {",
      "\t\t\tcase event instanceof ${1:eventName}:",
      "\t\t\t\t$0",
      "\t\t\t\tbreak;",
      "",
      "\t\t\tdefault:",
      "\t\t\t\tbreak;",
      "\t\t}",
      "\t});",
      "}"
    ],
    "scope": "typescript"
  },
  "angular-module-skipself-constructor": {
    "prefix": ["angular module skip self constructor", "a-ctor-skip-self"],
    "description": "Angular Module SkipSelf constructor",
    "body": [
      "constructor( @Optional() @SkipSelf() parentModule: ${1:ModuleName} {",
      "\tif (parentModule) {",
      "\t\tconst msg = `${1:ModuleName} has already been loaded. ",
      "\t\t\tImport ${1:ModuleName} once, only, in the root AppModule.`;",
      "\t\tthrow new Error(msg);",
      "\t}",
      "}"
    ],
    "scope": "typescript"
  },
  "rxjs-import": {
    "prefix": ["angular import rx js", "a-rxjs-import"],
    "description": "RxJs import",
    "body": ["import { ${1:Observable} } from 'rxjs';", "$0"],
    "scope": "typescript"
  },
  "rxjs-operator-import": {
    "prefix": ["angular import rx js operator", "a-rxjs-operator-import"],
    "description": "RxJs import",
    "body": ["import { ${1:map} } from 'rxjs/operators';", "$0"],
    "scope": "typescript"
  },
  "angular-resolver": {
    "prefix": ["angular resolver", "a-resolver"],
    "description": "Angular Resolver",
    "body": [
      "import { Injectable } from '@angular/core';",
      "import { Resolve, ActivatedRouteSnapshot } from '@angular/router';",
      "import { Observable } from 'rxjs';",
      "",
      "@Injectable({ providedIn: ${1:'root'} })",
      "export class ${2:YourResolver} implements Resolve<${3:ObjectToResolve}> {",
      "\tresolve(route: ActivatedRouteSnapshot): Observable<${3:ObjectToResolve}> | Promise<${3:ObjectToResolve}> | ${3:ObjectToResolve} {",
      "\t\treturn ${0};",
      "\t}",
      "}"
    ],
    "scope": "typescript"
  },
  "ngrx-store-module": {
    "prefix": ["angular ng rx store module", "a-ngrx-store-module"],
    "description": "NgRx Store Module",
    "body": [
      "import { NgModule } from '@angular/core';",
      "import { EffectsModule } from '@ngrx/effects';",
      "import { StoreModule } from '@ngrx/store';",
      "import { StoreDevtoolsModule } from '@ngrx/store-devtools';",
      "import { environment } from '../../environments/environment';",
      "",
      "@NgModule({",
      "  imports: [",
      "    StoreModule.forRoot({}),",
      "    EffectsModule.forRoot([]),",
      "    environment.production ? [] : StoreDevtoolsModule.instrument()",
      "  ]",
      "})",
      "export class $1StoreModule {}"
    ],
    "scope": "typescript"
  },
  "ngrx-create-action": {
    "prefix": ["angular ng rx create action", "a-ngrx-create-action"],
    "description": "Creates an NgRx Action",
    "body": [
      "export const ${1:action} = createAction('[${2:Source}] ${3:Event}');"
    ],
    "scope": "typescript"
  },
  "ngrx-create-action-w-props": {
    "prefix": [
      "angular ng rx create action props",
      "a-ngrx-create-action-props"
    ],
    "description": "Creates an NgRx Action with Props",
    "body": [
      "export const ${1:action} = createAction('[${2:Source}] ${3:Event}', props<{${4:key}: ${5:type}}>());"
    ],
    "scope": "typescript"
  },
  "ngrx-create-reducer": {
    "prefix": ["angular ng rx create reducer", "a-ngrx-create-reducer"],
    "description": "Creates an NgRx Reducer",
    "body": [
      "const ${1:feature}Reducer = createReducer(",
      "\tinitialState,",
      "\ton($1Actions.action, state => ({ ...state, ${2:prop}: ${3:updatedValue} })),",
      ");",
      "",
      "export function reducer(state: State | undefined, action: Action) {",
      "\treturn $1Reducer(state, action);",
      "}"
    ],
    "scope": "typescript"
  },
  "ngrx-create-effect": {
    "prefix": ["angular ng rx create effect", "a-ngrx-create-effect"],
    "description": "Creates an NgRx Effect",
    "body": [
      "${1:effectName}$ = createEffect(() => {",
      "\treturn this.actions$.pipe(",
      "\t\t\tofType(${2:action}),",
      "\t\t\t/** An EMPTY observable only emits completion. Replace with your own observable stream */",
      "\t\t\t${3:operator}(() => ${4:EMPTY}));",
      "});"
    ],
    "scope": "typescript"
  },
  "ngrx-create-effect-for-api-call": {
    "prefix": [
      "angular ng rx create effect api call",
      "a-ngrx-create-effect-api"
    ],
    "description": "Creates an NgRx Effect Scaffolded for API Call",
    "body": [
      "${1:effectName}$ = createEffect(() => {",
      "\treturn this.actions$.pipe(",
      "\t\t\tofType(${2:Feature}Actions.${3:action}),",
      "\t\t\t${4:operator}(() =>",
      "\t\t\t\t${5:apiSource}.pipe(",
      "\t\t\t\t\tmap(data => $2Actions.$3Success({ data })),",
      "\t\t\t\t\tcatchError(error => of($2Actions.$3Failure({ error }))))",
      "\t\t\t\t),",
      "\t);",
      "});"
    ],
    "scope": "typescript"
  },
  "ngrx-create-selector": {
    "prefix": ["angular ng rx create selector", "a-ngrx-create-selector"],
    "description": "Creates an NgRx Selector",
    "body": [
      "export const select${1:Feature}${2:Property} = createSelector(",
      "\tselect$1,",
      "\t(state: $1State) => state.${3:property}",
      ");"
    ],
    "scope": "typescript"
  },
  "ngrx-create-selector-w-props": {
    "prefix": [
      "angular ng rx create selector props",
      "a-ngrx-create-selector-props"
    ],
    "description": "Creates an NgRx Selector using props",
    "body": [
      "export const select${1:Feature}${2:Property} = createSelector(",
      "\tselect$1,",
      "\t(state: $1State, props) => ${3:selectLogic}",
      ");"
    ],
    "scope": "typescript"
  },
  "ngrx-data-import-entity-data-module": {
    "prefix": [
      "angular ng rx data import entity module",
      "a-ngrx-data-entity-data-module-import"
    ],
    "description": "Import NgRx Entity Data Module",
    "body": ["EntityDataModule.forRoot(${1:entityConfig}),"],
    "scope": "typescript"
  },
  "ngrx-data-entity-metadata": {
    "prefix": [
      "angular ng rx data entity metadata",
      "a-ngrx-data-entity-metadata"
    ],
    "description": "NgRx Data Entity Metadata",
    "body": [
      "import { EntityMetadataMap } from '@ngrx/data';",
      "",
      "const entityMetadata: EntityMetadataMap = {",
      "  ${1:Model1}: {},${0}",
      "};",
      "",
      "export const entityConfig = {",
      "  entityMetadata",
      "};"
    ],
    "scope": "typescript"
  },
  "ngrx-data-entity-collection-data-service": {
    "prefix": [
      "angular ng rx data entity collection service",
      "a-ngrx-data-entity-collection-data-service"
    ],
    "description": "NgRx Data Entity Collection Data Service",
    "body": [
      "import { Injectable } from '@angular/core';",
      "import {",
      "  EntityCollectionServiceBase,",
      "  EntityCollectionServiceElementsFactory",
      "} from '@ngrx/data';",
      "import { ${1:Model} } from '${2:../core}';",
      "",
      "@Injectable({ providedIn: ${3:'root'} })",
      "export class ${1:Model}Service extends EntityCollectionServiceBase<${1:Model}> {",
      "  constructor(serviceElementsFactory: EntityCollectionServiceElementsFactory) {",
      "    super('${1:Model}', serviceElementsFactory);",
      "  }",
      "}"
    ],
    "scope": "typescript"
  },
  "trackby-function": {
    "prefix": ["angular track by function", "a-trackby"],
    "description": "TrackBy Function",
    "body": [
      "${1:trackBy}(index: number, ${2:name}: ${3:model}): ${4:number} {",
      "  return ${2:name}${5:.id};$0",
      "}"
    ],
    "scope": "typescript"
  },
  "next-get-server-side-props": {
    "prefix": ["next getserversideprops"],
    "body": [
      "export async function getServerSideProps(${1:context}) {",
      "  return {",
      "    props: {}, ",
      "  }",
      "}"
    ],
    "description": "If you export an async function called getServerSideProps from a page, Next.js will pre-render this page on each request using the data returned by getServerSideProps. The context parameter is an object containing the following keys: params, req, res, query, preview, previewData.",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "next-get-static-props": {
    "prefix": ["next getstaticprops"],
    "body": [
      "export async function getStaticProps(${1:context}) {",
      "  return {",
      "    props: {}, ",
      "  }",
      "}"
    ],
    "description": "If you export an async function called getStaticProps from a page, Next.js will pre-render this page at build time using the props returned by getStaticProps. The context parameter is an object containing the following keys: params, preview, previewData.",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "next-get-static-paths": {
    "prefix": ["next getstaticpaths"],
    "body": [
      "export async function getStaticPaths() {",
      "  return {",
      "    paths: [",
      "      { params: { ... } } ",
      "    ],",
      "    fallback: ${1|true,false|}",
      "  };",
      "}"
    ],
    "description": "If a page has dynamic routes (documentation) and uses getStaticProps it needs to define a list of paths that have to be rendered to HTML at build time. If you export an async function called getStaticPaths from a page that uses dynamic routes, Next.js will statically pre-render all the paths specified by getStaticPaths.",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "next-import-use-router": {
    "prefix": ["next import userouter"],
    "body": ["import { useRouter } from 'next/router'"],
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "next-import-link": {
    "prefix": ["next import link"],
    "body": ["import Link from 'next/link'"],
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "next-link": {
    "prefix": ["next link"],
    "body": ["<Link href=\"${1:#}\">", "  <a>${2:content}</a>", "</Link>"],
    "description": "Link accepts the following props: href, as, passHref, prefetch, replace, scroll, shallow",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "next-link-url-object": {
    "prefix": ["next link url object"],
    "body": [
      "<Link href={{ pathname: '${1:/path}', query: { ${2:paramName}: '${3:paramValue}' } }}>",
      "  <a>${4:content}</a>",
      "</Link>"
    ],
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "next-link-dynamic-route": {
    "prefix": ["next link dynamic route"],
    "body": [
      "<Link href=\"${1:/path/[id]}\" as=\"${2:/path/${id}}\">",
      "  <a>${3:content}</a>",
      "</Link>"
    ],
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "next-import-head": {
    "prefix": ["next import head"],
    "body": ["import Head from 'next/head'"],
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "next-head": {
    "prefix": ["next head"],
    "body": ["<Head>", "${1:content}", "</Head>"],
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "next-api": {
    "prefix": ["next api"],
    "scope": "javascript,javascriptreact,typescript,typescriptreact",
    "body": [
      "export default (req, res) => {",
      "  res.json(${1:object});",
      "};"
    ],
    "description": "API routes provide built in middlewares which parse the incoming request. Those middlewares are: req.cookies, req.body, req.query."
  },
  "next-api-method": {
    "prefix": ["next api method"],
    "scope": "javascript,javascriptreact,typescript,typescriptreact",
    "body": [
      "export default (req, res) => {",
      "  if (req.method === 'POST') {",
      "    $1",
      "  } else {",
      "    $2",
      "  }",
      "};"
    ]
  },
  "axios-require": {
    "prefix": ["axios require"],
    "body": ["const axios = require('axios').default;"],
    "scope": "javascript,javascriptreact,typescript,typescriptreact",
    "description": "require axios"
  },
  "axios-import": {
    "prefix": ["axios import"],
    "body": ["import axios from 'axios';"],
    "scope": "javascript,javascriptreact,typescript,typescriptreact",
    "description": "import axios"
  },
  "axios-get-promise": {
    "prefix": ["axios get promise"],
    "body": [
      "axios.get('${1:uri}')",
      ".then(function (response) {",
      "\t${2:success}",
      "})",
      ".catch(function (error) {",
      "\t${3:error}",
      "})"
    ],
    "scope": "javascript,javascriptreact,typescript,typescriptreact",
    "description": "Use Axios to make a get request - promise based"
  },
  "axios-get-async-await": {
    "prefix": ["axios get async await"],
    "body": [
      "async function ${1:name}() {",
      "\ttry {",
      "\t\tconst response = await axios.get('${2:uri}');",
      "\t\t${3:success}",
      "\t}\tcatch (error) {",
      "\t\t${4:error}",
      "\t}",
      "}"
    ],
    "scope": "javascript,javascriptreact,typescript,typescriptreact",
    "description": "Use Axios to make a get request - async-await"
  },
  "axios-post-promise": {
    "prefix": ["axios post promise"],
    "body": [
      "axios.post('${1:uri}', ${2:post})",
      ".then(function (response) {",
      "\t${3:success}",
      "})",
      ".catch(function (error) {",
      "\t${4:error}",
      "})"
    ],
    "scope": "javascript,javascriptreact,typescript,typescriptreact",
    "description": "Use Axios to make a post request - promise based"
  },
  "axios-post-async-await": {
    "prefix": ["axios post async await"],
    "body": [
      "async function ${1:name}() {",
      "\ttry {",
      "\t\tconst response = await axios.post('${2:uri}', ${3:post});",
      "\t\t${4:success}",
      "\t}\tcatch (error) {",
      "\t\t${5:error}",
      "\t}",
      "}"
    ],
    "scope": "javascript,javascriptreact,typescript,typescriptreact",
    "description": "Use Axios to make a post request - async-await"
  },
  "axios-instance": {
    "prefix": ["axios instance"],
    "body": [
      "const ${1:instance} = axios.create({",
      "\tbaseURL: '${2:uri}',",
      "\ttimeout: $3,",
      "\theaders: {'${4:key}': '${5:value}'}"
    ],
    "scope": "javascript,javascriptreact,typescript,typescriptreact",
    "description": "Create an Axios instance for requests"
  },
  "axios-defaults": {
    "prefix": ["axios defaults"],
    "body": ["axios.defaults.${1:key} = '${2:value}';"],
    "scope": "javascript,javascriptreact,typescript,typescriptreact",
    "description": "Define global axios defaults, eg. baseURL, headers etc."
  },
  "axios-interceptors-request": {
    "prefix": ["axios interceptors request"],
    "body": [
      "axios.interceptors.request.use(function (config) {",
      "\t${1:do something}",
      "return config;",
      "}, function (error) {",
      "\t${2:do something}",
      "$return Promise.reject(error);",
      "});"
    ],
    "scope": "javascript,javascriptreact,typescript,typescriptreact",
    "description": "You can intercept requests before they are handled by then or catch."
  },
  "axios-interceptors-response": {
    "prefix": ["axios interceptors response"],
    "body": [
      "axios.interceptors.response.use(function (response) {",
      "\t${1:do something}",
      "return response;",
      "}, function (error) {",
      "\t${2:do something}",
      "$return Promise.reject(error);",
      "});"
    ],
    "scope": "javascript,javascriptreact,typescript,typescriptreact",
    "description": "You can intercept responses before they are handled by then or catch."
  },
  "gatsby-graphql-import": {
    "prefix": ["gatsby import graphql"],
    "body": ["import { graphql } from 'gatsby';"],
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "gatsby-usestaticquery-import": {
    "prefix": ["gatsby import usestaticquery"],
    "body": ["import { useStaticQuery, graphql } from \"gatsby\""],
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "gatsby-usestatic-query": {
    "prefix": ["gatsby usestaticquery"],
    "body": [
      "const {${1:site}} = useStaticQuery(",
      "  graphql`${2:query}`",
      ");"
    ],
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "gatsby-export-query": {
    "prefix": ["gatsby export query"],
    "body": ["export const query = graphql`${1:query}`;"],
    "description": "Gatsby uses the concept of a page query, which is a query for a specific page in a site.Note that you can only have one page query per file.",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "gatsby-link": {
    "scope": "javascript,javascriptreact,typescript,typescriptreact",
    "prefix": ["gatsby link"],
    "body": ["<Link to=\"${1:/blog}\">${2:Text}</Link>"]
  },
  "gatsby-link-activestyle": {
    "scope": "javascript,javascriptreact,typescript,typescriptreact",
    "prefix": ["gatsby link activestyle"],
    "body": [
      "<Link to=\"${1:/blog}\" activeStyle={{ ${2:color}: \"${3:red}\" }} >Text</Link>"
    ]
  },
  "gatsby-link-activeclassname": {
    "scope": "javascript,javascriptreact,typescript,typescriptreact",
    "prefix": ["gatsby link activeclassname"],
    "body": [
      "<Link to=\"${1:/blog}\" activeClassName={\"${2:myActiveClassName}\"} >Text</Link>"
    ]
  },
  "gatsby-link-import": {
    "scope": "javascript,javascriptreact,typescript,typescriptreact",
    "prefix": ["gatsby link import"],
    "body": ["import { Link } from \"gatsby\""]
  },
  "graphql-request-import-request": {
    "prefix": ["graphql-request import request"],
    "body": ["import { request } from 'graphql-request';"],
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "graphql-request-require-client": {
    "prefix": ["graphql-request require client"],
    "body": ["const { GraphQLClient } = require('graphql-request');"],
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "graphql-request-require-request": {
    "prefix": ["graphql-request require request"],
    "body": ["const { request } = require('graphql-request');"],
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "graphql-request-import-client": {
    "prefix": ["graphql-request import client"],
    "body": ["import { GraphQLClient } from 'graphql-request';"],
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "graphql-request-client": {
    "prefix": ["graphql-request client"],
    "body": [
      "const ${1:client} = new GraphQLClient(",
      "  ${2:url},",
      "  {",
      "    headers: {",
      "      ${3:key}: ${4:value}",
      "    },",
      "  }",
      ");"
    ],
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "graphql-request-request": {
    "prefix": ["graphql-request request"],
    "body": [
      "const ${1:results} = await request(",
      "  ${2:url},",
      "  ${3:query}",
      ");"
    ],
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "graphql-request-request-variables": {
    "prefix": ["graphql-request request variables"],
    "body": [
      "const ${1:results} = await request(",
      "  ${2:url},",
      "  ${3:query},",
      "  ${4:variables}",
      ");"
    ],
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "graphql-request-query": {
    "prefix": ["graphql-request query"],
    "body": [
      "const ${1:queryName} = `query ${1:queryName} {",
      "  ${2:query}",
      "}",
      "`;"
    ],
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "graphql-request-client-request": {
    "prefix": ["graphql-request client request"],
    "body": [
      "const ${1:results} = await ${2:client}.request(",
      "  ${3:query}",
      ");"
    ],
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "graphql-request-client-request-variables": {
    "prefix": ["graphql-request client request variables"],
    "body": [
      "const ${1:results} = await ${2:client}.request(",
      "  ${3:query},",
      "  ${4:variables}",
      ");"
    ],
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "dotenv-require": {
    "scope": "javascript,typescript",
    "prefix": ["dotenv require"],
    "body": ["require('dotenv').config()"],
    "description": "As early as possible in your application, require and configure dotenv."
  },
  "dotenv-path": {
    "scope": "javascript,typescript",
    "prefix": ["dotenv path"],
    "body": [
      "require('dotenv').config({ path: '${1:/full/custom/path/to/your/env/vars}' })"
    ],
    "description": "You may specify a custom path if your file containing environment variables is located elsewhere."
  },
  "dotenv-encoding": {
    "scope": "javascript,typescript",
    "prefix": ["dotenv encoding"],
    "body": ["require('dotenv').config({ encoding: '${1:latin1}' })"],
    "description": "You may specify the encoding of your file containing environment variables."
  },
  "dotenv-debug": {
    "scope": "javascript,typescript",
    "prefix": ["dotenv debug"],
    "body": ["require('dotenv').config({ debug: ${1|true,false|} })"],
    "description": "You may turn on logging to help debug why certain keys or values are not being set as you expect."
  },
  "vue-template": {
    "prefix": ["vue template", "template"],
    "body": [
      "<template>",
      "\t<${1:div}$2>",
      "\t\t$0",
      "\t</${1:div}>",
      "</template>"
    ],
    "description": "template element",
    "scope": "vue"
  },
  "vue-v-text": {
    "prefix": ["vue v-text", "vtext"],
    "body": ["v-text=\"${1:msg}\""],
    "description": "Expects: string. Updates the element’s textContent.",
    "scope": "vue-html"
  },
  "vue-v-html": {
    "prefix": ["vue v-html", "vhtml"],
    "body": ["v-html=\"${1:html}\""],
    "description": "Expects: string. Updates the element’s innerHTML.",
    "scope": "vue-html"
  },
  "vue-v-show": {
    "prefix": ["vue v-show", "vshow"],
    "body": ["v-show=\"${1:condition}\""],
    "description": "Expects: any",
    "scope": "vue-html"
  },
  "vue-v-if": {
    "prefix": ["vue v-if", "vif"],
    "body": ["v-if=\"${1:condition}\""],
    "description": "Expects: any",
    "scope": "vue-html"
  },
  "vue-v-else": {
    "prefix": ["vue v-else", "velse"],
    "body": ["v-else"],
    "description": "Does not expect expression. previous sibling element must have v-if or v-else-if.",
    "scope": "vue-html"
  },
  "vue-v-else-if": {
    "prefix": ["vue v-else-if", "velseif"],
    "body": ["v-else-if=\"${1:condition}\""],
    "description": "Expects: any. previous sibling element must have v-if or v-else-if.",
    "scope": "vue-html"
  },
  "vue-v-for-without-key": {
    "prefix": ["vue v-for-without-key", "vforwithoutkey"],
    "body": ["v-for=\"${1:item} in ${2:items}\""],
    "description": "Expects: Array | Object | number | string",
    "scope": "vue-html"
  },
  "vue-v-for": {
    "prefix": ["vue v-for", "vfor"],
    "body": [
      "v-for=\"(${1:item}, ${2:index}) in ${3:items}\" :key=\"${4:index}\""
    ],
    "description": "Expects: Array | Object | number | string",
    "scope": "vue-html"
  },
  "vue-v-on": {
    "prefix": ["vue v-on", "von"],
    "body": ["v-on:${1:event}=\"${2:handle}\""],
    "description": "Expects: Function | Inline Statement",
    "scope": "vue-html"
  },
  "vue-v-bind": {
    "prefix": ["vue v-bind", "vbind"],
    "body": ["v-bind$1=\"${2}\""],
    "description": "Expects: any (with argument) | Object (without argument)",
    "scope": "vue-html"
  },
  "vue-v-model": {
    "prefix": ["vue v-model", "vmodel"],
    "body": ["v-model=\"${1:something}\""],
    "description": "Expects: varies based on value of form inputs element or output of components",
    "scope": "vue-html"
  },
  "vue-v-pre": {
    "prefix": ["vue v-pre", "vpre"],
    "body": ["v-pre"],
    "description": "Does not expect expression",
    "scope": "vue-html"
  },
  "vue-v-cloak": {
    "prefix": ["vue v-cloak", "vcloak"],
    "body": ["v-cloak"],
    "description": "Does not expect expression",
    "scope": "vue-html"
  },
  "vue-v-once": {
    "prefix": ["vue v-once", "vonce"],
    "body": ["v-once"],
    "description": "Does not expect expression",
    "scope": "vue-html"
  },
  "vue-key": {
    "prefix": ["vue key", "key"],
    "body": [":key=\"${1:key}\""],
    "description": "Expects: string. Children of the same common parent must have unique keys. Duplicate keys will cause render errors.",
    "scope": "vue-html"
  },
  "vue-ref": {
    "prefix": ["vue ref", "ref"],
    "body": ["ref=\"${1:reference}\"$0"],
    "description": "Expects: string. ref is used to register a reference to an element or a child component. The reference will be registered under the parent component’s $refs object. If used on a plain DOM element, the reference will be that element; if used on a child component, the reference will be component instance.",
    "scope": "vue-html"
  },
  "vue-slota": {
    "prefix": ["vue slota", "slota"],
    "body": ["slot=\"$1\"$0"],
    "description": "slot=''. Expects: string. Used on content inserted into child components to indicate which named slot the content belongs to.",
    "scope": "vue-html"
  },
  "vue-slote": {
    "prefix": ["vue slote", "slote"],
    "body": ["<slot$1>$2</slot>$0"],
    "description": "<slot></slot>. Expects: string. Used on content inserted into child components to indicate which named slot the content belongs to.",
    "scope": "vue-html"
  },
  "vue-slotscope": {
    "prefix": ["vue slotscope", "slotscope"],
    "body": ["slot-scope=\"$1\"$0"],
    "description": "Used to denote an element or component as a scoped slot. The attribute’s value should be a valid JavaScript expression that can appear in the argument position of a function signature. This means in supported environments you can also use ES2015 destructuring in the expression. Serves as a replacement for scope in 2.5.0+.",
    "scope": "vue-html"
  },
  "vue-scope": {
    "prefix": ["vue scope", "scope"],
    "body": ["scope=\"${1:this api replaced by slot-scope in 2.5.0+}\"$0"],
    "description": "Used to denote a <template> element as a scoped slot, which is replaced by `slot-scope` in 2.5.0+.",
    "scope": "vue-html"
  },
  "vue-component": {
    "prefix": ["vue component", "component"],
    "body": ["<component :is=\"${1:componentId}\"></component>$0"],
    "description": "component element",
    "scope": "vue-html"
  },
  "vue-keep-alive": {
    "prefix": ["vue keep-alive", "keepalive"],
    "body": ["<keep-alive$1>", "$2", "</keep-alive>$0"],
    "description": "keep-alive element",
    "scope": "vue-html"
  },
  "vue-transition": {
    "prefix": ["vue transition", "transition"],
    "body": ["<transition$1>", "$2", "</transition>$0"],
    "description": "transition element",
    "scope": "vue-html"
  },
  "vue-transition-group": {
    "prefix": ["vue transition-group", "transitiongroup"],
    "body": ["<transition-group$1>", "$2", "</transition-group>"],
    "description": "transition-group element",
    "scope": "vue-html"
  },
  "vue-enter-class": {
    "prefix": ["vue enter-class", "enterclass"],
    "body": ["enter-class=\"$1\"$0"],
    "description": "enter-class=''. Expects: string.",
    "scope": "vue-html"
  },
  "vue-leave-class": {
    "prefix": ["vue leave-class", "leaveclass"],
    "body": ["leave-class=\"$1\"$0"],
    "description": "leave-class=''. Expects: string.",
    "scope": "vue-html"
  },
  "vue-appear-class": {
    "prefix": ["vue appear-class", "appearclass"],
    "body": ["appear-class=\"$1\"$0"],
    "description": "appear-class=''. Expects: string.",
    "scope": "vue-html"
  },
  "vue-enter-to-class": {
    "prefix": ["vue enter-to-class", "entertoclass"],
    "body": ["enter-to-class=\"$1\"$0"],
    "description": "enter-to-class=''. Expects: string.",
    "scope": "vue-html"
  },
  "vue-leave-to-class": {
    "prefix": ["vue leave-to-class", "leavetoclass"],
    "body": ["leave-to-class=\"$1\"$0"],
    "description": "leave-to-class=''. Expects: string.",
    "scope": "vue-html"
  },
  "vue-appear-to-class": {
    "prefix": ["vue appear-to-class", "appeartoclass"],
    "body": ["appear-to-class=\"$1\"$0"],
    "description": "appear-to-class=''. Expects: string.",
    "scope": "vue-html"
  },
  "vue-enter-active-class": {
    "prefix": ["vue enter-active-class", "enteractiveclass"],
    "body": ["enter-active-class=\"$1\"$0"],
    "description": "enter-active-class=''. Expects: string.",
    "scope": "vue-html"
  },
  "vue-leave-active-class": {
    "prefix": ["vue leave-active-class", "leaveactiveclass"],
    "body": ["leave-active-class=\"$1\"$0"],
    "description": "leave-active-class=''. Expects: string.",
    "scope": "vue-html"
  },
  "vue-appear-active-class": {
    "prefix": ["vue appear-active-class", "appearactiveclass"],
    "body": ["appear-active-class=\"$1\"$0"],
    "description": "appear-active-class=''. Expects: string.",
    "scope": "vue-html"
  },
  "vue-before-enter": {
    "prefix": ["vue before-enter", "beforeenterevent"],
    "body": ["@before-enter=\"$1\"$0"],
    "description": "@before-enter=''",
    "scope": "vue-html"
  },
  "vue-before-leave": {
    "prefix": ["vue before-leave", "beforeleaveevent"],
    "body": ["@before-leave=\"$1\"$0"],
    "description": "@before-leave=''",
    "scope": "vue-html"
  },
  "vue-before-appear": {
    "prefix": ["vue before-appear", "beforeappearevent"],
    "body": ["@before-appear=\"$1\"$0"],
    "description": "@before-appear=''",
    "scope": "vue-html"
  },
  "vue-enter": {
    "prefix": ["vue enter", "enterevent"],
    "body": ["@enter=\"$1\"$0"],
    "description": "@enter=''",
    "scope": "vue-html"
  },
  "vue-leave": {
    "prefix": ["vue leave", "leaveevent"],
    "body": ["@leave=\"$1\"$0"],
    "description": "@leave=''",
    "scope": "vue-html"
  },
  "vue-appear": {
    "prefix": ["vue appear", "appearevent"],
    "body": ["@appear=\"$1\"$0"],
    "description": "@appear=''",
    "scope": "vue-html"
  },
  "vue-after-enter": {
    "prefix": ["vue after-enter", "afterenterevent"],
    "body": ["@after-enter=\"$1\"$0"],
    "description": "@after-enter=''",
    "scope": "vue-html"
  },
  "vue-after-leave": {
    "prefix": ["vue after-leave", "afterleaveevent"],
    "body": ["@after-leave=\"$1\"$0"],
    "description": "@after-leave=''",
    "scope": "vue-html"
  },
  "vue-after-appear": {
    "prefix": ["vue after-appear", "afterappearevent"],
    "body": ["@after-appear=\"$1\"$0"],
    "description": "@after-appear=''",
    "scope": "vue-html"
  },
  "vue-enter-cancelled": {
    "prefix": ["vue enter-cancelled", "entercancelledevent"],
    "body": ["@enter-cancelled=\"$1\"$0"],
    "description": "@enter-cancelled=''",
    "scope": "vue-html"
  },
  "vue-leave-cancelled": {
    "prefix": ["vue leave-cancelled", "leavecancelledevent"],
    "body": ["@leave-cancelled=\"$1\"$0"],
    "description": "@leave-cancelled='' (v-show only)",
    "scope": "vue-html"
  },
  "vue-appear-cancelled": {
    "prefix": ["vue appear-cancelled", "appearcancelledevent"],
    "body": ["@appear-cancelled=\"$1\"$0"],
    "description": "@appear-cancelled=''",
    "scope": "vue-html"
  },
  "vue-routerlink": {
    "prefix": ["vue routerlink", "routerlink"],
    "body": ["<router-link $1>$2</router-link>$0"],
    "description": "router-link element",
    "scope": "vue-html"
  },
  "vue-routerlinkto": {
    "prefix": ["vue routerlinkto", "routerlinkto"],
    "body": ["<router-link to=\"$1\">$2</router-link>$0"],
    "description": "<router-link to=''></router-link>. router-link element",
    "scope": "vue-html"
  },
  "vue-to": {
    "prefix": ["vue to", "to"],
    "body": ["to=\"$1\"$0"],
    "description": "to=''",
    "scope": "vue-html"
  },
  "vue-tag": {
    "prefix": ["vue tag", "tag"],
    "body": ["tag=\"$1\"$0"],
    "description": "tag=''",
    "scope": "vue-html"
  },
  "vue-routerview": {
    "prefix": ["vue routerview", "routerview"],
    "body": ["<router-view>$1</router-view>$0"],
    "description": "router-view element",
    "scope": "vue-html"
  },
  "vue-data": {
    "prefix": ["vue data", "vdata"],
    "body": ["data() {", "\treturn {", "\t\t${1:key}: ${2:value}", "\t}", "},"],
    "description": "Vue Component Data",
    "scope": "vue"
  },
  "vue-methods": {
    "prefix": ["vue methods", "vmethod"],
    "body": ["methods: {", "\t${1:name}() {", "\t\t${0}", "\t}", "},"],
    "description": "vue method",
    "scope": "javascript"
  },
  "vue-computed": {
    "prefix": ["vue computed", "vcomputed"],
    "body": [
      "computed: {",
      "\t${1:name}() {",
      "\t\treturn this.${2:data} ${0}",
      "\t}",
      "},"
    ],
    "description": "computed value",
    "scope": "javascript"
  },
  "vue-lifecycle-beforecreate": {
    "prefix": ["vue lifecycle beforecreate", "vbeforecreate"],
    "body": ["beforeCreate () {", "\t${0};", "},"],
    "description": "beforeCreate lifecycle method",
    "scope": "javascript"
  },
  "vue-lifecycle-created": {
    "prefix": ["vue lifecycle created", "vcreated"],
    "body": ["created () {", "\t${0};", "},"],
    "description": "created lifecycle method",
    "scope": "javascript"
  },
  "vue-lifecycle-beforemount": {
    "prefix": ["vue lifecycle beforemount", "vbeforemount"],
    "body": ["beforeMount () {", "\t${0};", "},"],
    "description": "beforeMount lifecycle method",
    "scope": "javascript"
  },
  "vue-lifecycle-mounted": {
    "prefix": ["vue lifecycle mounted", "vmounted"],
    "body": ["mounted () {", "\t${0};", "},"],
    "description": "mounted lifecycle method",
    "scope": "javascript"
  },
  "vue-lifecycle-beforeupdate": {
    "prefix": ["vue lifecycle beforeupdate", "vbeforeupdate"],
    "body": ["beforeUpdate () {", "\t${0};", "},"],
    "description": "beforeUpdate lifecycle method",
    "scope": "javascript"
  },
  "vue-lifecycle-updated": {
    "prefix": ["vue lifecycle updated", "vupdated"],
    "body": ["updated () {", "\t${0};", "},"],
    "description": "updated lifecycle method",
    "scope": "javascript"
  },
  "vue-lifecycle-beforedestroy": {
    "prefix": ["vue lifecycle beforedestroy", "vbeforedestroy"],
    "body": ["beforeDestroy () {", "\t${0};", "},"],
    "description": "beforeDestroy lifecycle method",
    "scope": "javascript"
  },
  "vue-lifecycle-destroyed": {
    "prefix": ["vue lifecycle destroyed", "vdestroyed"],
    "body": ["destroyed () {", "\t${0};", "},"],
    "description": "destroyed lifecycle method",
    "scope": "javascript"
  },
  "vue-watchers": {
    "prefix": ["vue watchers", "vwatcher"],
    "body": [
      "watch: {",
      "\t${1:data}(${2:newValue}, ${3:oldValue}) {",
      "\t\t${0}",
      "\t}",
      "},"
    ],
    "description": "vue watcher",
    "scope": "javascript"
  },
  "vue-watchers-with-options": {
    "prefix": ["vue watchers with options", "vwatcher-options"],
    "body": [
      "watch: {",
      "\t${1:data}: {",
      "\t\timmediate: ${2:true},",
      "\t\tdeep: ${3:true},",
      "\t\thandler(${4:newValue}, ${5:oldValue}) {",
      "\t\t\t${0}",
      "\t\t}",
      "\t}",
      "},"
    ],
    "description": "vue watcher with options",
    "scope": "javascript"
  },
  "vue-props-with-default": {
    "prefix": ["vue props with default", "vprops"],
    "body": [
      "props: {",
      "\t${1:propName}: {",
      "\t\ttype: ${2:Number},",
      "\t\tdefault: ${0}",
      "\t},",
      "},"
    ],
    "description": "Vue Props with Default",
    "scope": "javascript"
  },
  "vue-import-file": {
    "prefix": ["vue import file", "vimport"],
    "body": ["import ${1:New} from '@/components/${1:New}.vue';"],
    "description": "Import one component into another",
    "scope": "javascript"
  },
  "vue-import-into-the-component": {
    "prefix": ["vue import into the component", "vcomponents"],
    "body": ["components: {", "\t${1:New},", "},"],
    "description": "Import one component into another, within export statement",
    "scope": "javascript"
  },
  "vue-import-export": {
    "prefix": ["vue import export", "vimport-export"],
    "body": [
      "import ${1:Name} from '@/components/${1:Name}.vue'",
      "",
      "export default {",
      "\tcomponents: {",
      "\t\t${1:Name}",
      "\t},",
      "}"
    ],
    "description": "import a component and include it in export default",
    "scope": "javascript"
  },
  "vue-mapstate": {
    "prefix": ["vue mapstate", "vmapstate"],
    "body": [
      "import { mapState } from 'vuex'",
      "",
      "export default {",
      "\tcomputed: {",
      "\t\t...mapState([",
      "\t\t\t${1:'nameOfState'},",
      "\t\t])",
      "\t},",
      "}"
    ],
    "description": "map getters inside a vue component",
    "scope": "javascript"
  },
  "vue-mapgetters": {
    "prefix": ["vue mapgetters", "vmapgetters"],
    "body": [
      "import { mapGetters } from 'vuex'",
      "",
      "export default {",
      "\tcomputed: {",
      "\t\t...mapGetters([",
      "\t\t\t${1:'nameOfGetter'},",
      "\t\t])",
      "\t},",
      "}"
    ],
    "description": "mapgetters inside a vue component",
    "scope": "javascript"
  },
  "vue-mapmutations": {
    "prefix": ["vue mapmutations", "vmapmutations"],
    "body": [
      "import { mapMutations } from 'vuex'",
      "",
      "export default {",
      "\tmethods: {",
      "\t\t...mapMutations([",
      "\t\t\t${1:'nameOfMutation'}, //also supports payload `this.nameOfMutation(amount)` ",
      "\t\t])",
      "\t},",
      "}"
    ],
    "description": "mapmutations inside a vue component",
    "scope": "javascript"
  },
  "vue-mapactions": {
    "prefix": ["vue mapactions", "vmapactions"],
    "body": [
      "import { mapActions } from 'vuex'",
      "",
      "export default {",
      "\tmethods: {",
      "\t\t...mapActions([",
      "\t\t\t${1:'nameOfAction'}, //also supports payload `this.nameOfAction(amount)` ",
      "\t\t])",
      "\t},",
      "}"
    ],
    "description": "mapactions inside a vue component",
    "scope": "javascript"
  },
  "vue-filter": {
    "prefix": ["vue filter", "vfilter"],
    "body": [
      "filters: {",
      "\t${1:fnName}: function(${2:value}) {",
      "\t\treturn ${2:value}${0};",
      "\t}",
      "}"
    ],
    "description": "vue filter",
    "scope": "javascript"
  },
  "vue-mixin": {
    "prefix": ["vue mixin", "vmixin"],
    "body": [
      "const ${1:mixinName} = {",
      "\tmounted() {",
      "\t\tconsole.log('hello from mixin!')",
      "\t},",
      "}"
    ],
    "description": "vue mixin",
    "scope": "javascript"
  },
  "vue-use-mixin": {
    "prefix": ["vue use mixin", "vmixin-use"],
    "body": ["mixins: [${1:mixinName}],"],
    "description": "vue use mixin",
    "scope": "javascript"
  },
  "vue-custom-directive": {
    "prefix": ["vue custom directive", "vc-direct"],
    "body": [
      "Vue.directive('${1:directiveName}', {",
      "\tbind(el, binding, vnode) {",
      "\t\tel.style.${2:arg} = binding.value.${2:arg};",
      "\t}",
      "});"
    ],
    "description": "vue custom directive",
    "scope": "javascript"
  },
  "vue-import-library": {
    "prefix": ["vue import library", "vimport-lib"],
    "body": ["import { ${1:libName} } from '${1:libName}'"],
    "description": "import a library",
    "scope": "javascript"
  },
  "vue-import-gsap": {
    "prefix": ["vue import gsap", "vimport-gsap"],
    "body": ["import { TimelineMax, ${1:Ease} } from 'gsap'"],
    "description": "component methods options that dispatch an action from vuex store.",
    "scope": "javascript"
  },
  "vue-transition-methods-with-javascript-hooks": {
    "prefix": ["vue transition methods with javascript hooks", "vanimhook-js"],
    "body": [
      "beforeEnter(el) {",
      "\tconsole.log('beforeEnter');",
      "},",
      "enter(el, done) {",
      "\tconsole.log('enter');",
      "\tdone();",
      "},",
      "beforeLeave(el) {",
      "\tconsole.log('beforeLeave');",
      "},",
      "leave(el, done) {",
      "\tconsole.log('leave');",
      "\tdone();",
      "},"
    ],
    "description": "transition component js hooks",
    "scope": "javascript"
  },
  "vue-commit-vuex-store-in-methods": {
    "prefix": ["vue commit vuex store in methods", "vcommit"],
    "body": [
      "${1:mutationName}() {",
      "\tthis.\\$store.commit('${1:mutationName}', ${2:payload})",
      "}"
    ],
    "description": "commit to vuex store in methods for mutation",
    "scope": "javascript"
  },
  "vue-dispatch-vuex-store-in-methods": {
    "prefix": ["vue dispatch vuex store in methods", "vdispatch"],
    "body": [
      "${1:actionName}() {",
      "\tthis.\\$store.dispatch('${1:actionName}', ${2:payload})",
      "}"
    ],
    "description": "dispatch to vuex store in methods for action",
    "scope": "javascript"
  },
  "vue-incrementer": {
    "prefix": ["vue incrementer", "vinc"],
    "body": ["return ${1:this.num} += ${2:1}"],
    "description": "increment",
    "scope": "javascript"
  },
  "vue-decrementer": {
    "prefix": ["vue decrementer", "vdec"],
    "body": ["return ${1:this.num} -= ${2:1}"],
    "description": "decrement",
    "scope": "javascript"
  },
  "vue-unit-test": {
    "prefix": ["vue unit test", "vtest"],
    "body": [
      "import Vue from 'vue'",
      "import ${1:HelloWorld} from './components/${1:HelloWorld}'",
      "",
      "describe('${1:HelloWorld}.vue', () => {",
      "\tit('${2:should render correct contents}', () => {",
      "\t\tconst Constructor = Vue.extend(${1:HelloWorld})",
      "\t\tconst vm = new Constructor().$mount()",
      "\t\texpect(vm.$el.querySelector('.hello h1').textContent)",
      "\t\t\t.to.equal(${3:'Welcome to Your Vue.js App'})",
      "\t})",
      "})"
    ],
    "description": "unit test component",
    "scope": "javascript"
  },
  "vue-vue-config-js-import": {
    "prefix": ["vue vue.config.js import", "vconfig"],
    "body": [
      "module.exports = {",
      "\tcss: {",
      "\t\tloaderOptions: {",
      "\t\t\t${1:sass}: {",
      "\t\t\t\tdata: `${2:@import '@/styles/_variables.scss';}`",
      "\t\t\t}",
      "\t\t}",
      "\t}",
      "}"
    ],
    "description": "vue.config.js",
    "scope": "javascript"
  },
  "vue-single-file-component": {
    "prefix": ["vue base"],
    "body": [
      "<template>",
      "\t<div>",
      "",
      "\t</div>",
      "</template>",
      "",
      "<script>",
      "\texport default {",
      "\t\t${0}",
      "\t}",
      "</script>",
      "",
      "<style lang=\"scss\" scoped>",
      "",
      "</style>"
    ],
    "description": "Base for Vue File with SCSS",
    "scope": "vue"
  },
  "vue-single-file-component-with-postcss": {
    "prefix": ["vue base postcss"],
    "body": [
      "<template>",
      "\t<div>",
      "",
      "\t</div>",
      "</template>",
      "",
      "<script>",
      "\texport default {",
      "\t\t${0}",
      "\t}",
      "</script>",
      "",
      "<style lang=\"postcss\" scoped>",
      "",
      "</style>"
    ],
    "description": "Base for Vue File with PostCSS",
    "scope": "vue"
  },
  "vue-single-file-component-with-css": {
    "prefix": ["vue base css"],
    "body": [
      "<template>",
      "\t<div>",
      "",
      "\t</div>",
      "</template>",
      "",
      "<script>",
      "\texport default {",
      "\t\t${0}",
      "\t}",
      "</script>",
      "",
      "<style scoped>",
      "",
      "</style>"
    ],
    "description": "Base for Vue File with CSS",
    "scope": "vue"
  },
  "vue-single-file-component-with-typescript": {
    "prefix": ["vue base ts"],
    "body": [
      "<template>",
      "\t<div>",
      "",
      "\t</div>",
      "</template>",
      "",
      "<script lang=\"ts\">",
      "\timport Vue from 'vue'",
      "",
      "\texport default Vue.extend({",
      "\t\t${0}",
      "\t})",
      "</script>",
      "",
      "<style scoped>",
      "",
      "</style>"
    ],
    "description": "Base for Vue File with Typescript",
    "scope": "vue"
  },
  "vue-v3reactive": {
    "prefix": ["vue v3 reactive"],
    "body": ["const ${1:name} = reactive({", "\t${2:count}: ${3:0}", "})"],
    "description": "Set reactive property - Vue Composition API",
    "scope": "javascript"
  },
  "vue-v3computed": {
    "prefix": ["vue v3 computed"],
    "body": ["const ${1:name} = computed(() => {", "\treturn ${2}", "})"],
    "description": "Set computed property - Vue Composition API",
    "scope": "javascript"
  },
  "vue-v3watch": {
    "prefix": ["vue v3 watch"],
    "body": ["watch(() => ${1:foo}, (newValue, oldValue) => {", "\t${2}", "})"],
    "description": "Requires watching a specific data source, and applies side effects in a separate callback function.",
    "scope": "javascript"
  },
  "vue-v3watch-array": {
    "prefix": ["vue v3 watch-array"],
    "body": [
      "watch([${1:foo}, ${2:bar}], ([new${1}, new${2}], [prev${1}, prev${2}]) => {",
      "\t${3}",
      "})"
    ],
    "description": "Requires watching an array, and applies side effects in a separate callback function.",
    "scope": "javascript"
  },
  "vue-v3watcheffect": {
    "prefix": ["vue v3 watcheffect"],
    "body": ["watchEffect(() => {", "\t${1}", "})"],
    "description": "Run a function immediately while reactively tracking its dependencies, and re-run it whenever the dependencies have changed.",
    "scope": "javascript"
  },
  "vue-v3ref": {
    "prefix": ["vue v3ref"],
    "body": ["const ${1:name} = ref(${2:initialValue})"],
    "description": "Takes an inner value and returns a reactive and mutable ref object.",
    "scope": "javascript"
  },
  "vue-v3lifecyclehook-import": {
    "prefix": ["vue v3 importlifecyclehook "],
    "body": [
      "import ${1|onBeforeMount,onMounted,onBeforeUpdate,onUpdated,onBeforeUnmount,onUnmounted,,onActivated,onDeactivated,onErrorCaptured,onRenderTracked,onRenderTriggered|} from '${2|vue,@vue/composition-api|}'"
    ],
    "description": "Import Lifecycle hooks to use in file",
    "scope": "javascript"
  },
  "vue-v3lifecyclehook": {
    "prefix": ["vue v3 lifecyclehook"],
    "body": [
      "${1|onBeforeMount,onMounted,onBeforeUpdate,onUpdated,onBeforeUnmount,onUnmounted,,onActivated,onDeactivated,onErrorCaptured,onRenderTracked,onRenderTriggered|}(() => {${2}})"
    ],
    "description": "Lifecycle hooks can be registered with directly imported `onXXX` functions:",
    "scope": "javascript"
  },
  "vue-single-file-component-v3": {
    "prefix": ["vue v3 base"],
    "body": [
      "<template>",
      "\t<div>",
      "",
      "\t</div>",
      "</template>",
      "",
      "<script>",
      "import { ${0|ref,reactive,computed,readonly,watchEffect,watch|} } from '${1|vue,@vue/composition-api|}'",
      "export default {",
      "\tsetup () {",
      "\t\t${2}",
      "",
      "\t\treturn {}",
      "\t}",
      "}",
      "</script>",
      "",
      "<style lang=\"scss\" scoped>",
      "",
      "</style>"
    ],
    "description": "Base for Vue File Composition API with SCSS",
    "scope": "vue"
  },
  "vue-single-file-component-with-typescript-v3": {
    "prefix": ["vue v3 base ts"],
    "body": [
      "<template>",
      "\t<div>",
      "",
      "\t</div>",
      "</template>",
      "",
      "<script lang=\"ts\">",
      "import Vue from 'vue'",
      "",
      "export default Vue.extend({",
      "\tsetup () {",
      "\t\t${0}\n",
      "\t\treturn {}",
      "\t}",
      "})",
      "</script>",
      "",
      "<style scoped>",
      "",
      "</style>"
    ],
    "description": "Base for Vue File Composition API - Typescript",
    "scope": "vue"
  },
  "vuex-store": {
    "prefix": ["vuex store", "vstore"],
    "body": [
      "import Vue from 'vue';",
      "import Vuex from 'vuex';",
      "",
      "Vue.use(Vuex);",
      "",
      "export const store = new Vuex.Store({",
      "\tstate: {",
      "\t\t${1:key}: ${2:value}",
      "\t}",
      "});"
    ],
    "description": "Base for Vuex store",
    "scope": "vue"
  },
  "vuex-getters": {
    "prefix": ["vuex getters", "vgetter"],
    "body": [
      "getters: {",
      "\t${1:value}: state => {",
      "\t\treturn state.${1:value};",
      "\t}",
      "}"
    ],
    "description": "vuex getter",
    "scope": "vue"
  },
  "vuex-mutation": {
    "prefix": ["vuex mutation", "vmutation"],
    "body": [
      "mutations: {",
      "\t${1:updateValue}(state, ${3:payload}) {",
      "\t\tstate.${2:value} = ${3:payload};",
      "\t}",
      "}"
    ],
    "description": "vuex mutation",
    "scope": "vue"
  },
  "vuex-action": {
    "prefix": ["vuex action", "vaction"],
    "body": [
      "actions: {",
      "\t${1:updateValue}({commit}, ${2:payload}) {",
      "\t\tcommit('${1:updateValue}', ${2:payload});",
      "\t}",
      "}"
    ],
    "description": "vuex action",
    "scope": "vue"
  },
  "vuex-import-store": {
    "prefix": ["vuex import store", "vstore-import"],
    "body": ["import { store } from './store/index';"],
    "description": "import vuex store into main.js",
    "scope": "vue"
  },
  "vuex-module": {
    "prefix": ["vuex module", "vmodule"],
    "body": [
      "export default {",
      "\tstate: {",
      "\t\tvalue: 'my value'",
      "\t},",
      "\tgetters: {",
      "\t\tvalue: state => {",
      "\t\t\treturn state.value;",
      "\t\t}",
      "\t},",
      "\tmutations: {",
      "\t\tupdateValue(state, payload) {",
      "\t\t\tstate.value = payload;",
      "\t\t}",
      "\t},",
      "\tactions: {",
      "\t\tupdateValue({commit}, payload) {",
      "\t\t\tcommit('updateValue', payload);",
      "\t\t}",
      "\t}",
      "};"
    ],
    "description": "vuex module",
    "scope": "vue"
  },
  "vuex-store-2": {
    "prefix": ["vuex store 2", "vstore2"],
    "body": [
      "export const state = () => ({",
      "\tvalue: 'myvalue'",
      "})",
      "",
      "export const getters = {",
      "\tgetterValue: state => {",
      "\t\treturn state.value",
      "\t}",
      "}",
      "",
      "export const mutations = {",
      "\tupdateValue: (state, payload) => {",
      "\t\tstate.value = payload",
      "\t}",
      "}",
      "",
      "export const actions = {",
      "\tupdateActionValue({ commit }) {",
      "\t\tcommit('updateValue', payload)",
      "\t}",
      "}"
    ],
    "description": "vuex store 2",
    "scope": "vue"
  },
  "react-modal-import": {
    "prefix": ["react-modal import", "imrm"],
    "body": ["import Modal from 'react-modal'"],
    "scope": "javascript,javascriptreact,typescript,typescriptreact",
    "description": "import react-modal"
  },
  "react-modal-component": {
    "prefix": ["react-modal component", "rmc"],
    "body": [
      "import React, { useState } from 'react';",
      "import Modal from 'react-modal';",
      "",
      "const ${1:CustomModal} = () => {",
      "  const [showModal, setShowModal] = useState(false);",
      "",
      "  const handleOpenModal = () => {",
      "    setShowModal(!showModal);",
      "  };",
      "",
      "  const handleCloseModal = () => {",
      "    setShowModal(!showModal);",
      "  };",
      "",
      "  return (",
      "    <>",
      "      <button onClick={handleOpenModal}>Open modal</button>",
      "      <Modal ",
      "        open={showModal} ",
      "        ${2:shouldCloseOnOverlayClick} ",
      "        contentLabel={${3:contentLabel}} ",
      "        onAfterOpen={${4:afterOpenModal}}",
      "        onRequestClose={${5:closeModal}}",
      "        style={${5:customStyles}}>",
      "        <button onClick={handleCloseModal}>Close modal</button>",
      "        ${:content}",
      "      </Modal>",
      "    </>",
      "  );",
      "};",
      "",
      "export default ${1:CustomModal};"
    ],
    "scope": "javascript,javascriptreact,typescript,typescriptreact",
    "description": "Template for react modal"
  },
  "react-intersection-observer-use-in-view": {
    "scope": "javascript,javascriptreact,typescript,typescriptreact",
    "body": ["const [ref, inView, entry] = useInView(options)"],
    "description": "The new React Hooks make it easier than ever to monitor the inView state of your components. Call the useInView hook with the (optional) options you need. It will return an array containing a ref, the inView status and the current IntersectionObserverEntry. Assign the ref to the DOM element you want to monitor, and the hook will report the status. \n\nOptions\nroot(type: Element, default: window, required: false)\nThe Element that is used as the viewport for checking visibility of the target. Defaults to the browser viewport (window) if not specified or if null.\n\nrootMargin(type: String, default: '0px', required: false)\nMargin around the root. Can have values similar to the CSS margin property.\n\nthreshold(type: Number, default: 0, required: false)\nNumber between 0 and 1 indicating the percentage that should be visible before triggering. Can also be an array of numbers, to create multiple trigger points.\n\ntriggerOnce(type: Boolean, default: false, required: false)\nOnly trigger this method once",
    "prefix": ["react-intersection-observer useinview", "rio useinview"]
  },
  "react-intersection-observer-import": {
    "scope": "javascript,javascriptreact,typescript,typescriptreact",
    "body": ["import { useInView } from 'react-intersection-observer';"],
    "prefix": ["react-intersection-observer import", "rio import"]
  },
  "react-helmet-import": {
    "prefix": ["react-helmet import"],
    "body": ["import { Helmet } from 'react-helmet';"],
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "react-helmet-title": {
    "prefix": ["react-helmet title"],
    "body": ["<Helmet>", "  <title>${1:title}</title>", "</Helmet>"],
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "react-helmet-component": {
    "prefix": ["react-helmet component"],
    "body": ["<Helmet>", "${1:example}", "</Helmet>"],
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "svelte-component-format": {
    "prefix": ["svelte component template", "svcomponent"],
    "body": [
      "<script>",
      "\t${1:// your script goes here}",
      "</script>",
      "",
      "<style>",
      "\t${2:/* your styles go here */}",
      "</style>",
      "",
      "${3:<!-- markup (zero or more items) goes here -->}"
    ],
    "scope": "svelte"
  },
  "svelte-script-tag": {
    "prefix": ["svelte script", "svscript"],
    "body": ["<script>", "\t${1:// your script goes here}", "</script>"],
    "scope": "svelte"
  },
  "svelte-script-context": {
    "prefix": ["svelte script context", "svscriptc"],
    "body": [
      "<script context=\"module\">",
      "\t${1:// your script goes here}",
      "</script>"
    ],
    "scope": "svelte",
    "description": "add a script with context=\"module\" to your svelte file"
  },
  "svelte-style-tag": {
    "prefix": ["svelte style", "svstyle"],
    "body": ["<style>", "\t${1:/* your styles go here */}", "</style>"],
    "scope": "svelte",
    "description": "add styles to your svelte file"
  },
  "svelte-expression": {
    "prefix": ["svelte expression", "svexp"],
    "body": ["{${1:expression}}"],
    "scope": "svelte"
  },
  "svelte-expression-html": {
    "prefix": ["svelte expression html", "svexphtml"],
    "body": ["{@html ${1:expression}}"],
    "scope": "svelte"
  },
  "svelte-expression-debug": {
    "prefix": ["svelte expression debug", "svexpdebug"],
    "body": ["{@debug ${1:var1}${2:,var2}}"],
    "scope": "svelte"
  },
  "svelte-if-block": {
    "prefix": ["svelte if-block", "svif"],
    "body": ["{#if ${1:condition}}", "\t${2: <!-- content here -->}", "{/if}"],
    "scope": "svelte",
    "description": "if block"
  },
  "svelte-if-else-block": {
    "prefix": ["svelte if else", "svif-else"],
    "body": [
      "{#if ${1:condition}}",
      "\t${2: <!-- content here -->}",
      "{:else}",
      "\t${3: <!-- else content here -->}",
      "{/if}"
    ],
    "scope": "svelte"
  },
  "svelte-else-block": {
    "prefix": ["svelte else", "svelse"],
    "body": ["{:else}", "\t${1: <!-- else content here -->}"],
    "scope": "svelte"
  },
  "svelte-if-else-if-block": {
    "prefix": ["svelte if else if", "svif-else-if"],
    "body": [
      "{#if ${1:condition}}",
      "\t${2: <!-- content here -->}",
      "{:else if ${3: otherCondition}}",
      "\t${4: <!-- else if content here -->}",
      "{:else}",
      "\t${5: <!-- else content here -->}",
      "{/if}"
    ],
    "scope": "svelte"
  },
  "svelte-else-if-block": {
    "prefix": ["svelte else if", "svelse-if"],
    "body": [
      "{:else if ${1: otherCondition}}",
      "\t${2: <!-- else if content here -->}"
    ],
    "scope": "svelte"
  },
  "svelte-each-block": {
    "prefix": ["svelte each", "sveach"],
    "body": [
      "{#each ${1:items} as ${2:item}}",
      "\t${3: <!-- content here -->}",
      "{/each}"
    ],
    "scope": "svelte",
    "description": "each block"
  },
  "svelte-each-else-block": {
    "prefix": ["svelte each else", "sveach-else"],
    "body": [
      "{#each ${1:items} as ${2:item}}",
      "\t${3: <!-- content here -->}",
      "{:else}",
      "\t${4: <!-- empty list -->}",
      "{/each}"
    ],
    "scope": "svelte"
  },
  "svelte-each-index-block": {
    "prefix": ["svelte each index", "sveach-index"],
    "body": [
      "{#each ${1:items} as ${2:item}, ${3:i}}",
      "\t${4: <!-- content here -->}",
      "{/each}"
    ],
    "scope": "svelte"
  },
  "svelte-each-key-block": {
    "prefix": ["svelte each key", "sveach-key"],
    "body": [
      "{#each ${1:items} as ${2:item}, (${3:key})}",
      "\t${4: <!-- content here -->}",
      "{/each}"
    ],
    "scope": "svelte"
  },
  "svelte-each-index-key-block": {
    "prefix": ["svelte each index key", "sveach-i-k"],
    "body": [
      "{#each ${1:items} as ${2:item}, i (${3:key})}",
      "\t${4: <!-- content here -->}",
      "{/each}"
    ],
    "scope": "svelte"
  },
  "svelte-await-then-block": {
    "prefix": ["svelte await then", "svawait"],
    "body": [
      "{#await ${1:promise}}",
      "\t${2: <!-- content when promise is pending -->}",
      "{:then ${3:value}}",
      "\t${4: <!-- content when promise was fulfilled -->}",
      "{/await}"
    ],
    "scope": "svelte"
  },
  "svelte-then-block": {
    "prefix": ["svelte then", "svthen"],
    "body": [
      "{:then ${1:value}}",
      "\t${2: <!-- content when promise was fulfilled -->}"
    ],
    "scope": "svelte"
  },
  "svelte-await-short-block": {
    "prefix": ["svelte await short", "svawait-short"],
    "body": [
      "{#await ${1:promise} then ${2:value}}",
      "\t${3: <!-- content when promise was fulfilled -->}",
      "{/await}"
    ],
    "scope": "svelte"
  },
  "svelte-await-catch-block": {
    "prefix": ["svelte await catch", "svawait-catch"],
    "body": [
      "{#await ${1:promise}}",
      "\t${2: <!-- content when promise is pending -->}",
      "{:then ${3:value}}",
      "\t${4: <!-- content when promise was fulfilled -->}",
      "{:catch error}",
      "\t${5: <!-- content when promise was rejected -->}",
      "{/await}"
    ],
    "scope": "svelte"
  },
  "svelte-catch-block": {
    "prefix": ["svelte catch", "svcatch"],
    "body": ["{:catch error}", "\t<!-- promise was rejected -->"],
    "scope": "svelte"
  },
  "svelte-on-event": {
    "prefix": ["svelte on event", "svon"],
    "body": ["on:${1:eventname}={${2:handler}}"],
    "scope": "svelte",
    "description": "on event"
  },
  "svelte-on-event-forward": {
    "prefix": ["svelte on event foward", "svon-foward"],
    "body": ["on:${1:eventname}"],
    "scope": "svelte"
  },
  "svelte-on-event-modifiers": {
    "prefix": ["svelte on event modifiers", "svon-modifiers"],
    "body": [
      "on:${1:eventname}|${2|preventDefault,stopPropagation,passive,capture,once|}={${3:handler}}"
    ],
    "scope": "svelte"
  },
  "svelte-on-event-inline": {
    "prefix": ["svelte on event inline", "svon-inline"],
    "body": ["on:${1:click}=\"{() => ${2:count += 1}}\""],
    "scope": "svelte"
  },
  "svelte-modifiers": {
    "prefix": ["svelte modifier", "svmodifier"],
    "body": ["|${1|preventDefault,stopPropagation,passive,capture,once|}"],
    "scope": "svelte"
  },
  "svelte-bind": {
    "prefix": ["svelte bind", "svbind-simple"],
    "body": ["bind:${1:property}"],
    "scope": "svelte"
  },
  "svelte-bind-property": {
    "prefix": ["svelte bind property", "svbind-property"],
    "body": ["bind:${1:property}={${2:variable}}"],
    "scope": "svelte"
  },
  "svelte-bind-video": {
    "prefix": ["svelte bind video", "svbind-video"],
    "body": [
      "<video",
      "src={${1:clip}}",
      "bind:${2:duration}",
      "bind:${3:buffered}",
      "bind:${4:seekable}",
      "bind:${5:played}",
      "bind:${6:currentTime}",
      "bind:${7:paused}",
      "bind:${8:volume}",
      "></video>"
    ],
    "scope": "svelte"
  },
  "svelte-bind-block-level": {
    "prefix": ["svelte bind level", "svbind-level"],
    "body": [
      "bind:${1|clientWidth,clientHeight,offsetWidth,offsetHeight|}={${2:variable}}"
    ],
    "scope": "svelte"
  },
  "svelte-bind-group": {
    "prefix": ["svelte bind group", "svbind-group"],
    "body": ["bind:group={${1:variable}}"],
    "scope": "svelte"
  },
  "svelte-bind-this": {
    "prefix": ["svelte bind this", "svbind-this"],
    "body": ["bind:this={${1:dom_node}}"],
    "scope": "svelte"
  },
  "svelte-class": {
    "prefix": ["svelte class", "svcl"],
    "body": ["class:${1:name}={${2:condition}}"],
    "scope": "svelte"
  },
  "svelte-class-short": {
    "prefix": ["svelte class short", "svcls"],
    "body": ["class:${1:name}}"],
    "scope": "svelte"
  },
  "svelte-use": {
    "prefix": ["svelte use", "svu"],
    "body": ["use:action"],
    "scope": "svelte"
  },
  "svelte-use-parameters": {
    "prefix": ["svelte use parameters", "svupar"],
    "body": ["use:action={${1:parameters}}"],
    "scope": "svelte"
  },
  "svelte-transition": {
    "prefix": ["svelte transition", "svt"],
    "body": ["${1|transition,in,out|}:${2:name}"],
    "scope": "svelte"
  },
  "svelte-transition-params": {
    "prefix": ["svelte transition params", "svtp"],
    "body": ["${1|transition,in,out|}:${2:name}={${3:params}}"],
    "scope": "svelte"
  },
  "svelte-transition-events": {
    "prefix": ["svelte transition events", "svte"],
    "body": [
      "on:${1|introstart,introend,outrostart,outroend|}=\"{() => status = '${1|introstart,introend,outrostart,outroend|}'}\""
    ],
    "scope": "svelte"
  },
  "svelte-transition-local": {
    "prefix": ["svelte transition local", "svtl"],
    "body": ["${1|transition,in,out|}:${2:name}|${3:local}"],
    "scope": "svelte"
  },
  "svelte-transition-all": {
    "prefix": ["svelte transition all", "svta"],
    "body": ["${1|transition,in,out|}:${2:name}|${3:local}={${4:params}}"],
    "scope": "svelte"
  },
  "svelte-animate": {
    "prefix": ["svelte animate", "sva"],
    "body": ["animate:${1:name}={${2:params}}"],
    "scope": "svelte"
  },
  "svelte-slot": {
    "prefix": ["svelte slot", "svsl"],
    "body": ["<slot>${1:<!-- optional fallback -->}</slot>"],
    "scope": "svelte"
  },
  "svelte-slot-name": {
    "prefix": ["svelte slot name", "svsn"],
    "body": ["<slot name=\"${1:x}\">${2:<!-- optional fallback -->}</slot>"],
    "scope": "svelte"
  },
  "svelte-slot-prop": {
    "prefix": ["svelte slot prop", "svsp"],
    "body": [
      "<slot ${1:prop}={${2:value}}>${3:<!-- optional fallback -->}</slot>"
    ],
    "scope": "svelte"
  },
  "svelte-self": {
    "prefix": ["svelte self", "svse"],
    "body": ["<svelte:self />"],
    "scope": "svelte"
  },
  "svelte-self-prop": {
    "prefix": ["svelte self prop", "svsep"],
    "body": ["<svelte:self ${1:prop}={${2:value}} />"],
    "scope": "svelte"
  },
  "svelte-component": {
    "prefix": ["svelte component", "svc"],
    "body": ["<svelte:component this={${1:component}} />"],
    "scope": "svelte"
  },
  "svelte-window": {
    "prefix": ["svelte window", "svw"],
    "body": ["<svelte:window />"],
    "scope": "svelte"
  },
  "svelte-window-bind": {
    "prefix": ["svelte window bind", "svwb"],
    "body": [
      "bind:${1|innerWidth,innerHeight,outerWidth,outerHeight,scrollX,scrollY,online|}={${2:variable}}"
    ],
    "scope": "svelte"
  },
  "svelte-body": {
    "prefix": ["svelte body", "svb"],
    "body": ["<svelte:body />"],
    "scope": "svelte"
  },
  "svelte-head": {
    "prefix": ["svelte head", "svh"],
    "body": ["<svelte:head>", "\t${1:<!-- head content -->}", "</svelte:head>"],
    "scope": "svelte"
  },
  "svelte-options": {
    "prefix": ["svelte options", "svop"],
    "body": [
      "<svelte:options ${1|immutable,accessors,namespace,tag|}={${2:value}}/>"
    ],
    "scope": "svelte"
  },
  "svelte-create-component": {
    "prefix": ["svelte create component", "svcreate-component"],
    "body": [
      "const component = new ${1:App}({",
      "\ttarget: ${2|target,document.body|},",
      "\tprops: ${3:props},",
      "\tanchor: ${4:anchor},",
      "\thydrate: ${5|false,true|},",
      "\tintro: ${5|false,true|}",
      "})"
    ],
    "scope": "javascript"
  },
  "svelte-reactive-statement": {
    "prefix": ["svelte reactive statement", "svrs"],
    "body": ["$: ${1:variable} = ${2:prop}"],
    "scope": "javascript"
  },
  "svelte-reactive-block": {
    "prefix": ["svelte reactive", "svrb"],
    "body": ["$: { ${1:console.log(${2:prop});}}"],
    "scope": "javascript"
  },
  "svelte-action": {
    "prefix": ["svelte action", "svaction"],
    "body": [
      "function ${1:foo}(node) {",
      "\t// the node has been mounted in the DOM",
      "\treturn {",
      "\t\tdestroy() {",
      "\t\t\t// the node has been removed from the DOM",
      "\t\t}",
      "\t};",
      "}"
    ],
    "scope": "javascript"
  },
  "svelte-action-parameters": {
    "prefix": ["svelte action parameters", "svactionp"],
    "body": [
      "function ${1:foo}(node, ${2:parameters}) {",
      "\t// the node has been mounted in the DOM",
      "\treturn {",
      "\t\tdestroy() {",
      "\t\t\t// the node has been removed from the DOM",
      "\t\t}",
      "\t};",
      "}"
    ],
    "scope": "javascript"
  },
  "svelte-action-update": {
    "prefix": ["svelte action update", "svactionu"],
    "body": [
      "function ${1:foo}(node, ${2:parameters}) {",
      "\t// the node has been mounted in the DOM",
      "\treturn {",
      "\t\tupdate(${2:parameters}) {",
      "\t\t\t// the value of `${2:parameters}` has changed",
      "\t\t}",
      "\t\tdestroy() {",
      "\t\t\t// the node has been removed from the DOM",
      "\t\t}",
      "\t};",
      "}"
    ],
    "scope": "javascript"
  },
  "svelte-on-mount": {
    "prefix": ["svelte lifecycle mount", "svlfm"],
    "body": ["onMount(() => {", "\t${1:// content here}", "});"],
    "scope": "javascript"
  },
  "svelte-before-update": {
    "prefix": ["svelte lifecycle before update", "svlfbu"],
    "body": ["beforeUpdate(() => {", "\t${1:// content here}", "});"],
    "scope": "javascript"
  },
  "svelte-after-update": {
    "prefix": ["svelte lifecycle-after-update", "svlfap"],
    "body": ["afterUpdate(() => {", "\t${1:// content here}", "});"],
    "scope": "javascript"
  },
  "svelte-on-destroy": {
    "prefix": ["svelte lifecycle destroy", "svlfd"],
    "body": ["onDestroy(() => {", "\t${1:// content here}", "});"],
    "scope": "javascript"
  },
  "svelte-tick": {
    "prefix": ["svelte tick", "sv-tick"],
    "body": ["await tick()"],
    "scope": "javascript"
  },
  "svelte-set-context": {
    "prefix": ["svelte set content", "sv-content"],
    "body": ["setContext(${1:key}, ${2:context})"],
    "scope": "javascript"
  },
  "svelte-get-context": {
    "prefix": ["svelte get content", "svgetc"],
    "body": ["getContext(${1:key})"],
    "scope": "javascript"
  },
  "svelte-dispatch": {
    "prefix": ["svelte dispatch", "svdp"],
    "body": ["const dispatch = createEventDispatcher();"],
    "scope": "javascript"
  },
  "svelte-dispatch-event": {
    "prefix": ["svelte dispatch event", "svdpe"],
    "body": ["dispatch(${1:key},${2:data})"],
    "scope": "javascript"
  },
  "svelte-writeable": {
    "prefix": ["svelte writeable", "svw"],
    "body": ["const ${1:store} = writable(${2:initialValue});"],
    "scope": "javascript"
  },
  "svelte-writeable-set": {
    "prefix": ["svelte writeable set", "svwt"],
    "body": [
      "const ${1:store} = writable(${2:initialValue}, () => {",
      "\t${3:console.log('got a subscriber');}",
      "\treturn () => ${4:console.log('no more subscribers');}",
      "});"
    ],
    "scope": "javascript"
  },
  "svelte-readable": {
    "prefix": ["svelte readable", "svr"],
    "body": [
      "const ${1:store} = readable(${2:initialValue}, () => {",
      "\t${3:console.log('got a subscriber');}",
      "\treturn () => ${4:console.log('no more subscribers');}",
      "});"
    ],
    "scope": "javascript"
  },
  "svelte-derived": {
    "prefix": ["svelte derived", "svder"],
    "body": [
      "const ${1:derivedStore} = derived(${2:storeA}, $${2:storeA} => $${2:storeA} * 2);"
    ],
    "scope": "javascript"
  },
  "svelte-derived-multiple": {
    "prefix": ["svelte derived multiple", "svderm"],
    "body": [
      "const ${1:derivedStore} = derived([${2:storeA}, ${3:storeB}], ([$${2:storeA}, $${3:storeB}]) => $${2:storeA} + $${3:storeB});"
    ],
    "scope": "javascript"
  },
  "svelte-derived-set": {
    "prefix": ["svelte derived set", "svders"],
    "body": [
      "const ${1:derivedStore} = derived(${2:storeA}, ($${2:storeA}, set) => {",
      "\tsetTimeout(() => set($${2:storeA}), 1000);",
      "}, 'one moment...');"
    ],
    "scope": "javascript"
  },
  "svelte-derived-multiple-set": {
    "prefix": ["svelte derived multiple set", "svderms"],
    "body": [
      "const ${1:derivedStore} = derived([${2:storeA}, ${3:storeB}], ([$${2:storeA}, $${3:storeB}], set) => {",
      "\tsetTimeout(() => set($${2:storeA} + $${3:storeB}), 1000);",
      "}, 'one moment...');"
    ],
    "scope": "javascript"
  },
  "svelte-store-get": {
    "prefix": ["svelte store-get-value", "svstoregm"],
    "body": ["const ${1:value} = get(${2:store});"],
    "scope": "javascript"
  },
  "svelte-component-set": {
    "prefix": ["svelte component set", "svcoms"],
    "body": ["${1:component}.$set(${2: params});"],
    "scope": "javascript"
  },
  "svelte-component-on": {
    "prefix": ["svelte component on", "svcomon"],
    "body": ["${1:component}.$on(${2:eventname}, ${3:handler});"],
    "scope": "javascript"
  },
  "svelte-component-destroy": {
    "prefix": ["svelte component destroy", "svcomd"],
    "body": ["${1:component}.$destroy();"],
    "scope": "javascript"
  },
  "svelte-render-component": {
    "prefix": ["svelte render component", "svrcom"],
    "body": [
      "const { head, html, css } = ${1:App}.render({",
      "\tprops: ${3:props},",
      "})"
    ],
    "scope": "javascript"
  },
  "svelte-tweened": {
    "prefix": ["svelte tweened", "svtw"],
    "body": ["const ${1:store} = tweened(${2:value}, ${3:options});"],
    "scope": "javascript"
  },
  "svelte-spring": {
    "prefix": ["svelte spring", "svsp"],
    "body": ["const ${1:store} = spring(${2:value}, ${3:options});"],
    "scope": "javascript"
  },
  "svelte-register": {
    "prefix": ["svelte register", "svreg"],
    "body": [
      "require('svelte/register');",
      "const ${1:App} = require('${2:./App.svelte}').default;"
    ],
    "scope": "javascript"
  },
  "svelte-routing-import": {
    "prefix": ["svelte import routing", "svroute"],
    "body": ["import { Route, Router } from 'svelte-routing'"],
    "scope": "javascript"
  },
  "svelte-global-style": {
    "prefix": ["svelte global style", "svsglobal"],
    "body": [
      ":global(${1:body}) {",
      "\t/* this will apply to <body> */",
      "\t${2:/* your styles go here */}",
      "}"
    ],
    "scope": "css"
  },
  "var-assignment": {
    "prefix": ["base var"],
    "body": ["var ${1:name} = ${2:value};"],
    "description": "var assignment",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "let-assignment": {
    "prefix": ["base let"],
    "body": ["let ${1:name} = ${2:value};"],
    "description": "let assignment",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "destructuring-let-assignment": {
    "prefix": ["base let destruct object"],
    "body": ["let {${1:name}} = ${2:value};"],
    "description": "Object destructing",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "destructuring-let-array": {
    "prefix": ["base let destruct array"],
    "body": ["let [${1:name}] = ${2:value};"],
    "description": "Array destructing",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "const-assignment": {
    "prefix": ["base const"],
    "body": ["const ${1:name} = ${2:value};"],
    "description": "const assignment",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "destructuring-const-assignment": {
    "prefix": ["base const destruct object"],
    "body": ["const {${1:name}} = ${2:value};"],
    "description": "Object destructing",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "destructingarray": {
    "prefix": ["base const destruct array"],
    "body": ["const [${2:propertyName}] = ${1:arrayToDestruct};"],
    "description": "Array destructing",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "if-statement": {
    "prefix": ["base if"],
    "body": ["if (${1:condition}) {\n\t${0}\n}"],
    "description": "if statement",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "else-statement": {
    "prefix": ["base else"],
    "body": ["else {\n\t${0}\n}"],
    "description": "else statement",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "if-else-statement": {
    "prefix": ["base if else"],
    "body": ["if (${1:condition}) {\n\t${0}\n} else {\n\t\n}"],
    "description": "if/else statement",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "else-if-statement": {
    "prefix": ["base else if"],
    "body": ["else if (${1:condition}) {\n\t${0}\n}"],
    "description": "else if statement",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "ternary-operator": {
    "prefix": ["base ternary operator"],
    "body": ["${1:condition} ? ${2:expression} : ${3:expression};"],
    "description": "ternary operator",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "for-loop": {
    "prefix": ["base for"],
    "body": [
      "for (let ${1:i} = 0, ${2:len} = ${3:iterable}.length; ${1:i} < ${2:len}; ${1:i}++) {\n\t${0}\n}"
    ],
    "description": "for loop",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "reverse-for-loop": {
    "prefix": ["base for reverse"],
    "body": [
      "for (let ${1:i} = ${2:iterable}.length - 1; ${1:i} >= 0; ${1:i}--) {\n\t${0}\n}"
    ],
    "description": "reverse for loop",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "for-in-loop": {
    "prefix": ["base for in"],
    "body": [
      "for (let ${1:key} in ${2:array}) {\n\tif (${2:array}.hasOwnProperty(${1:key})) {\n\t\t${0}\n\t}\n}"
    ],
    "description": "for in loop",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "for-of-loop-es6-": {
    "prefix": ["base for of"],
    "body": ["for (let ${1:key} of ${2:array}) {\n\t${0}\n}"],
    "description": "for of loop (ES6)",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "while-loop": {
    "prefix": ["base while"],
    "body": ["while (${1:condition}) {\n\t${0}\n}"],
    "description": "while loop",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "try-catch": {
    "prefix": ["base try catch"],
    "body": ["try {\n\t${0}\n} catch (${1:err}) {\n\t\n}"],
    "description": "try/catch",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "try-finally": {
    "prefix": ["base try finally"],
    "body": ["try {\n\t${0}\n} finally {\n\t\n}"],
    "description": "try/finally",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "try-catch-finally": {
    "prefix": ["base try catch finally"],
    "body": ["try {\n\t${0}\n} catch (${1:err}) {\n\t\n} finally {\n\t\n}"],
    "description": "try/catch/finally",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "switch-case": {
    "prefix": ["base switch case"],
    "body": [
      "switch (${1:expr}) {\n\tcase ${2:value}:\n\t\treturn $0;\n\tdefault:\n\t\treturn;\n}"
    ],
    "description": "switch case",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "anonymous-function": {
    "prefix": ["base function anonymous"],
    "body": ["function (${1:arguments}) {\n\t${0}\n}"],
    "description": "anonymous function",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "named-function": {
    "prefix": ["base function named"],
    "body": ["function ${1:name}(${2:arguments}) {\n\t${0}\n}"],
    "description": "named function",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "immediately-invoked-function-expression-iife-": {
    "prefix": ["base function immediate"],
    "body": ["((${1:arguments}) => {\n\t${0}\n})(${2});"],
    "description": "immediately-invoked function expression (IIFE)",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "function-apply": {
    "prefix": ["base function apply"],
    "body": ["${1:fn}.apply(${2:this}, ${3:arguments})"],
    "description": "function apply",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "function-call": {
    "prefix": ["base function call"],
    "body": ["${1:fn}.call(${2:this}, ${3:arguments})"],
    "description": "function call",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "function-bind": {
    "prefix": ["base function bind"],
    "body": ["${1:fn}.bind(${2:this}, ${3:arguments})"],
    "description": "function bind",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "arrow-function-es6-": {
    "prefix": ["base function arrow"],
    "body": ["(${1:arguments}) => ${2:statement}"],
    "description": "arrow function (ES6)",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "arrow-function-with-body-es6-": {
    "prefix": ["base function arrow body"],
    "body": ["(${1:arguments}) => {\n\t${0}\n}"],
    "description": "arrow function with body (ES6)",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "generator-function-es6-": {
    "prefix": ["base function generator"],
    "body": ["function* (${1:arguments}) {\n\t${0}\n}"],
    "description": "generator function (ES6)",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "named-generator-function-es6-": {
    "prefix": ["base function generator named"],
    "body": ["function* ${1:name}(${2:arguments}) {\n\t${0}\n}"],
    "description": "named generator function (ES6)",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "sequence-of-0-n": {
    "prefix": ["base sequence of"],
    "body": ["[...Array(${1:length}).keys()]${0}"],
    "description": "sequence of 0..n",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "foreach-loop": {
    "prefix": ["base foreach"],
    "body": ["${1}.forEach((${2:item}) => {\n\t${0}\n});"],
    "description": "forEach loop",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "map": {
    "prefix": ["base map"],
    "body": ["${1}.map((${2:item}) => {\n\t${0}\n});"],
    "description": "map",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "reduce": {
    "prefix": ["base reduce"],
    "body": [
      "${1}.reduce((${2:previous}, ${3:current}) => {\n\t${0}\n}${4:, initial});"
    ],
    "description": "reduce",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "filter": {
    "prefix": ["base filter"],
    "body": ["${1}.filter(${2:item} => {\n\t${0}\n});"],
    "description": "filter",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "find": {
    "prefix": ["base find"],
    "body": ["${1}.find(${2:item} => {\n\t${0}\n});"],
    "description": "find",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "class-es6-": {
    "prefix": ["base class"],
    "body": [
      "class ${1:name} {\n\tconstructor(${2:arguments}) {\n\t\t${0}\n\t}\n}"
    ],
    "description": "class (ES6)",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "child-class-es6-": {
    "prefix": ["base child class"],
    "body": [
      "class ${1:name} extends ${2:base} {\n\tconstructor(${3:arguments}) {\n\t\tsuper(${3:arguments});\n\t\t${0}\n\t}\n}"
    ],
    "description": "child class (ES6)",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "class-constructor-es6-": {
    "prefix": ["base class constructor"],
    "body": ["constructor(${1:arguments}) {\n\tsuper(${1:arguments});${0}\n}"],
    "description": "class constructor (ES6)",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "method-es6-syntax-": {
    "prefix": ["base method"],
    "body": ["${1:method}(${2:arguments}) {\n\t${0}\n}"],
    "description": "method (ES6 syntax)",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "getter-es6-syntax-": {
    "prefix": ["base getter"],
    "body": ["get ${1:property}() {\n\t${0}\n}"],
    "description": "getter (ES6 syntax)",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "setter-es6-syntax-": {
    "prefix": ["base setter"],
    "body": ["set ${1:property}(${2:value}) {\n\t${0}\n}"],
    "description": "setter (ES6 syntax)",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "getter-and-setter-es6-syntax-": {
    "prefix": ["base getter setter"],
    "body": [
      "get ${1:property}() {\n\t${0}\n}\nset ${1:property}(${2:value}) {\n\t\n}"
    ],
    "description": "getter and setter (ES6 syntax)",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "prototype-method": {
    "prefix": ["base prototype method"],
    "body": [
      "${1:Class}.prototype.${2:method} = function(${3:arguments}) {\n\t${0}\n};"
    ],
    "description": "prototype method",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "object-assign": {
    "prefix": ["base object assign"],
    "body": ["Object.assign(${1:dest}, ${2:source})"],
    "description": "Object.assign",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "object-assign-copy-shallow-clone-": {
    "prefix": ["base object assign copy"],
    "body": ["Object.assign({}, ${1:original}, ${2:source})"],
    "description": "Object.assign copy (shallow clone)",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "return": {
    "prefix": ["base return"],
    "body": ["return ${0};"],
    "description": "return",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "return-promise-es6-": {
    "prefix": ["base return promise"],
    "body": ["return new Promise((resolve, reject) => {\n\t${0}\n});"],
    "description": "return Promise (ES6)",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "return-complex-value-such-as-jsx-components-": {
    "prefix": ["base return complex value"],
    "body": ["return (\n\t${0}\n);"],
    "description": "return complex value (such as JSX components)",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "typeof": {
    "prefix": ["base typeof"],
    "body": ["typeof ${1:source} === '${2:undefined}'"],
    "description": "typeof",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "instanceof": {
    "prefix": ["base instanceof"],
    "body": ["${1:source} instanceof ${2:Object}"],
    "description": "instanceof",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "promise-es6-": {
    "prefix": ["base promise"],
    "body": ["new Promise((resolve, reject) => {\n\t${0}\n})"],
    "description": "Promise (ES6)",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "promise-then": {
    "prefix": ["base promise then"],
    "body": ["${1:promise}.then((${2:value}) => {\n\t${0}\n})"],
    "description": "Promise.then",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "promise-catch": {
    "prefix": ["base promise catch"],
    "body": ["${1:promise}.catch((${2:err}) => {\n\t${0}\n})"],
    "description": "Promise.catch",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "exportnamedvariable": {
    "prefix": ["base export named variable"],
    "body": ["export const ${1:exportVariable} = ${2:localVariable};\n"],
    "description": "Export named variable in ES6 syntax",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "exportnamedfunction": {
    "prefix": ["base export named function"],
    "body": ["export const ${1:functionName} = (${2:params}) => {\n\t$0\n};\n"],
    "description": "Export named function in ES6 syntax",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "exportdefaultfunction": {
    "prefix": ["base export default function"],
    "body": [
      "export default function ${1:${TM_FILENAME_BASE}}(${2:params}) {\n\t$0\n};\n"
    ],
    "description": "Export default function in ES6 syntax",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "exportclass": {
    "prefix": ["base export class"],
    "body": ["export default class ${1:className} {\n\t$0\n};\n"],
    "description": "Export default class in ES6 syntax",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "exportclassextends": {
    "prefix": ["base export class extends"],
    "body": [
      "export default class ${1:className} extends ${2:baseclassName} {\n\t$0\n};\n"
    ],
    "description": "Export default class which extends a base one in ES6 syntax",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "import": {
    "prefix": ["base import"],
    "body": ["import ${2:moduleName} from '${1:module}';$0"],
    "description": "Imports entire module statement in ES6 syntax",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "importnomodulename": {
    "prefix": ["base import no module name"],
    "body": ["import '${1:module}';$0"],
    "description": "Imports entire module in ES6 syntax without module name",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "importdestructing": {
    "prefix": ["base import destructing"],
    "body": ["import { $2 } from '${1:module}';$0"],
    "description": "Imports only a portion of the module in ES6 syntax",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "importeverything": {
    "prefix": ["base import everything"],
    "body": ["import * as ${2:alias} from '${1:module}';$0"],
    "description": "Imports everything as alias from the module in ES6 syntax",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "importas": {
    "prefix": ["base import as"],
    "body": [
      "import { ${2:originalName} as ${3:alias} } from '${1:module}';$0"
    ],
    "description": "Imports a specific portion of the module by assigning a local alias in ES6 syntax",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "require": {
    "prefix": ["base require"],
    "body": ["require('${1:module}');"],
    "description": "require",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "require-local": {
    "prefix": ["base require local"],
    "body": ["require('./${1:module}');"],
    "description": "require local",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "require-assignment": {
    "prefix": ["base require assignment"],
    "body": ["const ${1:module} = require('${1:module}');"],
    "description": "require assignment",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "require-assignment-local": {
    "prefix": ["base require assignment local"],
    "body": ["const ${1:module} = require('./${1:module}');"],
    "description": "require assignment local",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "destructuring-require-assignment": {
    "prefix": ["base require assignment"],
    "body": ["const {${1:module}} = require('${1:module}');"],
    "description": "destructuring require assignment",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "destructuring-require-assignment-local": {
    "prefix": ["base require assignment local destruct"],
    "body": ["const {${1:module}} = require('./${1:module}');"],
    "description": "destructuring require assignment local",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "exports-member": {
    "prefix": ["base exports member"],
    "body": ["exports.${1:member} = ${2:value};"],
    "description": "exports.member",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "module-exports": {
    "prefix": ["base module exports"],
    "body": ["module.exports = ${1:name};"],
    "description": "module.exports",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "module-exports-object": {
    "prefix": ["base module exports object"],
    "body": ["module.exports = {\n\t${1:member}\n};"],
    "description": "module exports object",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "event-handler": {
    "prefix": ["base event handler"],
    "body": [
      "${1:emitter}.on('${2:event}', (${3:arguments}) => {\n\t${0}\n});"
    ],
    "description": "event handler",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "consoleassert": {
    "prefix": ["base console assert"],
    "body": ["console.assert(${1:expression}, ${2:object});"],
    "description": "If the specified expression is false, the message is written to the console along with a stack trace",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "consoleclear": {
    "prefix": ["base console clear"],
    "body": ["console.clear();"],
    "description": "Clears the console",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "consolecount": {
    "prefix": ["base console count"],
    "body": ["console.count(${1:label});"],
    "description": "Writes the the number of times that count() has been invoked at the same line and with the same label",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "consoledebug": {
    "prefix": ["base console debug"],
    "body": ["console.debug(${1:object});"],
    "description": "Displays a message in the console. Also display a blue right arrow icon along with the logged message in Safari",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "consoledir": {
    "prefix": ["base console dir"],
    "body": ["console.dir(${1:object});"],
    "description": "Prints a JavaScript representation of the specified object",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "consoleerror": {
    "prefix": ["base console error"],
    "body": ["console.error(${1:object});"],
    "description": "Displays a message in the console and also includes a stack trace from where the method was called",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "consolegroup": {
    "prefix": ["base console group"],
    "body": ["console.group('${1:label}');"],
    "description": "Groups and indents all following output by an additional level, until console.groupEnd() is called.",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "consolegroupend": {
    "prefix": ["base console group end"],
    "body": ["console.groupEnd();"],
    "description": "Closes out the corresponding console.group().",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "consolelog": {
    "prefix": ["base console log"],
    "body": ["console.log(${1:object});"],
    "description": "Displays a message in the console",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "consolelogobject": {
    "prefix": ["base console log object"],
    "body": ["console.log('${1:object} :>> ', ${1:object});"],
    "description": "Displays an object in the console with its name",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "consoletrace": {
    "prefix": ["base console trace"],
    "body": ["console.trace(${1:object});"],
    "description": "Prints a stack trace from the point where the method was called",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "consolewarn": {
    "prefix": ["base console warn"],
    "body": ["console.warn(${1:object});"],
    "description": "Displays a message in the console but also displays a yellow warning icon along with the logged message",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "consoleinfo": {
    "prefix": ["base console info"],
    "body": ["console.info(${1:object});"],
    "description": "Displays a message in the console but also displays a blue information icon along with the logged message",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "consoletable": {
    "prefix": ["base console table"],
    "body": ["console.table(${1:object});"],
    "description": "Displays tabular data as a table.",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "consoletime": {
    "prefix": ["base console time"],
    "body": ["console.time(${1:object});"],
    "description": "Sets starting point for execution time measurement",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "consoletimeend": {
    "prefix": ["base console time end"],
    "body": ["console.timeEnd(${1:object});"],
    "description": "Sets end point for execution time measurement",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "settimeout": {
    "prefix": ["base set timeout"],
    "body": ["setTimeout(() => {\n\t${0}\n}, ${1:delay});"],
    "description": "setTimeout",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "setinterval": {
    "prefix": ["base set interval"],
    "body": ["setInterval(() => {\n\t${0}\n}, ${1:delay});"],
    "description": "setInterval",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "setimmediate": {
    "prefix": ["base set immediate"],
    "body": ["setImmediate(() => {\n\t${0}\n});"],
    "description": "setImmediate",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "process-nexttick": {
    "prefix": ["base process next tick"],
    "body": ["process.nextTick(() => {\n\t${0}\n});"],
    "description": "process nextTick",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "insert-use-strict-statement": {
    "prefix": ["base use strict"],
    "body": ["'use strict';"],
    "description": "insert 'use strict' statement",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "classnames-usage": {
    "scope": "javascript,javascriptreact,typescript,typescriptreact",
    "prefix": ["classnames usage"],
    "body": ["${1:classNames}('${2:foo}', '${3:bar}');"]
  },
  "classnames-usage-object": {
    "scope": "javascript,javascriptreact,typescript,typescriptreact",
    "prefix": ["classnames usage object"],
    "body": ["${1:classNames}({ '${2:foo-bar}': true });"]
  },
  "classnames-import-bind": {
    "scope": "javascript,javascriptreact,typescript,typescriptreact",
    "prefix": ["classnames import bind"],
    "body": ["import ${1:classNames} from 'classnames/bind';"]
  },
  "classnames-bind-usage": {
    "scope": "javascript,javascriptreact,typescript,typescriptreact",
    "prefix": ["classnames bind usage"],
    "body": ["const ${1:cx} = ${2:classNames}.bind(styles);"]
  },
  "cypress-cookies-get-all": {
    "prefix": ["cypress cookies get all"],
    "body": ["cy.getCookies();"],
    "description": "Get all of the browser cookies.",
    "scope": "javascript,typescript"
  },
  "cypress-cookies-clear-all": {
    "prefix": ["cypress cookies clear all"],
    "body": ["cy.clearCookies();"],
    "description": "Clear all browser cookies for current domain and subdomain.",
    "scope": "javascript,typescript"
  },
  "cypress-get": {
    "prefix": ["cypress get"],
    "body": ["cy.get('${1:selector}');"],
    "description": "Get one or more DOM elements by selector or alias",
    "scope": "javascript,typescript"
  },
  "cypress-go": {
    "prefix": ["cypress go"],
    "body": ["cy.go('${1:direction}');"],
    "description": "Navigate back or forward to the previous or next URL in the browser’s history.",
    "scope": "javascript,typescript"
  },
  "cypress-scroll-to-coordinates": {
    "prefix": ["cypress scroll to coordinates"],
    "body": ["cy.scrollTo(${1:x}, ${2:y});"],
    "description": "Scroll to a position defined by the distance in pixels from window/element’s x and y or percentage of the window/element’s width and height.",
    "scope": "javascript,typescript"
  },
  "cypress-scroll-to-position": {
    "prefix": ["cypress scroll to position"],
    "body": ["cy.scrollTo('${1:position}');"],
    "description": "Scroll to a specified position. Valid positions are topLeft, top, topRight, left, center, right, bottomLeft, bottom, and bottomRight.",
    "scope": "javascript,typescript"
  },
  "cypress-request": {
    "prefix": ["cypress request"],
    "body": [
      "cy.request({",
      "\tmethod: '${1:METHOD}',",
      "\turl: '${2:url}',",
      "\tbody: ${3:body}",
      "});"
    ],
    "description": "Make an HTTP request.",
    "scope": "javascript,typescript"
  },
  "cypress-route": {
    "prefix": ["cypress route"],
    "body": ["cy.route('${1:METHOD}', '${2:url}', ${3:response});"],
    "description": "Use cy.route() to manage the behavior of network requests.",
    "scope": "javascript,typescript"
  },
  "cypress-server": {
    "prefix": ["cypress server"],
    "body": ["cy.server();"],
    "description": "Start a server to begin routing responses to cy.route() and to change the behavior of network requests.",
    "scope": "javascript,typescript"
  },
  "cypress-viewport": {
    "prefix": ["cypress viewport"],
    "body": ["cy.viewport(${1:width}, ${2:height});"],
    "description": "Control the size of the screen for your application.",
    "scope": "javascript,typescript"
  },
  "cypress-viewport-preset": {
    "prefix": ["cypress viewport preset"],
    "body": ["cy.viewport('${1:preset}');"],
    "description": "Control the size of the screen for your application via presets. Preset supports the following options: ipad-2, ipad-mini, iphone-3, iphone-4, iphone-5, iphone-6, iphone-6+, iphone-x, iphone-xr, macbook-11, macbook-13, macbook-15, samsung-note9, samsung-s10",
    "scope": "javascript,typescript"
  },
  "cypress-visit": {
    "prefix": ["cypress visit"],
    "body": ["cy.visit('${1:url}');"],
    "description": "Visit a remote URL",
    "scope": "javascript,typescript"
  },
  "cypress-wait": {
    "prefix": ["cypress wait"],
    "body": ["cy.wait(${1:time});"],
    "description": "Wait for a number of milliseconds or wait for an aliased resource to resolve before moving on to the next command.",
    "scope": "javascript,typescript"
  },
  "dotenv-safe-require": {
    "scope": "javascript,typescript",
    "prefix": ["dotenv-safe require"],
    "body": ["require('dotenv-safe').config();"],
    "description": "As early as possible in your application, require and configure dotenv-safe. This will load environment variables from .env as usual, but will also read any variables defined in .env.example. If any variables are already defined in the environment before reading from .env, they will not be overwritten. If any variables are missing from the environment, a MissingEnvVarsError will be thrown, which lists the missing variables."
  },
  "dotenv-safe-path": {
    "scope": "javascript,typescript",
    "prefix": ["dotenv-safe path"],
    "body": [
      "require('dotenv-safe').config({ path: '${1:/full/custom/path/to/your/env/vars}' })"
    ],
    "description": "You may specify a custom path if your file containing environment variables is located elsewhere."
  },
  "dotenv-safe-encoding": {
    "scope": "javascript,typescript",
    "prefix": ["dotenv-safe encoding"],
    "body": ["require('dotenv-safe').config({ encoding: '${1:latin1}' })"],
    "description": "You may specify the encoding of your file containing environment variables."
  },
  "dotenv-safe-debug": {
    "scope": "javascript,typescript",
    "prefix": ["dotenv-safe debug"],
    "body": ["require('dotenv-safe').config({ debug: ${1|true,false|} })"],
    "description": "You may turn on logging to help debug why certain keys or values are not being set as you expect."
  },
  "dotenv-safe-allowemptyvalues": {
    "scope": "javascript,typescript",
    "prefix": ["dotenv-safe allowemptyvalues"],
    "body": [
      "require('dotenv-safe').config({ allowEmptyValues: ${1|true,false|} })"
    ],
    "description": "If a variable is defined in the example file and has an empty value in the environment, enabling this option will not throw an error after loading."
  },
  "b-alert-header": {
    "prefix": "b-alert-header",
    "body": [
      "<div class=\"alert alert-${1|primary,secondary,success,danger,warning,info,light,dark|}\" role=\"alert\">",
      "\t<h4 class=\"alert-heading\">${2:Header}</h4>",
      "\t${3:Content}",
      "</div>"
    ]
  },
  "b-alert": {
    "prefix": "b-alert",
    "body": [
      "<div class=\"alert alert-${1|primary,secondary,success,danger,warning,info,light,dark|}\" role=\"alert\">",
      "\t${2:Content}",
      "</div>"
    ]
  },
  "b-badge-pill": {
    "prefix": "b-badge-pill",
    "body": [
      "<span class=\"badge badge-pill badge-${1|primary,secondary,success,danger,warning,info,light,dark|}\">${2:Text}</span>"
    ]
  },
  "b-badge": {
    "prefix": "b-badge",
    "body": [
      "<span class=\"badge badge-${1|primary,secondary,success,danger,warning,info,light,dark|}\">${2:Text}</span>"
    ]
  },
  "b-breadcrumb": {
    "prefix": "b-breadcrumb",
    "body": [
      "<nav aria-label=\"${1:Page breadcrumb}\">",
      "\t<ol class=\"breadcrumb\">",
      "\t\t<li class=\"breadcrumb-item active\" aria-current=\"page\">${2:Item 1}</li>",
      "\t\t<li class=\"breadcrumb-item\">${3:Item 2}</li>$0",
      "\t</ol>",
      "</nav>"
    ]
  },
  "b-btn-group-vertical": {
    "prefix": "b-btn-group-vertical",
    "body": [
      "<div class=\"btn-group-vertical\" role=\"group\" aria-label=\"${1:Vertical button group}\">",
      "\t$0",
      "</div>"
    ]
  },
  "b-btn-group": {
    "prefix": "b-btn-group",
    "body": [
      "<div class=\"btn-group\" role=\"group\" aria-label=\"${1:Button group}\">",
      "\t$0",
      "</div>"
    ]
  },
  "b-btn-checkbox": {
    "prefix": "b-btn-checkbox",
    "body": [
      "<div class=\"btn-group-toggle\" data-toggle=\"buttons\">",
      "\t<label class=\"btn btn-${1|primary,secondary,success,danger,warning,info,light,dark,link|}\">",
      "\t\t<input type=\"checkbox\"> ${2:Text}",
      "\t</label>$0",
      "</div>"
    ]
  },
  "b-btn-radio": {
    "prefix": "b-btn-radio",
    "body": [
      "<div class=\"btn-group btn-group-toggle\" data-toggle=\"buttons\">",
      "\t<label class=\"btn btn-${1|primary,secondary,success,danger,warning,info,light,dark,link|}\">",
      "\t\t<input type=\"radio\"> ${2:Text}",
      "\t</label>$0",
      "</div>"
    ]
  },
  "b-btn": {
    "prefix": "b-btn",
    "body": [
      "<button class=\"btn btn-${1|primary,secondary,success,danger,warning,info,light,dark,link|}\" type=\"${2|button,submit,reset|}\">${3:Text}</button>"
    ]
  },
  "b-card-columns": {
    "prefix": "b-card-columns",
    "body": ["<div class=\"card-columns\">", "\t$0", "</div>"]
  },
  "b-card-deck": {
    "prefix": "b-card-deck",
    "body": ["<div class=\"card-deck\">", "\t$0", "</div>"]
  },
  "b-card-footer": {
    "prefix": "b-card-footer",
    "body": [
      "<div class=\"card\">",
      "\t<div class=\"card-body\">",
      "\t\t<h5 class=\"card-title\">${1:Title}</h5>",
      "\t\t<p class=\"card-text\">${2:Content}</p>$0",
      "\t</div>",
      "\t<div class=\"card-footer\">",
      "\t\t${3:Footer}",
      "\t</div>",
      "</div>"
    ]
  },
  "b-card-full": {
    "prefix": "b-card-full",
    "body": [
      "<div class=\"card\">",
      "\t<div class=\"card-header\">",
      "\t\t${1:Header}",
      "\t</div>",
      "\t<div class=\"card-body\">",
      "\t\t<h5 class=\"card-title\">${2:Title}</h5>",
      "\t\t<p class=\"card-text\">${3:Content}</p>$0",
      "\t</div>",
      "\t<div class=\"card-footer\">",
      "\t\t${4:Footer}",
      "\t</div>",
      "</div>"
    ]
  },
  "b-card-group": {
    "prefix": "b-card-group",
    "body": ["<div class=\"card-group\">", "\t$0", "</div>"]
  },
  "b-card-header": {
    "prefix": "b-card-header",
    "body": [
      "<div class=\"card\">",
      "\t<div class=\"card-header\">",
      "\t\t${1:Header}",
      "\t</div>",
      "\t<div class=\"card-body\">",
      "\t\t<h5 class=\"card-title\">${2:Title}</h5>",
      "\t\t<p class=\"card-text\">${3:Content}</p>$0",
      "\t</div>",
      "</div>"
    ]
  },
  "b-card-img-bottom": {
    "prefix": "b-card-img-bottom",
    "body": [
      "<div class=\"card\">",
      "\t<div class=\"card-body\">",
      "\t\t<h5 class=\"card-title\">${1:Title}</h5>",
      "\t\t<p class=\"card-text\">${2:Content}</p>$0",
      "\t</div>",
      "\t<img class=\"card-img-bottom\" src=\"$3\" alt=\"$4\">",
      "</div>"
    ]
  },
  "b-card-img-full": {
    "prefix": "b-card-img-full",
    "body": [
      "<div class=\"card\">",
      "\t<img class=\"card-img-top\" src=\"$1\" alt=\"$2\">",
      "\t<div class=\"card-body\">",
      "\t\t<h5 class=\"card-title\">${3:Title}</h5>",
      "\t\t<p class=\"card-text\">${4:Content}</p>$0",
      "\t</div>",
      "\t<img class=\"card-img-bottom\" src=\"$5\" alt=\"$6\">",
      "</div>"
    ]
  },
  "b-card-img-overlay": {
    "prefix": "b-card-img-overlay",
    "body": [
      "<div class=\"card\">",
      "\t<img class=\"card-img\" src=\"$1\" alt=\"$2\">",
      "\t<div class=\"card-img-overlay\">",
      "\t\t<h5 class=\"card-title\">${3:Title}</h5>",
      "\t\t<p class=\"card-text\">${4:Content}</p>$0",
      "\t</div>",
      "</div>"
    ]
  },
  "b-card-img-top": {
    "prefix": "b-card-img-top",
    "body": [
      "<div class=\"card\">",
      "\t<img class=\"card-img-top\" src=\"$1\" alt=\"$2\">",
      "\t<div class=\"card-body\">",
      "\t\t<h5 class=\"card-title\">${3:Title}</h5>",
      "\t\t<p class=\"card-text\">${4:Content}</p>$0",
      "\t</div>",
      "</div>"
    ]
  },
  "b-card": {
    "prefix": "b-card",
    "body": [
      "<div class=\"card\">",
      "\t<div class=\"card-body\">",
      "\t\t<h5 class=\"card-title\">${1:Title}</h5>",
      "\t\t<p class=\"card-text\">${2:Content}</p>$0",
      "\t</div>",
      "</div>"
    ]
  },
  "b-carousel-controls": {
    "prefix": "b-carousel-controls",
    "body": [
      "<div id=\"${1:my-carousel}\" class=\"carousel slide\" data-ride=\"carousel\">",
      "\t<div class=\"carousel-inner\">",
      "\t\t<div class=\"carousel-item active\">",
      "\t\t\t<img class=\"d-block w-100\" src=\"$2\" alt=\"$3\">",
      "\t\t\t<div class=\"carousel-caption d-none d-md-block\">",
      "\t\t\t\t<h5>${4:Title}</h5>",
      "\t\t\t\t<p>${5:Text}</p>",
      "\t\t\t</div>",
      "\t\t</div>$0",
      "\t</div>",
      "\t<a class=\"carousel-control-prev\" href=\"#$1\" data-slide=\"prev\" role=\"button\">",
      "\t\t<span class=\"carousel-control-prev-icon\" aria-hidden=\"true\"></span>",
      "\t\t<span class=\"sr-only\">${6:Previous}</span>",
      "\t</a>",
      "\t<a class=\"carousel-control-next\" href=\"#$1\" data-slide=\"next\" role=\"button\">",
      "\t\t<span class=\"carousel-control-next-icon\" aria-hidden=\"true\"></span>",
      "\t\t<span class=\"sr-only\">${7:Next}</span>",
      "\t</a>",
      "</div>"
    ]
  },
  "b-carousel-full": {
    "prefix": "b-carousel-full",
    "body": [
      "<div id=\"${1:my-carousel}\" class=\"carousel slide\" data-ride=\"carousel\">",
      "\t<ol class=\"carousel-indicators\">",
      "\t\t<li class=\"active\" data-target=\"#$1\" data-slide-to=\"0\" aria-current=\"location\"></li>",
      "\t\t<li data-target=\"#$1\" data-slide-to=\"1\"></li>",
      "\t</ol>",
      "\t<div class=\"carousel-inner\">",
      "\t\t<div class=\"carousel-item active\">",
      "\t\t\t<img class=\"d-block w-100\" src=\"$2\" alt=\"$3\">",
      "\t\t\t<div class=\"carousel-caption d-none d-md-block\">",
      "\t\t\t\t<h5>${4:Title}</h5>",
      "\t\t\t\t<p>${5:Text}</p>",
      "\t\t\t</div>",
      "\t\t</div>",
      "\t\t<div class=\"carousel-item\">",
      "\t\t\t<img class=\"d-block w-100\" src=\"$6\" alt=\"$7\">",
      "\t\t\t<div class=\"carousel-caption d-none d-md-block\">",
      "\t\t\t\t<h5>${8:Title}</h5>",
      "\t\t\t\t<p>${9:Text}</p>",
      "\t\t\t</div>",
      "\t\t</div>$0",
      "\t</div>",
      "\t<a class=\"carousel-control-prev\" href=\"#$1\" data-slide=\"prev\" role=\"button\">",
      "\t\t<span class=\"carousel-control-prev-icon\" aria-hidden=\"true\"></span>",
      "\t\t<span class=\"sr-only\">${10:Previous}</span>",
      "\t</a>",
      "\t<a class=\"carousel-control-next\" href=\"#$1\" data-slide=\"next\" role=\"button\">",
      "\t\t<span class=\"carousel-control-next-icon\" aria-hidden=\"true\"></span>",
      "\t\t<span class=\"sr-only\">${11:Next}</span>",
      "\t</a>",
      "</div>"
    ]
  },
  "b-carousel-indicators": {
    "prefix": "b-carousel-indicators",
    "body": [
      "<div id=\"${1:my-carousel}\" class=\"carousel slide\" data-ride=\"carousel\">",
      "\t<ol class=\"carousel-indicators\">",
      "\t\t<li class=\"active\" data-target=\"#$1\" data-slide-to=\"0\" aria-current=\"location\"></li>",
      "\t\t<li data-target=\"#$1\" data-slide-to=\"1\"></li>",
      "\t</ol>",
      "\t<div class=\"carousel-inner\">",
      "\t\t<div class=\"carousel-item active\">",
      "\t\t\t<img class=\"d-block w-100\" src=\"$2\" alt=\"$3\">",
      "\t\t\t<div class=\"carousel-caption d-none d-md-block\">",
      "\t\t\t\t<h5>${4:Title}</h5>",
      "\t\t\t\t<p>${5:Text}</p>",
      "\t\t\t</div>",
      "\t\t</div>",
      "\t\t<div class=\"carousel-item\">",
      "\t\t\t<img class=\"d-block w-100\" src=\"$6\" alt=\"$7\">",
      "\t\t\t<div class=\"carousel-caption d-none d-md-block\">",
      "\t\t\t\t<h5>${8:Title}</h5>",
      "\t\t\t\t<p>${9:Text}</p>",
      "\t\t\t</div>",
      "\t\t</div>$0",
      "\t</div>",
      "</div>"
    ]
  },
  "b-carousel": {
    "prefix": "b-carousel",
    "body": [
      "<div id=\"${1:my-carousel}\" class=\"carousel slide\" data-ride=\"carousel\">",
      "\t<div class=\"carousel-inner\">",
      "\t\t<div class=\"carousel-item active\">",
      "\t\t\t<img class=\"d-block w-100\" src=\"$2\" alt=\"$3\">",
      "\t\t\t<div class=\"carousel-caption d-none d-md-block\">",
      "\t\t\t\t<h5>${4:Title}</h5>",
      "\t\t\t\t<p>${5:Text}</p>",
      "\t\t\t</div>",
      "\t\t</div>$0",
      "\t</div>",
      "</div>"
    ]
  },
  "b-collapse": {
    "prefix": "b-collapse",
    "body": [
      "<button class=\"btn btn-${2|primary,secondary,success,danger,warning,info,light,dark,link|}\" data-target=\"#${1:my-collapse}\" data-toggle=\"collapse\" aria-expanded=\"false\" aria-controls=\"$1\">${3:Text}</button>",
      "<div id=\"$1\" class=\"collapse\">",
      "\t$0",
      "</div>"
    ]
  },
  "b-dropdown-menu": {
    "prefix": "b-dropdown-menu",
    "body": [
      "<div class=\"dropdown-menu\">",
      "\t<a class=\"dropdown-item active\" href=\"#\">${1:Text}</a>$0",
      "</div>"
    ]
  },
  "b-dropdown-split": {
    "prefix": "b-dropdown-split",
    "body": [
      "<div class=\"btn-group ${2|dropdown,dropup,dropright,dropleft|}\">",
      "\t<button class=\"btn btn-${3|primary,secondary,success,danger,warning,info,light,dark,link|}\">${4:Text}</button>",
      "\t<button id=\"${1:my-dropdown}\" class=\"btn btn-$3 dropdown-toggle dropdown-toggle-split\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">",
      "\t\t<span class=\"sr-only\">Toggle dropdown</span>",
      "\t</button>",
      "\t<div class=\"dropdown-menu\" aria-labelledby=\"$1\">",
      "\t\t<a class=\"dropdown-item active\" href=\"#\">${5:Text}</a>$0",
      "\t</div>",
      "</div>"
    ]
  },
  "b-dropdown": {
    "prefix": "b-dropdown",
    "body": [
      "<div class=\"${2|dropdown,dropup,dropright,dropleft|}\">",
      "\t<button id=\"${1:my-dropdown}\" class=\"btn btn-${3|primary,secondary,success,danger,warning,info,light,dark,link|} dropdown-toggle\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">${4:Text}</button>",
      "\t<div class=\"dropdown-menu\" aria-labelledby=\"$1\">",
      "\t\t<a class=\"dropdown-item active\" href=\"#\">${5:Text}</a>$0",
      "\t</div>",
      "</div>"
    ]
  },
  "b-form-check-inline": {
    "prefix": "b-form-check-inline",
    "body": [
      "<div class=\"form-check form-check-inline\">",
      "\t<input id=\"${1:my-input}\" class=\"form-check-input\" type=\"${2|checkbox,radio|}\" name=\"$3\" value=\"${4:true}\">",
      "\t<label for=\"$1\" class=\"form-check-label\">${5:Text}</label>",
      "</div>"
    ]
  },
  "b-form-check": {
    "prefix": "b-form-check",
    "body": [
      "<div class=\"form-check\">",
      "\t<input id=\"${1:my-input}\" class=\"form-check-input\" type=\"${2|checkbox,radio|}\" name=\"$3\" value=\"${4:true}\">",
      "\t<label for=\"$1\" class=\"form-check-label\">${5:Text}</label>",
      "</div>"
    ]
  },
  "b-form-custom-check-inline": {
    "prefix": "b-form-custom-check-inline",
    "body": [
      "<div class=\"custom-control custom-${2|checkbox,radio|} custom-control-inline\">",
      "\t<input id=\"${1:my-input}\" class=\"custom-control-input\" type=\"${2|checkbox,radio|}\" name=\"$3\" value=\"${4:true}\">",
      "\t<label for=\"$1\" class=\"custom-control-label\">${5:Text}</label>",
      "</div>"
    ]
  },
  "b-form-custom-check": {
    "prefix": "b-form-custom-check",
    "body": [
      "<div class=\"custom-control custom-${2|checkbox,radio|}\">",
      "\t<input id=\"${1:my-input}\" class=\"custom-control-input\" type=\"${2|checkbox,radio|}\" name=\"$3\" value=\"${4:true}\">",
      "\t<label for=\"$1\" class=\"custom-control-label\">${5:Text}</label>",
      "</div>"
    ]
  },
  "b-form-custom-file": {
    "prefix": "b-form-custom-file",
    "body": [
      "<div class=\"custom-file\">",
      "\t<input id=\"${1:my-input}\" class=\"custom-file-input\" type=\"file\" name=\"$2\">",
      "\t<label for=\"$1\" class=\"custom-file-label\">${3:Text}</label>",
      "</div>"
    ]
  },
  "b-form-custom-range": {
    "prefix": "b-form-custom-range",
    "body": [
      "<div class=\"form-group\">",
      "\t<label for=\"${1:my-input}\">${5:Text}</label>",
      "\t<input id=\"$1\" class=\"custom-range\" type=\"range\" name=\"$2\" min=\"${3:0}\" max=\"${4:100}\">",
      "</div>"
    ]
  },
  "b-form-custom-select-multiple": {
    "prefix": "b-form-custom-select-multiple",
    "body": [
      "<div class=\"form-group\">",
      "\t<label for=\"${1:my-select}\">${3:Text}</label>",
      "\t<select id=\"$1\" class=\"custom-select\" name=\"$2\" multiple>",
      "\t\t<option>${4:Text}</option>$0",
      "\t</select>",
      "</div>"
    ]
  },
  "b-form-custom-select": {
    "prefix": "b-form-custom-select",
    "body": [
      "<div class=\"form-group\">",
      "\t<label for=\"${1:my-select}\">${3:Text}</label>",
      "\t<select id=\"$1\" class=\"custom-select\" name=\"$2\">",
      "\t\t<option>${4:Text}</option>$0",
      "\t</select>",
      "</div>"
    ]
  },
  "b-form-custom-switch": {
    "prefix": "b-form-custom-switch",
    "body": [
      "<div class=\"custom-control custom-switch\">",
      "\t<input id=\"${1:my-input}\" class=\"custom-control-input\" type=\"checkbox\" name=\"$2\" value=\"${3:true}\">",
      "\t<label for=\"$1\" class=\"custom-control-label\">${4:Text}</label>",
      "</div>"
    ]
  },
  "b-form-enctype-inline": {
    "prefix": "b-form-enctype-inline",
    "body": [
      "<form class=\"form-inline\" method=\"${1|get,post|}\" action=\"$2\" enctype=\"${3|multipart/form-data,application/x-www-form-urlencoded,text/plain|}\">",
      "\t$0",
      "</form>"
    ]
  },
  "b-form-enctype": {
    "prefix": "b-form-enctype",
    "body": [
      "<form method=\"${1|get,post|}\" action=\"$2\" enctype=\"${3|multipart/form-data,application/x-www-form-urlencoded,text/plain|}\">",
      "\t$0",
      "</form>"
    ]
  },
  "b-form-file": {
    "prefix": "b-form-file",
    "body": [
      "<div class=\"form-group\">",
      "\t<label for=\"${1:my-input}\">${3:Text}</label>",
      "\t<input id=\"$1\" class=\"form-control-file\" type=\"file\" name=\"$2\">",
      "</div>"
    ]
  },
  "b-form-group": {
    "prefix": "b-form-group",
    "body": [
      "<div class=\"form-group\">",
      "\t<label for=\"${1:my-input}\">${4:Text}</label>",
      "\t<input id=\"$1\" class=\"form-control\" type=\"${2|text,number,email,password|}\" name=\"$3\">",
      "</div>"
    ]
  },
  "b-form-help": {
    "prefix": "b-form-help",
    "body": ["<small class=\"form-text text-muted\">${1:Content}</small>"]
  },
  "b-form-inline": {
    "prefix": "b-form-inline",
    "body": [
      "<form class=\"form-inline\" method=\"${1|get,post|}\" action=\"$2\">",
      "\t$0",
      "</form>"
    ]
  },
  "b-form-invalid": {
    "prefix": "b-form-invalid",
    "body": ["<div class=\"invalid-${1|feedback,tooltip|}\">${2:Content}</div>"]
  },
  "b-form-range": {
    "prefix": "b-form-range",
    "body": [
      "<div class=\"form-group\">",
      "\t<label for=\"${1:my-input}\">${5:Text}</label>",
      "\t<input id=\"$1\" class=\"form-control-range\" type=\"range\" name=\"$2\" min=\"${3:0}\" max=\"${4:100}\">",
      "</div>"
    ]
  },
  "b-form-select-multiple": {
    "prefix": "b-form-select-multiple",
    "body": [
      "<div class=\"form-group\">",
      "\t<label for=\"${1:my-select}\">${3:Text}</label>",
      "\t<select id=\"$1\" class=\"form-control\" name=\"$2\" multiple>",
      "\t\t<option>${4:Text}</option>$0",
      "\t</select>",
      "</div>"
    ]
  },
  "b-form-select": {
    "prefix": "b-form-select",
    "body": [
      "<div class=\"form-group\">",
      "\t<label for=\"${1:my-select}\">${3:Text}</label>",
      "\t<select id=\"$1\" class=\"form-control\" name=\"$2\">",
      "\t\t<option>${4:Text}</option>$0",
      "\t</select>",
      "</div>"
    ]
  },
  "b-form-textarea": {
    "prefix": "b-form-textarea",
    "body": [
      "<div class=\"form-group\">",
      "\t<label for=\"${1:my-textarea}\">${4:Text}</label>",
      "\t<textarea id=\"$1\" class=\"form-control\" name=\"$2\" rows=\"${3:3}\"></textarea>",
      "</div>"
    ]
  },
  "b-form-valid": {
    "prefix": "b-form-valid",
    "body": ["<div class=\"valid-${1|feedback,tooltip|}\">${2:Content}</div>"]
  },
  "b-form": {
    "prefix": "b-form",
    "body": [
      "<form method=\"${1|get,post|}\" action=\"$2\">",
      "\t$0",
      "</form>"
    ]
  },
  "b-input-hidden-id": {
    "prefix": "b-input-hidden-id",
    "body": [
      "<input id=\"${1:my-input}\" type=\"hidden\" name=\"$2\" value=\"$3\">"
    ]
  },
  "b-input-hidden": {
    "prefix": "b-input-hidden",
    "body": ["<input type=\"hidden\" name=\"$1\" value=\"$2\">"]
  },
  "b-input-id": {
    "prefix": "b-input-id",
    "body": [
      "<input id=\"${1:my-input}\" class=\"form-control\" type=\"${2|text,number,email,password|}\" name=\"$3\">"
    ]
  },
  "b-input": {
    "prefix": "b-input",
    "body": [
      "<input class=\"form-control\" type=\"${1|text,number,email,password|}\" name=\"$2\">"
    ]
  },
  "b-input-group-append": {
    "prefix": "b-input-group-append",
    "body": [
      "<div class=\"input-group\">",
      "\t<input class=\"form-control\" type=\"${2|text,number,email,password|}\" name=\"$3\" placeholder=\"${4:Recipient's $2}\" aria-label=\"$4\" aria-describedby=\"${1:my-addon}\">",
      "\t<div class=\"input-group-append\">",
      "\t\t<span class=\"input-group-text\" id=\"$1\">${5:Text}</span>",
      "\t</div>",
      "</div>"
    ]
  },
  "b-input-group-full": {
    "prefix": "b-input-group-full",
    "body": [
      "<div class=\"input-group\">",
      "\t<div class=\"input-group-prepend\">",
      "\t\t<span class=\"input-group-text\">${4:Text}</span>",
      "\t</div>",
      "\t<input class=\"form-control\" type=\"${1|text,number,email,password|}\" name=\"$2\" placeholder=\"${3:Recipient's $1}\" aria-label=\"$3\">",
      "\t<div class=\"input-group-append\">",
      "\t\t<span class=\"input-group-text\">${5:Text}</span>",
      "\t</div>",
      "</div>"
    ]
  },
  "b-input-group-prepend": {
    "prefix": "b-input-group-prepend",
    "body": [
      "<div class=\"input-group\">",
      "\t<div class=\"input-group-prepend\">",
      "\t\t<span class=\"input-group-text\" id=\"${1:my-addon}\">${5:Text}</span>",
      "\t</div>",
      "\t<input class=\"form-control\" type=\"${2|text,number,email,password|}\" name=\"$3\" placeholder=\"${4:Recipient's $2}\" aria-label=\"$4\" aria-describedby=\"$1\">",
      "</div>"
    ]
  },
  "b-jumbotron-fluid": {
    "prefix": "b-jumbotron-fluid",
    "body": [
      "<div class=\"jumbotron jumbotron-fluid\">",
      "\t<h1 class=\"display-4\">${1:Title}</h1>",
      "\t<p class=\"lead\">${2:Subtitle}</p>",
      "\t<hr class=\"my-4\">",
      "\t<p>${3:Content}</p>",
      "</div>"
    ]
  },
  "b-jumbotron": {
    "prefix": "b-jumbotron",
    "body": [
      "<div class=\"jumbotron\">",
      "\t<h1 class=\"display-4\">${1:Title}</h1>",
      "\t<p class=\"lead\">${2:Subtitle}</p>",
      "\t<hr class=\"my-4\">",
      "\t<p>${3:Content}</p>",
      "</div>"
    ]
  },
  "b-list-group-action-flush": {
    "prefix": "b-list-group-action-flush",
    "body": [
      "<ul class=\"list-group list-group-flush\">",
      "\t<a class=\"list-group-item list-group-item-action active\" href=\"#\">${1:Text}</a>",
      "\t<a class=\"list-group-item list-group-item-action disabled\" href=\"#\" tabindex=\"-1\" aria-disabled=\"true\">${2:Disabled item}</a>$0",
      "</ul>"
    ]
  },
  "b-list-group-action-horizontal": {
    "prefix": "b-list-group-action-horizontal",
    "body": [
      "<ul class=\"list-group list-group-horizontal\">",
      "\t<a class=\"list-group-item list-group-item-action active\" href=\"#\">${1:Text}</a>",
      "\t<a class=\"list-group-item list-group-item-action disabled\" href=\"#\" tabindex=\"-1\" aria-disabled=\"true\">${2:Disabled item}</a>$0",
      "</ul>"
    ]
  },
  "b-list-group-action": {
    "prefix": "b-list-group-action",
    "body": [
      "<ul class=\"list-group\">",
      "\t<a class=\"list-group-item list-group-item-action active\" href=\"#\">${1:Text}</a>",
      "\t<a class=\"list-group-item list-group-item-action disabled\" href=\"#\" tabindex=\"-1\" aria-disabled=\"true\">${2:Disabled item}</a>$0",
      "</ul>"
    ]
  },
  "b-list-group-flush": {
    "prefix": "b-list-group-flush",
    "body": [
      "<ul class=\"list-group list-group-flush\">",
      "\t<li class=\"list-group-item active\">${1:Text}</li>",
      "\t<li class=\"list-group-item disabled\" aria-disabled=\"true\">${2:Disabled item}</li>$0",
      "</ul>"
    ]
  },
  "b-list-group-horizontal": {
    "prefix": "b-list-group-horizontal",
    "body": [
      "<ul class=\"list-group list-group-horizontal\">",
      "\t<li class=\"list-group-item active\">${1:Text}</li>",
      "\t<li class=\"list-group-item disabled\" aria-disabled=\"true\">${2:Disabled item}</li>$0",
      "</ul>"
    ]
  },
  "b-list-group": {
    "prefix": "b-list-group",
    "body": [
      "<ul class=\"list-group\">",
      "\t<li class=\"list-group-item active\">${1:Text}</li>",
      "\t<li class=\"list-group-item disabled\" aria-disabled=\"true\">${2:Disabled item}</li>$0",
      "</ul>"
    ]
  },
  "b-media-left": {
    "prefix": "b-media-left",
    "body": [
      "<div class=\"media\">",
      "\t<img class=\"align-self-${1|start,center,end|}\" src=\"$2\" alt=\"$3\">",
      "\t<div class=\"media-body\">",
      "\t\t<h5 class=\"mb-0\">${4:Header}</h5>",
      "\t\t${5:Content}",
      "\t</div>",
      "</div>"
    ]
  },
  "b-media-right": {
    "prefix": "b-media-right",
    "body": [
      "<div class=\"media\">",
      "\t<div class=\"media-body\">",
      "\t\t<h5 class=\"mb-0\">${2:Header}</h5>",
      "\t\t${3:Content}",
      "\t</div>",
      "\t<img class=\"align-self-${1|start,center,end|}\" src=\"$4\" alt=\"$5\">",
      "</div>"
    ]
  },
  "b-modal-center": {
    "prefix": "b-modal-center",
    "body": [
      "<div id=\"${1:my-modal}\" class=\"modal fade\" tabindex=\"-1\" role=\"dialog\" aria-hidden=\"true\">",
      "\t<div class=\"modal-dialog modal-dialog-centered\" role=\"document\">",
      "\t\t<div class=\"modal-content\">",
      "\t\t\t<div class=\"modal-body\">",
      "\t\t\t\t<p>${2:Content}</p>$0",
      "\t\t\t</div>",
      "\t\t</div>",
      "\t</div>",
      "</div>"
    ]
  },
  "b-modal-footer-center": {
    "prefix": "b-modal-footer-center",
    "body": [
      "<div id=\"${1:my-modal}\" class=\"modal fade\" tabindex=\"-1\" role=\"dialog\" aria-hidden=\"true\">",
      "\t<div class=\"modal-dialog modal-dialog-centered\" role=\"document\">",
      "\t\t<div class=\"modal-content\">",
      "\t\t\t<div class=\"modal-body\">",
      "\t\t\t\t<p>${2:Content}</p>$0",
      "\t\t\t</div>",
      "\t\t\t<div class=\"modal-footer\">",
      "\t\t\t\t${3:Footer}",
      "\t\t\t</div>",
      "\t\t</div>",
      "\t</div>",
      "</div>"
    ]
  },
  "b-modal-footer": {
    "prefix": "b-modal-footer",
    "body": [
      "<div id=\"${1:my-modal}\" class=\"modal fade\" tabindex=\"-1\" role=\"dialog\" aria-hidden=\"true\">",
      "\t<div class=\"modal-dialog\" role=\"document\">",
      "\t\t<div class=\"modal-content\">",
      "\t\t\t<div class=\"modal-body\">",
      "\t\t\t\t<p>${2:Content}</p>$0",
      "\t\t\t</div>",
      "\t\t\t<div class=\"modal-footer\">",
      "\t\t\t\t${3:Footer}",
      "\t\t\t</div>",
      "\t\t</div>",
      "\t</div>",
      "</div>"
    ]
  },
  "b-modal-full-center": {
    "prefix": "b-modal-full-center",
    "body": [
      "<div id=\"${1:my-modal}\" class=\"modal fade\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"${2:my-modal-title}\" aria-hidden=\"true\">",
      "\t<div class=\"modal-dialog modal-dialog-centered\" role=\"document\">",
      "\t\t<div class=\"modal-content\">",
      "\t\t\t<div class=\"modal-header\">",
      "\t\t\t\t<h5 class=\"modal-title\" id=\"$2\">${3:Title}</h5>",
      "\t\t\t\t<button class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">",
      "\t\t\t\t\t<span aria-hidden=\"true\">&times;</span>",
      "\t\t\t\t</button>",
      "\t\t\t</div>",
      "\t\t\t<div class=\"modal-body\">",
      "\t\t\t\t<p>${4:Content}</p>$0",
      "\t\t\t</div>",
      "\t\t\t<div class=\"modal-footer\">",
      "\t\t\t\t${5:Footer}",
      "\t\t\t</div>",
      "\t\t</div>",
      "\t</div>",
      "</div>"
    ]
  },
  "b-modal-full": {
    "prefix": "b-modal-full",
    "body": [
      "<div id=\"${1:my-modal}\" class=\"modal fade\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"${2:my-modal-title}\" aria-hidden=\"true\">",
      "\t<div class=\"modal-dialog\" role=\"document\">",
      "\t\t<div class=\"modal-content\">",
      "\t\t\t<div class=\"modal-header\">",
      "\t\t\t\t<h5 class=\"modal-title\" id=\"$2\">${3:Title}</h5>",
      "\t\t\t\t<button class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">",
      "\t\t\t\t\t<span aria-hidden=\"true\">&times;</span>",
      "\t\t\t\t</button>",
      "\t\t\t</div>",
      "\t\t\t<div class=\"modal-body\">",
      "\t\t\t\t<p>${4:Content}</p>$0",
      "\t\t\t</div>",
      "\t\t\t<div class=\"modal-footer\">",
      "\t\t\t\t${5:Footer}",
      "\t\t\t</div>",
      "\t\t</div>",
      "\t</div>",
      "</div>"
    ]
  },
  "b-modal-header-center": {
    "prefix": "b-modal-header-center",
    "body": [
      "<div id=\"${1:my-modal}\" class=\"modal fade\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"${2:my-modal-title}\" aria-hidden=\"true\">",
      "\t<div class=\"modal-dialog modal-dialog-centered\" role=\"document\">",
      "\t\t<div class=\"modal-content\">",
      "\t\t\t<div class=\"modal-header\">",
      "\t\t\t\t<h5 class=\"modal-title\" id=\"$2\">${3:Title}</h5>",
      "\t\t\t\t<button class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">",
      "\t\t\t\t\t<span aria-hidden=\"true\">&times;</span>",
      "\t\t\t\t</button>",
      "\t\t\t</div>",
      "\t\t\t<div class=\"modal-body\">",
      "\t\t\t\t<p>${4:Content}</p>$0",
      "\t\t\t</div>",
      "\t\t</div>",
      "\t</div>",
      "</div>"
    ]
  },
  "b-modal-header": {
    "prefix": "b-modal-header",
    "body": [
      "<div id=\"${1:my-modal}\" class=\"modal fade\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"${2:my-modal-title}\" aria-hidden=\"true\">",
      "\t<div class=\"modal-dialog\" role=\"document\">",
      "\t\t<div class=\"modal-content\">",
      "\t\t\t<div class=\"modal-header\">",
      "\t\t\t\t<h5 class=\"modal-title\" id=\"$2\">${3:Title}</h5>",
      "\t\t\t\t<button class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">",
      "\t\t\t\t\t<span aria-hidden=\"true\">&times;</span>",
      "\t\t\t\t</button>",
      "\t\t\t</div>",
      "\t\t\t<div class=\"modal-body\">",
      "\t\t\t\t<p>${4:Content}</p>$0",
      "\t\t\t</div>",
      "\t\t</div>",
      "\t</div>",
      "</div>"
    ]
  },
  "b-modal-toggle": {
    "prefix": "b-modal-toggle",
    "body": [
      "<button class=\"btn btn-${1|primary,secondary,success,danger,warning,info,light,dark,link|}\" type=\"button\" data-toggle=\"modal\" data-target=\"#${2:my-modal}\">${3:Content}</button>"
    ]
  },
  "b-modal": {
    "prefix": "b-modal",
    "body": [
      "<div id=\"${1:my-modal}\" class=\"modal fade\" tabindex=\"-1\" role=\"dialog\" aria-hidden=\"true\">",
      "\t<div class=\"modal-dialog\" role=\"document\">",
      "\t\t<div class=\"modal-content\">",
      "\t\t\t<div class=\"modal-body\">",
      "\t\t\t\t<p>${2:Content}</p>$0",
      "\t\t\t</div>",
      "\t\t</div>",
      "\t</div>",
      "</div>"
    ]
  },
  "b-navbar": {
    "prefix": "b-navbar",
    "body": [
      "<nav class=\"navbar navbar-expand-lg navbar-${1|light,dark|} bg-$1 ${2|fixed-top,fixed-bottom,sticky-top|}\">",
      "\t<a class=\"navbar-brand\">${5:Brand}</a>",
      "\t<button class=\"navbar-toggler\" data-target=\"#${3:my-nav}\" data-toggle=\"collapse\" aria-controls=\"$3\" aria-expanded=\"false\" aria-label=\"${4:Toggle navigation}\">",
      "\t\t<span class=\"navbar-toggler-icon\"></span>",
      "\t</button>",
      "\t<div id=\"$3\" class=\"collapse navbar-collapse\">",
      "\t\t<ul class=\"navbar-nav mr-auto\">",
      "\t\t\t<li class=\"nav-item active\">",
      "\t\t\t\t<a class=\"nav-link\" href=\"#\">${6:Item 1} <span class=\"sr-only\">(current)</span></a>",
      "\t\t\t</li>",
      "\t\t\t<li class=\"nav-item\">",
      "\t\t\t\t<a class=\"nav-link disabled\" href=\"#\" tabindex=\"-1\" aria-disabled=\"true\">${7:Item 2}</a>",
      "\t\t\t</li>$0",
      "\t\t</ul>",
      "\t</div>",
      "</nav>"
    ]
  },
  "b-nav-fill": {
    "prefix": "b-nav-fill",
    "body": [
      "<nav class=\"nav nav-fill\">",
      "\t<li class=\"nav-item\">",
      "\t\t<a class=\"nav-link active\" href=\"#\">${1:Item 1}</a>",
      "\t</li>",
      "\t<li class=\"nav-item\">",
      "\t\t<a class=\"nav-link disabled\" href=\"#\" tabindex=\"-1\" aria-disabled=\"true\">${2:Item 2}</a>",
      "\t</li>$0",
      "</nav>"
    ]
  },
  "b-nav-vertical": {
    "prefix": "b-nav-vertical",
    "body": [
      "<nav class=\"nav flex-column\">",
      "\t<li class=\"nav-item\">",
      "\t\t<a class=\"nav-link active\" href=\"#\">${1:Item 1}</a>",
      "\t</li>",
      "\t<li class=\"nav-item\">",
      "\t\t<a class=\"nav-link disabled\" href=\"#\" tabindex=\"-1\" aria-disabled=\"true\">${2:Item 2}</a>",
      "\t</li>$0",
      "</nav>"
    ]
  },
  "b-nav": {
    "prefix": "b-nav",
    "body": [
      "<nav class=\"nav\">",
      "\t<li class=\"nav-item\">",
      "\t\t<a class=\"nav-link active\" href=\"#\">${1:Item 1}</a>",
      "\t</li>",
      "\t<li class=\"nav-item\">",
      "\t\t<a class=\"nav-link disabled\" href=\"#\" tabindex=\"-1\" aria-disabled=\"true\">${2:Item 2}</a>",
      "\t</li>$0",
      "</nav>"
    ]
  },
  "b-pagination": {
    "prefix": "b-pagination",
    "body": [
      "<nav aria-label=\"${1:Page navigation}\">",
      "\t<ul class=\"pagination\">",
      "\t\t<li class=\"page-item active\" aria-current=\"page\">",
      "\t\t\t<a class=\"page-link\" href=\"#\">${2:Page 1} <span class=\"sr-only\">(current)</span></a>",
      "\t\t</li>",
      "\t\t<li class=\"page-item disabled\">",
      "\t\t\t<a class=\"page-link\" href=\"#\" tabindex=\"-1\" aria-disabled=\"true\">${3:Page 2}</a>",
      "\t\t</li>",
      "\t\t<li class=\"page-item\">",
      "\t\t\t<a class=\"page-link\" href=\"#\">${4:Page 3}</a>",
      "\t\t</li>$0",
      "\t</ul>",
      "</nav>"
    ]
  },
  "b-popover-title": {
    "prefix": "b-popover-title",
    "body": [
      "<button class=\"btn btn-${1|primary,secondary,success,danger,warning,info,light,dark,link|}\" type=\"${2|button,submit,reset|}\" data-toggle=\"popover\" data-placement=\"${3|top,bottom,right,left|}\" data-trigger=\"focus\" title=\"${4:Title}\" data-content=\"${5:Content}\">${6:Text}</button>"
    ]
  },
  "b-popover": {
    "prefix": "b-popover",
    "body": [
      "<button class=\"btn btn-${1|primary,secondary,success,danger,warning,info,light,dark,link|}\" type=\"${2|button,submit,reset|}\" data-toggle=\"popover\" data-placement=\"${3|top,bottom,right,left|}\" data-trigger=\"focus\" data-content=\"${4:Content}\">${5:Text}</button>"
    ]
  },
  "b-progress-striped": {
    "prefix": "b-progress-striped",
    "body": [
      "<div class=\"progress\">",
      "\t<div class=\"progress-bar progress-bar-striped bg-primary\" style=\"width: ${1:25}%\" role=\"progressbar\" aria-valuenow=\"$1\" aria-valuemin=\"0\" aria-valuemax=\"100\">${2:Text}</div>",
      "</div>"
    ]
  },
  "b-progress": {
    "prefix": "b-progress",
    "body": [
      "<div class=\"progress\">",
      "\t<div class=\"progress-bar bg-primary\" style=\"width: ${1:25}%\" role=\"progressbar\" aria-valuenow=\"$1\" aria-valuemin=\"0\" aria-valuemax=\"100\">${2:Text}</div>",
      "</div>"
    ]
  },
  "b-spinner-growing": {
    "prefix": "b-spinner-growing",
    "body": [
      "<div class=\"spinner-grow text-${1|primary,secondary,success,danger,warning,info,light,dark|}\" role=\"status\">",
      "\t<span class=\"sr-only\">${2:Loading...}</span>",
      "</div>"
    ]
  },
  "b-spinner": {
    "prefix": "b-spinner",
    "body": [
      "<div class=\"spinner-border text-${1|primary,secondary,success,danger,warning,info,light,dark|}\" role=\"status\">",
      "\t<span class=\"sr-only\">${2:Loading...}</span>",
      "</div>"
    ]
  },
  "b-toast": {
    "prefix": "b-toast",
    "body": [
      "<div class=\"toast\" role=\"alert\" aria-live=\"assertive\" aria-atomic=\"true\">",
      "\t<div class=\"toast-header\">",
      "\t\t<img class=\"rounded mr-2\" src=\"$1\" alt=\"${2:Toast icon alternate text}\">",
      "\t\t<strong class=\"mr-auto\">${3:Title}</strong>",
      "\t\t<small>${4:Note}</small>",
      "\t\t<button type=\"button\" class=\"ml-2 mb-1 close\" data-dismiss=\"toast\" aria-label=\"Close\">",
      "\t\t\t<span aria-hidden=\"true\">&times;</span>",
      "\t\t</button>",
      "\t</div>",
      "\t<div class=\"toast-body\">",
      "\t\t$0",
      "\t</div>",
      "</div>"
    ]
  },
  "b-figure": {
    "prefix": "b-figure",
    "body": [
      "<figure class=\"figure\">",
      "\t<img class=\"figure-img img-fluid\" src=\"$2\" alt=\"$3\">",
      "\t<figcaption class=\"figure-caption\">${1:Content}</figcaption>",
      "</figure>"
    ]
  },
  "b-img-fluid": {
    "prefix": "b-img-fluid",
    "body": ["<img class=\"img-fluid\" src=\"$1\" alt=\"$2\">"]
  },
  "b-img-thumbnail": {
    "prefix": "b-img-thumbnail",
    "body": ["<img class=\"img-thumbnail\" src=\"$1\" alt=\"$2\">"]
  },
  "b-col": {
    "prefix": "b-col",
    "body": ["<div class=\"col\">", "\t$0", "</div>"]
  },
  "b-row": {
    "prefix": "b-row",
    "body": ["<div class=\"row\">", "\t$0", "</div>"]
  },
  "b-container-fluid": {
    "prefix": "b-container-fluid",
    "body": ["<div class=\"container-fluid\">", "\t$0", "</div>"]
  },
  "b-container": {
    "prefix": "b-container",
    "body": ["<div class=\"container\">", "\t$0", "</div>"]
  },
  "b-table-footer": {
    "prefix": "b-table-footer",
    "body": [
      "<table class=\"table table-${1|light,dark|}\">",
      "\t<tbody>",
      "\t\t<tr>",
      "\t\t\t<td>$2</td>",
      "\t\t</tr>$0",
      "\t</tbody>",
      "\t<tfoot>",
      "\t\t<tr>",
      "\t\t\t<th>#</th>",
      "\t\t</tr>",
      "\t</tfoot>",
      "</table>"
    ]
  },
  "b-table-full": {
    "prefix": "b-table-full",
    "body": [
      "<table class=\"table table-${1|light,dark|}\">",
      "\t<thead class=\"thead-${2|light,dark|}\">",
      "\t\t<tr>",
      "\t\t\t<th>#</th>",
      "\t\t</tr>",
      "\t</thead>",
      "\t<tbody>",
      "\t\t<tr>",
      "\t\t\t<td>$3</td>",
      "\t\t</tr>$0",
      "\t</tbody>",
      "\t<tfoot>",
      "\t\t<tr>",
      "\t\t\t<th>#</th>",
      "\t\t</tr>",
      "\t</tfoot>",
      "</table>"
    ]
  },
  "b-table-header": {
    "prefix": "b-table-header",
    "body": [
      "<table class=\"table table-${1|light,dark|}\">",
      "\t<thead class=\"thead-${2|light,dark|}\">",
      "\t\t<tr>",
      "\t\t\t<th>#</th>",
      "\t\t</tr>",
      "\t</thead>",
      "\t<tbody>",
      "\t\t<tr>",
      "\t\t\t<td>$3</td>",
      "\t\t</tr>$0",
      "\t</tbody>",
      "</table>"
    ]
  },
  "b-table": {
    "prefix": "b-table",
    "body": [
      "<table class=\"table table-${1|light,dark|}\">",
      "\t<tbody>",
      "\t\t<tr>",
      "\t\t\t<td>$2</td>",
      "\t\t</tr>$0",
      "\t</tbody>",
      "</table>"
    ]
  },
  "b-abbr-initialism": {
    "prefix": "b-abbr-initialism",
    "body": ["<abbr class=\"initialism\" title=\"${1:Title}\">${2:Text}</abbr>"]
  },
  "b-abbr": {
    "prefix": "b-abbr",
    "body": ["<abbr title=\"${1:Title}\">${2:Text}</abbr>"]
  },
  "b-blockquote-footer": {
    "prefix": "b-blockquote-footer",
    "body": [
      "<blockquote class=\"blockquote\">",
      "\t<p class=\"mb-0\">${1:Text}</p>",
      "\t<footer class=\"blockquote-footer\">${2:Footer}</footer>",
      "</blockquote>"
    ]
  },
  "b-blockquote": {
    "prefix": "b-blockquote",
    "body": [
      "<blockquote class=\"blockquote\">",
      "\t<p class=\"mb-0\">${1:Text}</p>",
      "</blockquote>"
    ]
  },
  "b-display": {
    "prefix": "b-display",
    "body": ["<h1 class=\"display-${1|1,2,3,4|}\">${2:Text}</h1>"]
  },
  "b-list-inline": {
    "prefix": "b-list-inline",
    "body": [
      "<ul class=\"list-inline\">",
      "\t<li class=\"list-inline-item\">${1:Text}</li>$0",
      "</ul>"
    ]
  },
  "b-list-unstyled": {
    "prefix": "b-list-unstyled",
    "body": ["<ul class=\"list-unstyled\">", "\t<li>${1:Text}</li>$0", "</ul>"]
  },
  "b-clearfix": {
    "prefix": "b-clearfix",
    "body": [
      "<div class=\"clearfix\">",
      "\t<div class=\"float-left\">",
      "\t\t$0",
      "\t</div>",
      "\t<div class=\"float-right\">",
      "\t\t",
      "\t</div>",
      "</div>"
    ]
  },
  "b-embed-responsive": {
    "prefix": "b-embed-responsive",
    "body": [
      "<div class=\"embed-responsive embed-responsive-${1|16by9,21by9,4by3,1by1|}\">",
      "\t<iframe class=\"embed-responsive-item\" src=\"$2\"></iframe>",
      "</div>"
    ]
  },
  "b-flex-column-reverse": {
    "prefix": "b-flex-column-reverse",
    "body": ["<div class=\"d-flex flex-column-reverse\">", "\t$0", "</div>"]
  },
  "b-flex-column": {
    "prefix": "b-flex-column",
    "body": ["<div class=\"d-flex flex-column\">", "\t$0", "</div>"]
  },
  "b-flex-row-reverse": {
    "prefix": "b-flex-row-reverse",
    "body": ["<div class=\"d-flex flex-row-reverse\">", "\t$0", "</div>"]
  },
  "b-flex-row": {
    "prefix": "b-flex-row",
    "body": ["<div class=\"d-flex flex-row\">", "\t$0", "</div>"]
  },
  "b-float-left": {
    "prefix": "b-float-left",
    "body": ["<div class=\"float-left\">", "\t$0", "</div>"]
  },
  "b-float-right": {
    "prefix": "b-float-right",
    "body": ["<div class=\"float-right\">", "\t$0", "</div>"]
  },
  "abs": {
    "prefix": "abs",
    "body": "abs(x)",
    "description": "Returns the absolute value of a number"
  },
  "built_in.abs=>int": {
    "prefix": "built_in.abs=>int",
    "body": ["x = abs(-7.25)", "print(x)"],
    "description": "An example for using abs method"
  },
  "built_in.abs=>float": {
    "prefix": "built_in.abs=>float",
    "body": ["x = abs(-20)", "print(x)"],
    "description": "An example for using abs method"
  },
  "built_in.abs=>complex": {
    "prefix": "built_in.abs=>complex",
    "body": ["x = abs((3 - 4j))", "print(x)"],
    "description": "An example for using abs method"
  },
  "all": {
    "prefix": "all",
    "body": "all(iterable)",
    "description": "Returns True if all items in an iterable object are true"
  },
  "built_in.all=>list_1": {
    "prefix": "built_in.all=>list_1",
    "body": [
      "mylist = [True, True, True]",
      "x = all(mylist)",
      "print(x)",
      "",
      "# Return True"
    ],
    "description": "An example for using all with list"
  },
  "built_in.all=>list_2": {
    "prefix": "built_in.all=>list_2",
    "body": [
      "mylist = [0, 1, 1]",
      "x = all(mylist)",
      "print(x)",
      "",
      "# Returns False because 0 is the same as False"
    ],
    "description": "An example for using all with list"
  },
  "built_in.all=>tuple": {
    "prefix": "built_in.all=>tuple",
    "body": [
      "mytuple = (0, True, False)",
      "x = all(mytuple)",
      "print(x)",
      "",
      "# Returns False because both the first and the third items are False"
    ],
    "description": "An example for using all with tuple"
  },
  "built_in.all=>set": {
    "prefix": "built_in.all=>set",
    "body": [
      "myset = {0, 1, 0}",
      "x = all(myset)",
      "print(x)",
      "",
      "# Returns False because both the first and the third items are False"
    ],
    "description": "An example for using all with set"
  },
  "built_in.all=>dictionary": {
    "prefix": "built_in.all=>dictionary",
    "body": [
      "mydict = {0 : 'Apple', 1 : 'Orange'}",
      "x = all(mydict)",
      "print(x)",
      "",
      "# Returns False because the first key is false.",
      "# For dictionaries the all() function checks the keys, not the values."
    ],
    "description": "An example for using all with dictionary"
  },
  "any": {
    "prefix": "any",
    "body": "any(iterable)",
    "description": "Returns True if any item in an iterable object is true"
  },
  "built_in.any=>list_1": {
    "prefix": "built_in.any=>list_1",
    "body": [
      "mylist = [False, True, False]",
      "x = any(mylist)",
      "print(x)",
      "",
      "# Return True"
    ],
    "description": "An example for using all with list"
  },
  "ascii": {
    "prefix": "ascii",
    "body": "ascii(object)",
    "description": "Returns a readable version of an object. Replaces none-ascii characters with escape character"
  },
  "built_in.ascii=>_1": {
    "prefix": "built_in.ascii=>_list_1",
    "body": ["x = ascii('My name is Ståle')", "print(x)"],
    "description": "An example for using ascii"
  },
  "bin": {
    "prefix": "bin",
    "body": "bin(x)",
    "description": "Returns the binary version of a number"
  },
  "built_in.bin=>_1": {
    "prefix": "built_in.bin=>_1",
    "body": ["x = bin(36)", "print(x)", "# Result : 0b100100"],
    "description": "An example for using ascii"
  },
  "bool": {
    "prefix": "bool",
    "body": "bool(object)",
    "description": "Returns the boolean value of the specified object"
  },
  "built_in.bool=>_1": {
    "prefix": "built_in.bool=>_1",
    "body": ["x = bool(1)", "print(x)", "# Result : True"],
    "description": "An example for using bool"
  },
  "bytearray": {
    "prefix": "bytearray",
    "body": "bytearray([source[, encoding[, errors]]])",
    "description": "Returns an array of bytes"
  },
  "built_in.bytearray=>_1": {
    "prefix": "built_in.bytearray=>_1",
    "body": ["x = bytearray(4)", "print(x)"],
    "description": "An example for using bool"
  },
  "bytes": {
    "prefix": "bytes",
    "body": "bytes(x, encoding, error)",
    "description": "Returns a bytes object"
  },
  "built_in.bytes=>_1": {
    "prefix": "built_in.bytes=>_1",
    "body": ["x = x = bytes(4)", "print(x)"],
    "description": "An example for using bytes"
  },
  "callable": {
    "prefix": "callable",
    "body": "callable(object)",
    "description": "Returns True if the specified object is callable, otherwise False"
  },
  "built_in.callable=>_1": {
    "prefix": "built_in.callable=>_1",
    "body": ["def x():", "a = 5", "", "print(callable(x))"],
    "description": "An example for using callable"
  },
  "built_in.callable=>_2": {
    "prefix": "built_in.callable=>_2",
    "body": ["x = 5", "", "print(callable(x))"],
    "description": "An example for using bytes"
  },
  "chr": {
    "prefix": "chr",
    "body": "chr(i)",
    "description": "Returns a character from the specified Unicode code."
  },
  "built_in.chr=>_1": {
    "prefix": "built_in.chr=>_1",
    "body": ["x = chr(97)", "", "print(x)"],
    "description": "An example for using bytes"
  },
  "classmethod": {
    "prefix": "classmethod",
    "body": "classmethod(function)",
    "description": "Converts a method into a class method"
  },
  "compile": {
    "prefix": "compile",
    "body": "compile(source, filename, mode, flag, dont_inherit, optimize)",
    "description": "Returns the specified source as an object, ready to be executed"
  },
  "built_in.compile=>_1": {
    "prefix": "built_in.compile=>_1",
    "body": [
      "mytext = 'print(55)'",
      "x = compile('mytext', 'test', 'eval')",
      "exec(x)"
    ],
    "description": "An example for using compile"
  },
  "built_in.compile=>_2": {
    "prefix": "built_in.compile=>_1",
    "body": [
      "mytext = 'print(55)\nprint(88)'",
      "x = compile('mytext', 'test', 'exec')",
      "exec(x)"
    ],
    "description": "An example for using compile"
  },
  "complex": {
    "prefix": "complex",
    "body": "complex(real, imaginary)",
    "description": "Returns a complex number"
  },
  "built_in.complex=>_1": {
    "prefix": "built_in.complex=>_1",
    "body": ["x = complex(3, 5)", "print(x)"],
    "description": "An example for using complex"
  },
  "built_in.complex=>_2": {
    "prefix": "built_in.complex=>_2",
    "body": ["x = complex('3+5j')", "print(x)"],
    "description": "An example for using complex"
  },
  "delattr": {
    "prefix": "delattr",
    "body": "delattr(object, attribute)",
    "description": "Deletes the specified attribute (property or method) from the specified object"
  },
  "built_in.delattr=>_1": {
    "prefix": "built_in.delattr=>_1",
    "body": [
      "class Person:",
      " name = 'John'",
      " age = 36",
      " country = 'Norway'",
      "",
      "delattr(Person, 'age')",
      "# The Person object will no longer contain an age property"
    ],
    "description": "An example for using delattr"
  },
  "dict": {
    "prefix": "dict",
    "body": "dict(keyword arguments)",
    "description": "Returns a dictionary (Array)"
  },
  "built_in.dict=>_1": {
    "prefix": "built_in.dict=>_1",
    "body": [
      "x = dict(name = 'John', age = 36, country = 'Norway')",
      "print(x)"
    ],
    "description": "An example for using dict"
  },
  "dir": {
    "prefix": "dir",
    "body": "dir(object)",
    "description": "Returns a list of the specified object's properties and methods"
  },
  "built_in.dir=>": {
    "prefix": "built_in.dir=>",
    "body": [
      "class Person:",
      " name = 'John'",
      " age = 36",
      " country = 'Norway'",
      "print(dir(Person))"
    ],
    "description": "An example for using dict"
  },
  "divmod": {
    "prefix": "divmod",
    "body": "divmod(divident, divisor)",
    "description": "Returns the quotient and the remainder when argument1 is divided by argument2"
  },
  "built_in.divmod=>_1": {
    "prefix": "built_in.divmod=>_1",
    "body": ["x = divmod(5, 2)", "print(x)"],
    "description": "An example for using divmod"
  },
  "enumerate": {
    "prefix": "enumerate",
    "body": "enumerate(iterable, start)",
    "description": "Takes a collection (e.g. a tuple) and returns it as an enumerate object"
  },
  "built_in.enumerate=>_1": {
    "prefix": "built_in.enumerate=>_1",
    "body": [
      "x = ('apple', 'banana', 'cherry')",
      "y = enumerate(x)",
      "",
      "print(list(y))"
    ],
    "description": "An example for using enumerate"
  },
  "eval": {
    "prefix": "eval",
    "body": "eval(expression, globals, locals)",
    "description": "Evaluates and executes an expression"
  },
  "built_in.eval=>_1": {
    "prefix": "built_in.eval=>_1",
    "body": ["x = 'print(55)'", "eval(x)"],
    "description": "An example for using eval"
  },
  "exec": {
    "prefix": "exec",
    "body": "exec(object, globals, locals)",
    "description": "Executes the specified code (or object)"
  },
  "built_in.exec=>_1": {
    "prefix": "built_in.exec=>_1",
    "body": ["x = 'age = 25\nprint(age)'", "exec(x)"],
    "description": "An example for using exec"
  },
  "filter": {
    "prefix": "filter",
    "body": "filter(function, iterable)",
    "description": "Use a filter function to exclude items in an iterable object"
  },
  "built_in.filter=>_1": {
    "prefix": "built_in.filter=>_1",
    "body": [
      "ages = [5, 12, 17, 18, 24, 32]",
      "",
      "def myFunc(x):",
      " if x < 18:",
      "   return False",
      " else:",
      "   return True",
      "",
      "adults = filter(myFunc, ages)",
      "",
      "for x in adults:",
      " print(x)"
    ],
    "description": "An example for using filter"
  },
  "float": {
    "prefix": "float",
    "body": "float(value)",
    "description": "Returns a floating point number"
  },
  "built_in.float=>_1": {
    "prefix": "built_in.float=>_1",
    "body": ["x = float(3)", "print(x)"],
    "description": "An example for using float"
  },
  "built_in.float=>_2": {
    "prefix": "built_in.float=>_2",
    "body": ["x = float('3.500')", "print(x)"],
    "description": "An example for using float"
  },
  "format": {
    "prefix": "format",
    "body": "format(value, format)",
    "description": "Formats a specified value"
  },
  "built_in.format=>_1": {
    "prefix": "built_in.format=>_1",
    "body": ["x = format(0.5, '%')", "print(x)"],
    "description": "An example for using format"
  },
  "built_in.format=>_1": {
    "prefix": "built_in.format=>_1",
    "body": ["x = format(255, 'x')", "print(x)"],
    "description": "An example for using format"
  },
  "frozenset": {
    "prefix": "frozenset",
    "body": "frozenset(iterable)",
    "description": "Returns a frozenset object"
  },
  "built_in.frozenset=>_1": {
    "prefix": "built_in.frozenset=>_1",
    "body": [
      "mylist = ['apple', 'banana', 'cherry']",
      "x = frozenset(mylist)",
      "print(x)"
    ],
    "description": "An example for using frozenset"
  },
  "built_in.frozenset=>_2": {
    "prefix": "built_in.frozenset=>_2",
    "body": [
      "mylist = ['apple', 'banana', 'cherry']",
      "x = frozenset(mylist)",
      "x[1] = 'strawberry'",
      "print(x)"
    ],
    "description": "An example for using frozenset"
  },
  "getattr": {
    "prefix": "getattr",
    "body": "getattr(object, attribute, default)",
    "description": "Returns the value of the specified attribute (property or method)"
  },
  "built_in.frozenset=>_3": {
    "prefix": "built_in.frozenset=>_3",
    "body": [
      "class Person:",
      " name = 'John'",
      " age = 36",
      " country = 'Norway'",
      "",
      "x = getattr(Person, 'age')",
      "",
      "print(x)"
    ],
    "description": "An example for using frozenset"
  },
  "globals": {
    "prefix": "globals",
    "body": "globals()",
    "description": "Returns the current global symbol table as a dictionary"
  },
  "built_in.globals=>_1": {
    "prefix": "built_in.globals=>_1",
    "body": ["x = globals()", "print(x)"],
    "description": "An example for using globals"
  },
  "built_in.globals=>_2": {
    "prefix": "built_in.globals=>_2",
    "body": ["x = globals()", "print(x['__file__'])"],
    "description": "An example for using globals"
  },
  "hasattr": {
    "prefix": "hasattr",
    "body": "hasattr(object, attribute)",
    "description": "Returns True if the specified object has the specified attribute (property/method)"
  },
  "built_in.hasattr=>": {
    "prefix": "built_in.hasattr=>",
    "body": [
      "class Person:",
      " name = 'John'",
      " age = 36",
      " country = 'Norway'",
      "",
      "x = hasattr(Person, 'age')",
      "",
      "print(x)"
    ],
    "description": "An example for using hasattr"
  },
  "hash": {
    "prefix": "hash",
    "body": "hash(object)",
    "description": "Returns the hash value of a specified object"
  },
  "help": {
    "prefix": "help",
    "body": "help(object)",
    "description": "Executes the built-in help system"
  },
  "hex": {
    "prefix": "hex",
    "body": "hex(number)",
    "description": "Converts a number into a hexadecimal value"
  },
  "built_in.hex=>": {
    "prefix": "built_in.hex=>",
    "body": ["x = hex(255)", "print(x)"],
    "description": "An example for using hasattr"
  },
  "int": {
    "prefix": "int",
    "body": "int(value, base)",
    "description": "Returns an integer number"
  },
  "built_in.int=>_1": {
    "prefix": "built_in.int=>_1",
    "body": ["x = int(3.5)", "print(x)"],
    "description": "An example for using int"
  },
  "built_in.int=>_2": {
    "prefix": "built_in.int=>_2",
    "body": ["x = int('12')", "print(x)"],
    "description": "An example for using int"
  },
  "id": {
    "prefix": "id",
    "body": "id(object)",
    "description": "Returns the id of an object"
  },
  "built_in.id=>": {
    "prefix": "built_in.id=>",
    "body": [
      "class Foo:",
      "b = 5",
      "",
      "dummyFoo = Foo()",
      "print('id of dummyFoo =',id(dummyFoo))"
    ],
    "description": "An example for using id"
  },
  "input": {
    "prefix": "input",
    "body": "input(prompt)",
    "description": "Allowing user input"
  },
  "built_in.input=>_1": {
    "prefix": "built_in.input=>_1",
    "body": ["x = input('Enter your name:')", "print('Hello, ' + x)"],
    "description": "An example for using input"
  },
  "built_in.input=>_2": {
    "prefix": "built_in.input=>_2",
    "body": [
      "print('Enter your name:')",
      "x = input()",
      "print('Hello, ' + x)"
    ],
    "description": "An example for using input"
  },
  "isinstance": {
    "prefix": "isinstance",
    "body": "isinstance(object, type)",
    "description": "Returns True if a specified object is an instance of a specified object"
  },
  "built_in.isinstance=>_1": {
    "prefix": "built_in.isinstance=>_1",
    "body": ["x = isinstance(5, int)", "", "print(x)"],
    "description": "An example for using isinstance"
  },
  "built_in.isinstance=>_2": {
    "prefix": "built_in.isinstance=>_2",
    "body": [
      "x = isinstance('Hello', (float, int, str, list, dict, tuple))",
      "",
      "print(x)"
    ],
    "description": "An example for using isinstance"
  },
  "built_in.isinstance=>_3": {
    "prefix": "built_in.isinstance=>_3",
    "body": [
      "class myObj:",
      " name = 'John'",
      "",
      "y = myObj()",
      "",
      "x = isinstance(y, myObj)",
      "print(x)"
    ],
    "description": "An example for using isinstance"
  },
  "issubclass": {
    "prefix": "issubclass",
    "body": "issubclass(object, subclass)",
    "description": "Returns True if a specified class is a subclass of a specified object"
  },
  "built_in.issubclass=>": {
    "prefix": "built_in.issubclass=>",
    "body": [
      "class myAge:",
      " age = 36",
      "",
      "class myObj(myAge):",
      " name = 'John'",
      " age = myAge",
      "",
      " x = issubclass(myObj, myAge)",
      "",
      "print(x)"
    ],
    "description": "An example for using isinstance"
  },
  "iter": {
    "prefix": "iter",
    "body": "iter(object, subclass)",
    "description": "Returns an iterator object"
  },
  "built_in.iter=>": {
    "prefix": "built_in.iter=>",
    "body": [
      "x = iter(['apple', 'banana', 'cherry'])",
      "print(next(x))",
      "print(next(x))",
      "print(next(x))"
    ],
    "description": "An example for using iter"
  },
  "len": {
    "prefix": "len",
    "body": "len(s)",
    "description": "Returns the length of an object"
  },
  "built_in.len=>_1": {
    "prefix": "built_in.len=>_1",
    "body": ["mylist = ['apple', 'banana', 'cherry']", "x = len(mylist)"],
    "description": "An example for using len"
  },
  "built_in.len=>_2": {
    "prefix": "built_in.len=>_2",
    "body": ["mylist = 'Hello'", "x = len(mylist)"],
    "description": "An example for using len"
  },
  "list": {
    "prefix": "list",
    "body": "list([iterable])",
    "description": "Returns a list"
  },
  "built_in.list=>": {
    "prefix": "built_in.list=>",
    "body": ["x = list(('apple', 'banana', 'cherry'))", "print(x)"],
    "description": "An example for using list"
  },
  "locals": {
    "prefix": "locals",
    "body": "locals()",
    "description": "Returns an updated dictionary of the current local symbol table"
  },
  "built_in.locals=>_1": {
    "prefix": "built_in.locals=>_1",
    "body": ["x = locals()", "print(x)"],
    "description": "An example for using locals"
  },
  "built_in.locals=>_2": {
    "prefix": "built_in.locals=>_2",
    "body": ["x = locals()", "print(x['__file__'])"],
    "description": "An example for using locals"
  },
  "map": {
    "prefix": "map",
    "body": "map(function, iterables)",
    "description": "Returns the specified iterator with the specified function applied to each item"
  },
  "built_in.map=>_1": {
    "prefix": "built_in.map=>_1",
    "body": [
      "def myfunc(n):",
      " return len(n)",
      "",
      "x = map(myfunc, ('apple', 'banana', 'cherry'))",
      "",
      "print(x)"
    ],
    "description": "An example for using map"
  },
  "built_in.map=>_2": {
    "prefix": "built_in.map=>_2",
    "body": [
      "def myfunc(a, b):",
      " return a + b",
      "",
      "x = map(myfunc, ('apple', 'banana', 'cherry'), ('orange', 'lemon', 'pineapple'))",
      "",
      "print(x)"
    ],
    "description": "An example for using map"
  },
  "max": {
    "prefix": "max",
    "body": "max(iterable)",
    "description": "Returns the largest item in an iterable"
  },
  "built_in.max=>_1": {
    "prefix": "built_in.max=>_1",
    "body": ["x = max(5, 10)", "print(x)"],
    "description": "An example for using max"
  },
  "built_in.max=>_2": {
    "prefix": "built_in.max=>_2",
    "body": ["x = max('Mike', 'John', 'Vicky')", "print(x)"],
    "description": "An example for using max"
  },
  "built_in.max=>_3": {
    "prefix": "built_in.max=>_3",
    "body": ["a = (1, 5, 3, 9)", "x = max(a)", "print(x)"],
    "description": "An example for using max"
  },
  "memoryview": {
    "prefix": "memoryview",
    "body": "memoryview(obj)",
    "description": "Returns a memory view object"
  },
  "built_in.memoryview=>": {
    "prefix": "built_in.memoryview=>",
    "body": [
      "x = memoryview(b'Hello')",
      "print(x)",
      "",
      "#return the Unicode of the first character",
      "print(x[0])",
      "",
      "#return the Unicode of the second character",
      "print(x[1])"
    ],
    "description": "An example for using memoryview"
  },
  "min": {
    "prefix": "min",
    "body": "min(iterable)",
    "description": "Returns the smallest item in an iterable"
  },
  "built_in.min=>_1": {
    "prefix": "built_in.min=>_1",
    "body": ["x = min(5, 10)", "print(x)"],
    "description": "An example for using min"
  },
  "built_in.min=>_2": {
    "prefix": "built_in.min=>_2",
    "body": ["x = min('Mike', 'John', 'Vicky')", "print(x)"],
    "description": "An example for using min"
  },
  "built_in.min=>_3": {
    "prefix": "built_in.min=>_3",
    "body": ["a = (1, 5, 3, 9)", "x = min(a)", "print(x)"],
    "description": "An example for using min"
  },
  "next": {
    "prefix": "next",
    "body": "next(iterable, default)",
    "description": "Returns the next item in an iterable"
  },
  "built_in.next=>_1": {
    "prefix": "built_in.next=>_1",
    "body": [
      "mylist = iter(['apple', 'banana', 'cherry'])",
      "x = next(mylist)",
      "print(x)",
      "x = next(mylist)",
      "print(x)",
      "x = next(mylist)",
      "print(x)"
    ],
    "description": "An example for using next"
  },
  "built_in.next=>_2": {
    "prefix": "built_in.next=>_2",
    "body": [
      "mylist = iter(['apple', 'banana', 'cherry'])",
      "x = next(mylist, 'orange')",
      "print(x)",
      "x = next(mylist, 'orange')",
      "print(x)",
      "x = next(mylist, 'orange')",
      "print(x)",
      "x = next(mylist, 'orange')",
      "print(x)"
    ],
    "description": "An example for using next"
  },
  "object": {
    "prefix": "object",
    "body": "object()",
    "description": "Returns a new object"
  },
  "built_in.object=>": {
    "prefix": "built_in.object=>",
    "body": ["x = object()", "print(dir(x))"],
    "description": "An example for using object"
  },
  "oct": {
    "prefix": "oct",
    "body": "oct(x)",
    "description": "Converts a number into an octal"
  },
  "built_in.oct=>": {
    "prefix": "built_in.oct=>",
    "body": ["x = oct(12)", "print(x)"],
    "description": "An example for using oct"
  },
  "open": {
    "prefix": "open",
    "body": "open(file, mode)",
    "description": "Opens a file and returns a file object"
  },
  "built_in.open=>": {
    "prefix": "built_in.open=>",
    "body": ["f = open('demofile.txt', 'r')", "print(f.read())"],
    "description": "An example for using open"
  },
  "ord": {
    "prefix": "ord",
    "body": "ord(c)",
    "description": "Given a string of length one, return an integer representing the Unicode code point of the character when the argument is a unicode object, or the value of the byte when the argument is an 8-bit string."
  },
  "built_in.ord=>": {
    "prefix": "built_in.ord=>",
    "body": ["x=ord('a')", "print(x)"],
    "description": "An example for using ord"
  },
  "pow": {
    "prefix": "pow",
    "body": "pow(x, y)",
    "description": "Return x to the power y"
  },
  "built_in.pow=>": {
    "prefix": "built_in.pow=>",
    "body": ["x=pow(2,5)", "print(x)"],
    "description": "An example for using pow"
  },
  "print": {
    "prefix": "print",
    "body": "print(object(s), separator=separator, end=end, file=file, flush=flush)",
    "description": "Prints to the standard output device"
  },
  "built_in.print=>_1": {
    "prefix": "built_in.print=>_1",
    "body": ["print('Hello', 'how are you?')"],
    "description": "An example for using print"
  },
  "built_in.print=>_2": {
    "prefix": "built_in.print=>_2",
    "body": ["x = ('apple', 'banana', 'cherry')", "print(x)"],
    "description": "An example for using print"
  },
  "built_in.print=>_3": {
    "prefix": "built_in.print=>_3",
    "body": ["print('Hello', 'how are you?', sep=' ---')"],
    "description": "An example for using print"
  },
  "property": {
    "prefix": "property",
    "body": "property(fget=None, fset=None, fdel=None, doc=None)",
    "description": "Gets, sets, deletes a property"
  },
  "built_in.property=>": {
    "prefix": "built_in.property=>",
    "body": [
      "class C:",
      "    def __init__(self):",
      "        self._x = None",
      "    def getx(self):",
      "        return self._x",
      "    def setx(self, value):",
      "        self._x = value",
      "    def delx(self):",
      "        del self._x",
      "    x = property(getx, setx, delx, 'I'm the 'x' property.')"
    ],
    "description": "An example for using property"
  },
  "range": {
    "prefix": "range",
    "body": "range(start, stop, step)",
    "description": "Returns a sequence of numbers, starting from 0 and increments by 1 (by default)"
  },
  "built_in.range=>_1": {
    "prefix": "built_in.range=>_1",
    "body": ["x = range(6)", "for n in x:", "  print(n)"],
    "description": "An example for using range"
  },
  "built_in.range=>_2": {
    "prefix": "built_in.range=>_2",
    "body": ["x = range(3, 6)", "for n in x:", "  print(n)"],
    "description": "An example for using range"
  },
  "built_in.range=>_3": {
    "prefix": "built_in.range=>_3",
    "body": ["x = range(3, 20, 2)", "for n in x:", "  print(n)"],
    "description": "An example for using range"
  },
  "repr": {
    "prefix": "repr",
    "body": "repr(object)",
    "description": "Returns a readable version of an object"
  },
  "reversed": {
    "prefix": "reversed",
    "body": "reversed(seq)",
    "description": "Returns a reversed iterator"
  },
  "built_in.reversed=>": {
    "prefix": "built_in.reversed=>",
    "body": [
      "alph = ['a', 'b', 'c', 'd']",
      "ralph = reversed(alph)",
      "for x in ralph:",
      "  print(x)"
    ],
    "description": "An example for using reversed"
  },
  "round": {
    "prefix": "round",
    "body": "round(number[, ndigits])",
    "description": "Rounds a numbers"
  },
  "built_in.round=>_1": {
    "prefix": "built_in.round=>_1",
    "body": ["x = round(5.76543, 2)", "print(x)"],
    "description": "An example for using round"
  },
  "built_in.round=>_2": {
    "prefix": "built_in.round=>_2",
    "body": ["x = round(5.76543)", "print(x)"],
    "description": "An example for using round"
  },
  "set": {
    "prefix": "set",
    "body": "set(iterable)",
    "description": "Returns a new set object"
  },
  "built_in.set=>": {
    "prefix": "built_in.set=>",
    "body": ["x = set(('apple', 'banana', 'cherry'))", "print(x)"],
    "description": "An example for using set"
  },
  "setattr": {
    "prefix": "setattr",
    "body": "setattr(object, name, value)",
    "description": "Sets an attribute (property/method) of an object"
  },
  "built_in.setattr=>": {
    "prefix": "built_in.setattr=>",
    "body": [
      "class Person:",
      "  name = 'John'",
      "  age = 36",
      "  country = 'Norway'",
      "setattr(Person, 'age', 40)",
      "# The age property will now have the value: 40",
      "x = getattr(Person, 'age')",
      "print(x)"
    ],
    "description": "An example for using setattr"
  },
  "slice": {
    "prefix": "slice",
    "body": "slice(start, end, step)",
    "description": "Returns a slice object"
  },
  "built_in.slice=>_1": {
    "prefix": "built_in.slice=>_1",
    "body": [
      "a = ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h')",
      "x = slice(2)",
      "print(a[x])"
    ],
    "description": "An example for using slice"
  },
  "built_in.slice=>_2": {
    "prefix": "built_in.slice=>_2",
    "body": [
      "a = ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h')",
      "x = slice(3, 5)",
      "print(a[x])"
    ],
    "description": "An example for using slice"
  },
  "built_in.slice=>_3": {
    "prefix": "built_in.slice=>_3",
    "body": [
      "a = ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h')",
      "x = slice(0, 8, 3)",
      "print(a[x])"
    ],
    "description": "An example for using slice"
  },
  "sorted": {
    "prefix": "sorted",
    "body": "sorted(iterable, key=key, reverse=reverse)",
    "description": "Returns a sorted list"
  },
  "built_in.sorted=>_1": {
    "prefix": "built_in.sorted=>_1",
    "body": [
      "a = ('b', 'g', 'a', 'd', 'f', 'c', 'h', 'e')",
      "x = sorted(a)",
      "print(x)"
    ],
    "description": "An example for using sorted"
  },
  "built_in.sorted=>_2": {
    "prefix": "built_in.sorted=>_2",
    "body": [
      "a = ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h')",
      "x = sorted(a, reverse=True)",
      "print(x)"
    ],
    "description": "An example for using sorted"
  },
  "built_in.sorted=>_3": {
    "prefix": "built_in.sorted=>_3",
    "body": [
      "a = ('b', 'g', 'a', 'd', 'f', 'c', 'h', 'e')",
      "x = sorted(a)",
      "print(x)"
    ],
    "description": "An example for using sorted"
  },
  "staticmethod": {
    "prefix": "staticmethod",
    "body": "staticmethod(function)",
    "description": "Converts a method into a static method"
  },
  "str": {
    "prefix": "str",
    "body": "str(object, encoding=encoding, errors=errors)",
    "description": "Returns a string object"
  },
  "built_in.str=>": {
    "prefix": "built_in.str=>",
    "body": ["x = str(3.5)", "print(x)"],
    "description": "An example for using str"
  },
  "sum": {
    "prefix": "sum",
    "body": "sum(iterable, start)",
    "description": "Sums the items of an iterator"
  },
  "built_in.sum=>_1": {
    "prefix": "built_in.sum=>_1",
    "body": ["a = (1, 2, 3, 4, 5)", "x = sum(a)", "print(x)"],
    "description": "An example for using sum"
  },
  "built_in.sum=>_2": {
    "prefix": "built_in.sum=>_2",
    "body": ["a = (1, 2, 3, 4, 5)", "x = sum(a, 7)", "print(x)"],
    "description": "An example for using sum"
  },
  "super": {
    "prefix": "super",
    "body": "super(type[, object-or-type])",
    "description": "Return a proxy object that delegates method calls to a parent or sibling class of type."
  },
  "tuple": {
    "prefix": "tuple",
    "body": "tuple(iterable)",
    "description": "Returns a tuple"
  },
  "built_in.tuple=>": {
    "prefix": "built_in.tuple=>",
    "body": ["x = tuple(('apple', 'banana', 'cherry'))", "print(x)"],
    "description": "An example for using tuple"
  },
  "type": {
    "prefix": "type",
    "body": "type(object, bases, dict)",
    "description": "Returns the type of an object"
  },
  "built_in.type=>": {
    "prefix": "built_in.type=>",
    "body": [
      "a = ('apple', 'banana', 'cherry')",
      "b = 'Hello World'",
      "c = 33",
      "x = type(a)",
      "y = type(b)",
      "z = type(c)"
    ],
    "description": "An example for using type"
  },
  "unichr": {
    "prefix": "unichr",
    "body": "unichr(i)",
    "description": "Return the Unicode string of one character whose Unicode code is the integer i."
  },
  "vars": {
    "prefix": "vars",
    "body": "vars(object)",
    "description": "Returns the __dict__ property of an object"
  },
  "built_in.vars=>": {
    "prefix": "built_in.vars=>",
    "body": [
      "class Person:",
      "  name = 'John'",
      "  age = 36",
      "  country = 'norway'",
      "x = vars(Person)"
    ],
    "description": "An example for using vars"
  },
  "zip": {
    "prefix": "zip",
    "body": "zip(iterator1, iterqator2, iterator3 ...)",
    "description": "Returns an iterator, from two or more iterators"
  },
  "built_in.zip=>_1": {
    "prefix": "built_in.zip=>_1",
    "body": [
      "a = ('John', 'Charles', 'Mike')",
      "b = ('Jenny', 'Christy', 'Monica')",
      "x = zip(a, b)",
      "#use the tuple() function to display a readable version of the result:",
      "print(tuple(x))"
    ],
    "description": "An example for using zip"
  },
  "built_in.zip=>_2": {
    "prefix": "built_in.zip=>_2",
    "body": [
      "a = ('John', 'Charles', 'Mike')",
      "b = ('Jenny', 'Christy', 'Monica', 'Vicky')",
      "x = zip(a, b)",
      "#use the tuple() function to display a readable version of the result:",
      "print(tuple(x))"
    ],
    "description": "An example for using zip"
  },
  "if": {
    "prefix": "if",
    "body": ["if condition:", "  pass"],
    "description": "if Statements"
  },
  "ifelif": {
    "prefix": "ifelif",
    "body": ["if condition:", "  pass", "elif condition:", "  pass"],
    "description": "if/else if Statements"
  },
  "ifelifelse": {
    "prefix": "ifelifelse",
    "body": [
      "if condition:",
      "  pass",
      "elif condition:",
      "  pass",
      "else:",
      "  pass"
    ],
    "description": "if/else if/else Statements"
  },
  "ifel": {
    "prefix": "ifelse",
    "body": ["if condition:", "  pass", "else:", "  pass"],
    "description": "if/else Statements"
  },
  "elif": {
    "prefix": "else",
    "body": ["else:", "  pass"],
    "description": "else Statements"
  },
  "ifshort": {
    "prefix": "ifshort",
    "body": "print('A') if a > b else print('A')",
    "description": "ifshort Statements"
  },
  "lambda": {
    "prefix": "lambda",
    "body": "lambda arguments : expression",
    "description": "A lambda function can take any number of arguments, but can only have one expression."
  },
  "for": {
    "prefix": "for",
    "body": ["for item in range:", " "],
    "description": "for Statements"
  },
  "for=>": {
    "prefix": "for=>",
    "body": [
      "fruits = ['apple', 'banana', 'cherry']",
      "for x in fruits:",
      "  print(x)"
    ],
    "description": "An example for using for"
  },
  "for=>through_a_string": {
    "prefix": "for=>through_a_string",
    "body": ["for x in 'banana':", "  print(x)"],
    "description": "An example for using for"
  },
  "for=>break_statement": {
    "prefix": "for=>break_statement",
    "body": [
      "fruits = ['apple', 'banana', 'cherry']",
      "for x in fruits:",
      " print(x)",
      " if x == 'banana':",
      "   break"
    ],
    "description": "An example for using for"
  },
  "for=>continue_statement": {
    "prefix": "for=>continue_statement",
    "body": [
      "fruits = ['apple', 'banana', 'cherry']",
      "for x in fruits:",
      " print(x)",
      " if x == 'banana':",
      "   continue",
      " print(x)"
    ],
    "description": "An example for using for"
  },
  "for=>range_function_1": {
    "prefix": "for=>range_function_1",
    "body": ["for x in range(6):", " print(x)"],
    "description": "An example for using for"
  },
  "for=>range_function_2": {
    "prefix": "for=>range_function_2",
    "body": ["for x in range(2, 6):", " print(x)"],
    "description": "An example for using for"
  },
  "for=>range_function_3": {
    "prefix": "for=>range_function_3",
    "body": ["for x in range(2, 30, 3):", " print(x)"],
    "description": "An example for using for"
  },
  "for=>for_else": {
    "prefix": "for=>for_else",
    "body": [
      "for x in range(2, 6):",
      " print(x)",
      "else:",
      " print('Finally finished!')"
    ],
    "description": "An example for using for"
  },
  "for=>nested_loops": {
    "prefix": "for=>for_else",
    "body": [
      "adj = ['red', 'big', 'tasty']",
      "fruits = ['apple', 'banana', 'cherry']",
      "for x in adj:",
      "  for y in fruits:",
      "    print(x, y)"
    ],
    "description": "An example for using for"
  },
  "while": {
    "prefix": "while",
    "body": ["while expression:", "  pass"],
    "description": "while Statements"
  },
  "while_else": {
    "prefix": "while_else",
    "body": ["while expression:", "  pass", "else:", "  pass"],
    "description": "while Statements"
  },
  "while=>": {
    "prefix": "while=>",
    "body": ["i = 1", "while i < 6:", "  print(i)", "  i += 1"],
    "description": "while Statements"
  },
  "while=>break_statement": {
    "prefix": "while=>break_statement",
    "body": [
      "i = 1",
      "while i < 6:",
      " print(i)",
      "  if i == 3:",
      "    break",
      "  i += 1"
    ],
    "description": "while Statements"
  },
  "while=>continue_statement": {
    "prefix": "while=>continue_statement",
    "body": [
      "i = 1",
      "while i < 6:",
      "  i += 1",
      "  print(i)",
      "  if i == 3:",
      "    continue",
      "  print(i)"
    ],
    "description": "while Statements"
  },
  "function": {
    "prefix": "function=>",
    "body": ["def name(args):", " pass"],
    "description": "Defining Function"
  },
  "def": {
    "prefix": "def=>",
    "body": ["def name(args):", " pass"],
    "description": "Defining Function"
  },
  "def=>with_default_value": {
    "prefix": "def=>with_default_value",
    "body": ["def name(name, lastName='john')", " pass"],
    "description": "Defining Function wqith default values"
  },
  "capitalize": {
    "prefix": ".capitalize",
    "body": ".capitalize()",
    "description": "Converts the first character to upper case"
  },
  "string.capitalize=>_1": {
    "prefix": "string.capitalize=>_1",
    "body": [
      "txt = hello, and welcome to my world.",
      "",
      "x = txt.capitalize()",
      "",
      "print (x)"
    ],
    "description": "An example for using capitalize"
  },
  "string.capitalize=>_2": {
    "prefix": "string.capitalize=>_2",
    "body": [
      "txt = '36 is my age.'",
      "",
      "x = txt.capitalize()",
      "",
      "print (x)"
    ],
    "description": "An example for using capitalize"
  },
  "casefold": {
    "prefix": ".casefold",
    "body": ".casefold()",
    "description": "Converts string into lower case"
  },
  "string.casefold=>": {
    "prefix": "string.casefold=>",
    "body": [
      "txt = 'Hello, And Welcome To My World!'",
      "",
      "x = txt.casefold()",
      "",
      "print(x)"
    ],
    "description": "An example for using casefold"
  },
  "center": {
    "prefix": ".center",
    "body": ".center()",
    "description": "Returns a centered string"
  },
  "string.center=>_1": {
    "prefix": "string.center=>_1",
    "body": ["txt = 'banana'", "", "x = txt.center(20)", "", "print(x)"],
    "description": "An example for using center"
  },
  "string.center=>_2": {
    "prefix": "string.center=>_2",
    "body": ["txt = 'banana'", "", "x = txt.center(20,'O')", "", "print(x)"],
    "description": "An example for using center"
  },
  "string.count": {
    "prefix": ".count",
    "body": ".count()",
    "description": "Returns the number of times a specified value occurs in a string"
  },
  "string.count=>_1": {
    "prefix": "string.count=>_1",
    "body": [
      "txt = 'I love apples, apple are my favorite fruit'",
      "",
      "x = txt.count('apple')",
      "",
      "print(x)"
    ],
    "description": "An example for using count"
  },
  "string.count=>_2": {
    "prefix": "string.count=>_2",
    "body": [
      "txt = 'I love apples, apple are my favorite fruit'",
      "",
      "x = txt.count('apple', 10, 24)",
      "",
      "print(x)"
    ],
    "description": "An example for using count"
  },
  "encode": {
    "prefix": ".encode",
    "body": ".encode()",
    "description": "Returns an encoded version of the string"
  },
  "string.encode=>": {
    "prefix": "string.encode=>",
    "body": ["txt = 'My name is Ståle'", "", "x = txt.encode()", "", "print()"],
    "description": "An example for using encode"
  },
  "string.encode=>": {
    "prefix": "string.encode=>",
    "body": [
      "txt = 'My name is Ståle'",
      "",
      "print(txt.encode(encoding='ascii',errors='backslashreplace')",
      "print(txt.encode(encoding='ascii',errors='ignore')",
      "print(txt.encode(encoding='ascii',errors='namereplace')",
      "print(txt.encode(encoding='ascii',errors='replace')",
      "print(txt.encode(encoding='ascii',errors='xmlcharrefreplace')",
      "print(txt.encode(encoding='ascii',errors='strict')"
    ],
    "description": "An example for using encode"
  },
  "endswith": {
    "prefix": ".endswith",
    "body": ".endswith()",
    "description": "Returns true if the string ends with the specified value"
  },
  "string.endswith=>_1": {
    "prefix": "string.endswith=>_1",
    "body": [
      "txt = 'Hello, And Welcome To My World!'",
      "",
      "x = txt.endswith('.')",
      "",
      "print(x)"
    ],
    "description": "An example for using endswith"
  },
  "string.endswith=>_2": {
    "prefix": "string.endswith=>_2",
    "body": [
      "txt = 'Hello, And Welcome To My World!'",
      "",
      "x = txt.endswith('my world.', 5, 11)",
      "",
      "print(x)"
    ],
    "description": "An example for using endswith"
  },
  "expandtabs": {
    "prefix": ".expandtabs",
    "body": ".expandtabs()",
    "description": "Sets the tab size of the string"
  },
  "string.expandtabs=>_1": {
    "prefix": "string.expandtabs=>_1",
    "body": [
      "txt = 'H\te\tl\tl\to'",
      "",
      "x = txt.expandtabs(2)",
      "",
      "print(x)"
    ],
    "description": "An example for using expandtabs"
  },
  "string.expandtabs=>_2": {
    "prefix": "string.expandtabs=>_2",
    "body": [
      "txt = 'H\te\tl\tl\to'",
      "",
      "print(txt)",
      "print(txt.expandtabs())",
      "print(txt.expandtabs(2))",
      "print(txt.expandtabs(4))",
      "print(txt.expandtabs(10))"
    ],
    "description": "An example for using expandtabs"
  },
  "find": {
    "prefix": ".find",
    "body": ".find()",
    "description": "Searches the string for a specified value and returns the position of where it was found"
  },
  "string.find=>_1": {
    "prefix": "string.find=>_1",
    "body": [
      "txt = 'Hello, welcome to my world.'",
      "",
      "x = txt.find('welcome')",
      "",
      "print(x)"
    ],
    "description": "An example for using find"
  },
  "string.find=>_2": {
    "prefix": "string.find=>_2",
    "body": [
      "txt = 'Hello, And Welcome To My World!'",
      "",
      "x = txt.find('e')",
      "",
      "print(x)"
    ],
    "description": "An example for using find"
  },
  "string.find=>_3": {
    "prefix": "string.find=>_3",
    "body": [
      "txt = 'Hello, And Welcome To My World!'",
      "",
      "x = txt.find('e', 5, 10)",
      "",
      "print(x)"
    ],
    "description": "An example for using find"
  },
  "string.find=>_4": {
    "prefix": "string.find=>_4",
    "body": [
      "txt = 'Hello, And Welcome To My World!'",
      "",
      "print(txt.find('q'))",
      "print(txt.index('q'))"
    ],
    "description": "An example for using find"
  },
  "format": {
    "prefix": ".format",
    "body": ".format()",
    "description": "Formats specified values in a string"
  },
  "string.format=>": {
    "prefix": "string.format=>",
    "body": [
      "# default arguments",
      "print('Hello {}, your balance is {}.'.format('Adam', 230.2346))",
      "",
      "# positional arguments",
      "print('Hello {0}, your balance is {1}.'.format('Adam', 230.2346))",
      "",
      "# keyword arguments",
      "print('Hello {name}, your balance is {blc}.'.format(name='Adam', blc=230.2346))",
      "",
      "# mixed arguments",
      "print('Hello {0}, your balance is {blc}.'.format('Adam', blc=230.2346))"
    ],
    "description": "An example for using format"
  },
  "format_map": {
    "prefix": ".format_map",
    "body": ".format_map()",
    "description": "Formats specified values in a string"
  },
  "string.format_map=>": {
    "prefix": "string.format_map=>",
    "body": [
      "point = {'x':4,'y':-5}",
      "print('{x} {y}'.format_map(point))",
      "",
      "point = {'x':4,'y':-5, 'z': 0}",
      "print('{x} {y} {z}'.format_map(point))"
    ],
    "description": "An example for using format_map"
  },
  "index": {
    "prefix": ".index",
    "body": ".index()",
    "description": "Searches the string for a specified value and returns the position of where it was found"
  },
  "string.index=>_1": {
    "prefix": "string.index=>_1",
    "body": [
      "txt = 'Hello, welcome to my world.'",
      "",
      "x = txt.index('welcome')",
      "",
      "print(x)"
    ],
    "description": "An example for using index"
  },
  "string.index=>_2": {
    "prefix": "string.index=>_2",
    "body": [
      "txt = 'Hello, And Welcome To My World!'",
      "",
      "x = txt.index('e')",
      "",
      "print(x)"
    ],
    "description": "An example for using index"
  },
  "string.index=>_3": {
    "prefix": "string.index=>_3",
    "body": [
      "txt = 'Hello, And Welcome To My World!'",
      "",
      "x = txt.index('e', 5, 10)",
      "",
      "print(x)"
    ],
    "description": "An example for using index"
  },
  "string.index=>_4": {
    "prefix": "string.index=>_4",
    "body": [
      "txt = 'Hello, And Welcome To My World!'",
      "",
      "print(txt.find('q'))",
      "print(txt.index('q'))"
    ],
    "description": "An example for using index"
  },
  "isalnum": {
    "prefix": ".isalnum",
    "body": ".isalnum()",
    "description": "Returns True if all characters in the string are alphanumeric"
  },
  "string.isalnum=>": {
    "prefix": "string.isalnum=>",
    "body": ["txt = 'Company12'", "x = txt.isalnum()", "print(x)"],
    "description": "An example for using isalnum"
  },
  "string.isalnum=>": {
    "prefix": "string.isalnum=>",
    "body": ["txt = 'Company 12'", "x = txt.isalnum()", "print(x)"],
    "description": "An example for using isalnum"
  },
  "isalpha": {
    "prefix": ".isalpha",
    "body": ".isalpha()",
    "description": "Returns True if all characters in the string are in the alphabet"
  },
  "string.isalpha=>": {
    "prefix": "string.isalpha=>",
    "body": ["txt = 'Company10'", "x = txt.isalpha()", "print(x)"],
    "description": "An example for using isalpha"
  },
  "isdecimal": {
    "prefix": ".isdecimal",
    "body": ".isdecimal()",
    "description": "Returns True if all characters in the string are decimals"
  },
  "string.isdecimal=>": {
    "prefix": "string.isdecimal=>",
    "body": [
      "txt = '\u0033' #unicode for 3",
      "x = txt.isdecimal()",
      "print(x)"
    ],
    "description": "An example for using isdecimal"
  },
  "string.isdecimal=>": {
    "prefix": "string.isdecimal=>",
    "body": [
      "a = '\u0030' #unicode for 0",
      "b = '\u0047' #unicode for G",
      "print(a.isdecimal())",
      "print(b.isdecimal())"
    ],
    "description": "An example for using isdecimal"
  },
  "isdigit": {
    "prefix": ".isdigit",
    "body": ".isdigit()",
    "description": "Returns True if all characters in the string are digits"
  },
  "string.isdigit=>": {
    "prefix": "string.isdigit=>",
    "body": ["txt = '50800'", "x = txt.isdigit()", "print(x)"],
    "description": "An example for using isdigit"
  },
  "string.isdigit=>": {
    "prefix": "string.isdigit=>",
    "body": [
      "a = '\u0030' #unicode for 0",
      "b = '\u00B2' #unicode for ²",
      "print(a.isdigit())",
      "print(b.isdigit())"
    ],
    "description": "An example for using isdigit"
  },
  "isidentifier": {
    "prefix": ".isidentifier",
    "body": ".isidentifier()",
    "description": "Returns True if the string is an identifier"
  },
  "string.isidentifier=>": {
    "prefix": "string.isidentifier=>",
    "body": ["txt = 'Demo'", "x = txt.isidentifier()", "print(x)"],
    "description": "An example for using isidentifier"
  },
  "string.isidentifier=>": {
    "prefix": "string.isidentifier=>",
    "body": [
      "a = 'MyFolder'",
      "b = 'Demo002'",
      "c = '2bring'",
      "d = 'my demo'",
      "print(a.isidentifier())",
      "print(b.isidentifier())",
      "print(c.isidentifier())",
      "print(d.isidentifier())"
    ],
    "description": "An example for using isidentifier"
  },
  "islower": {
    "prefix": ".islower",
    "body": ".islower()",
    "description": "Returns True if all characters in the string are lower case"
  },
  "string.islower=>": {
    "prefix": "string.islower=>",
    "body": ["txt = 'hello world!'", "x = txt.islower()", "print(x)"],
    "description": "An example for using islower"
  },
  "string.islower=>": {
    "prefix": "string.islower=>",
    "body": [
      "a = 'Hello world!'",
      "b = 'hello 123'",
      "c = 'mynameisPeter'",
      "print(a.islower())",
      "print(b.islower())",
      "print(c.islower())"
    ],
    "description": "An example for using islower"
  },
  "isnumeric": {
    "prefix": ".isnumeric",
    "body": ".isnumeric()",
    "description": "Returns True if all characters in the string are numeric"
  },
  "string.isnumeric=>": {
    "prefix": "string.isnumeric=>",
    "body": ["txt = '565543'", "x = txt.isnumeric()", "print(x)"],
    "description": "An example for using isnumeric"
  },
  "string.isnumeric=>": {
    "prefix": "string.isnumeric=>",
    "body": [
      "a = '\u0030' #unicode for 0",
      "b = '\u00B2' #unicode for &sup2;",
      "c = '10km2'",
      "print(a.isnumeric())",
      "print(b.isnumeric())",
      "print(c.isnumeric())"
    ],
    "description": "An example for using isnumeric"
  },
  "isprintable": {
    "prefix": ".isprintable",
    "body": ".isprintable()",
    "description": "Returns True if all characters in the string are printable"
  },
  "string.isprintable=>": {
    "prefix": "string.isprintable=>",
    "body": ["txt = 'Hello! Are you #1?'", "x = txt.isprintable()", "print(x)"],
    "description": "An example for using isprintable"
  },
  "string.isprintable=>": {
    "prefix": "string.isprintable=>",
    "body": [
      "txt = 'Hello!\nAre you #1?'",
      "x = txt.isprintable()",
      "print(x)"
    ],
    "description": "An example for using isprintable"
  },
  "isspace": {
    "prefix": ".isspace",
    "body": ".isspace()",
    "description": "Returns True if all characters in the string are whitespaces"
  },
  "string.isspace=>": {
    "prefix": "string.isspace=>",
    "body": ["txt = '   '", "x = txt.isspace()", "print(x)"],
    "description": "An example for using isspace"
  },
  "string.isspace=>": {
    "prefix": "string.isspace=>",
    "body": ["txt = '   s   '", "x = txt.isspace()", "print(x)"],
    "description": "An example for using isspace"
  },
  "istitle": {
    "prefix": ".istitle",
    "body": ".istitle()",
    "description": "Returns True if the string follows the rules of a title"
  },
  "string.istitle=>": {
    "prefix": "string.istitle=>",
    "body": [
      "txt = 'Hello, And Welcome To My World!'",
      "x = txt.istitle()",
      "print(x)"
    ],
    "description": "An example for using istitle"
  },
  "string.istitle=>": {
    "prefix": "string.istitle=>",
    "body": [
      "a = 'HELLO, AND WELCOME TO MY WORLD'",
      "b = 'Hello'",
      "c = '22 Names'",
      "d = 'This Is %'!?'",
      "print(a.istitle())",
      "print(b.istitle())",
      "print(c.istitle())",
      "print(d.istitle())"
    ],
    "description": "An example for using istitle"
  },
  "isupper": {
    "prefix": ".isupper",
    "body": ".isupper()",
    "description": "Returns True if all characters in the string are upper case"
  },
  "string.isupper=>": {
    "prefix": "string.isupper=>",
    "body": ["txt = 'THIS IS NOW!'", "x = txt.isupper()", "print(x)"],
    "description": "An example for using isupper"
  },
  "string.isupper=>": {
    "prefix": "string.isupper=>",
    "body": [
      "a = 'Hello World!'",
      "b = 'hello 123'",
      "c = 'MY NAME IS PETER'",
      "print(a.isupper())",
      "print(b.isupper())",
      "print(c.isupper())"
    ],
    "description": "An example for using isupper"
  },
  "join": {
    "prefix": ".join",
    "body": ".join()",
    "description": "Joins the elements of an iterable to the end of the string"
  },
  "string.join=>": {
    "prefix": "string.join=>",
    "body": [
      "myTuple = ('John', 'Peter', 'Vicky')",
      "x = '#'.join(myTuple)",
      "print(x)"
    ],
    "description": "An example for using join"
  },
  "string.join=>": {
    "prefix": "string.join=>",
    "body": [
      "myDict = {'name': 'John', 'country': 'Norway'}",
      "mySeparator = 'TEST'",
      "x = mySeparator.join(myDict)",
      "print(x)"
    ],
    "description": "An example for using join"
  },
  "ljust": {
    "prefix": ".ljust",
    "body": ".ljust()",
    "description": "Returns a left justified version of the string"
  },
  "string.ljust=>": {
    "prefix": "string.ljust=>",
    "body": [
      "txt = 'banana'",
      "x = txt.ljust(20)",
      "print(x, 'is my favorite fruit.')"
    ],
    "description": "An example for using ljust"
  },
  "string.ljust=>": {
    "prefix": "string.ljust=>",
    "body": ["txt = 'banana'", "x = txt.ljust(20, 'O')", "print(x)"],
    "description": "An example for using ljust"
  },
  "lower": {
    "prefix": ".lower",
    "body": ".lower()",
    "description": "Converts a string into lower case"
  },
  "string.lower=>": {
    "prefix": "string.lower=>",
    "body": ["txt = 'Hello my FRIENDS'", "x = txt.lower()", "print(x)"],
    "description": "An example for using lower"
  },
  "lstrip": {
    "prefix": ".lstrip",
    "body": ".lstrip()",
    "description": "Returns a left trim version of the string"
  },
  "string.lstrip=>": {
    "prefix": "string.lstrip=>",
    "body": [
      "txt = '     banana     '",
      "x = txt.lstrip()",
      "print('of all fruits', x, 'is my favorite')"
    ],
    "description": "An example for using lstrip"
  },
  "string.lstrip=>": {
    "prefix": "string.lstrip=>",
    "body": [
      "txt = ',,,,,ssaaww.....banana'",
      "x = txt.lstrip(',.asw')",
      "print(x)"
    ],
    "description": "An example for using lstrip"
  },
  "maketrans": {
    "prefix": ".maketrans",
    "body": ".maketrans()",
    "description": "Returns a translation table to be used in translations"
  },
  "string.maketrans=>": {
    "prefix": "string.maketrans=>",
    "body": [
      "# example dictionary",
      "dict = {'a': '123', 'b': '456', 'c': '789'}",
      "string = 'abc'",
      "print(string.maketrans(dict))"
    ],
    "description": "An example for using maketrans"
  },
  "string.maketrans=>": {
    "prefix": "string.maketrans=>",
    "body": [
      "# example dictionary",
      "dict = {97: '123', 98: '456', 99: '789'}",
      "string = 'abc'",
      "print(string.maketrans(dict))"
    ],
    "description": "An example for using maketrans"
  },
  "partition": {
    "prefix": ".partition",
    "body": ".partition()",
    "description": "Returns a tuple where the string is parted into three parts"
  },
  "string.partition=>": {
    "prefix": "string.partition=>",
    "body": [
      "txt = 'I could eat bananas all day'",
      "x = txt.partition('bananas')",
      "print(x)"
    ],
    "description": "An example for using partition"
  },
  "string.partition=>": {
    "prefix": "string.partition=>",
    "body": [
      "txt = 'I could eat bananas all day'",
      "x = txt.partition('apples')",
      "print(x)"
    ],
    "description": "An example for using partition"
  },
  "replace": {
    "prefix": ".replace",
    "body": ".replace(x, y)",
    "description": "Returns a string where a specified value is replaced with a specified value"
  },
  "string.replace=>": {
    "prefix": "string.replace=>",
    "body": [
      "txt 'I like bananas'",
      "x = txt.replace('bananas', 'apples')",
      "print(x)"
    ],
    "description": "An example for using replace"
  },
  "string.replace=>": {
    "prefix": "string.replace=>",
    "body": [
      "txt = 'one one was a race horse, two two was one too.'",
      "x = txt.replace('one', 'three')",
      "print(x)"
    ],
    "description": "An example for using replace"
  },
  "string.replace=>": {
    "prefix": "string.replace=>",
    "body": [
      "txt = 'one one was a race horse, two two was one too.'",
      "x = txt.replace('one', 'three', 2)",
      "print(x)"
    ],
    "description": "An example for using replace"
  },
  "rfind": {
    "prefix": ".rfind",
    "body": ".rfind()",
    "description": "Searches the string for a specified value and returns the last position of where it was found"
  },
  "string.rfind=>": {
    "prefix": "string.rfind=>",
    "body": ["txt = 'Mi casa, su casa.'", "x = txt.rfind('casa')", "print(x)"],
    "description": "An example for using rfind"
  },
  "string.rfind=>": {
    "prefix": "string.rfind=>",
    "body": [
      "txt = 'Hello, welcome to my world.'",
      "x = txt.rfind('e')",
      "print(x)"
    ],
    "description": "An example for using rfind"
  },
  "string.rfind=>": {
    "prefix": "string.rfind=>",
    "body": [
      "txt = 'Hello, welcome to my world.'",
      "x = txt.rfind('e', 5, 10)",
      "print(x)"
    ],
    "description": "An example for using rfind"
  },
  "string.rfind=>": {
    "prefix": "string.rfind=>",
    "body": [
      "txt = 'Hello, welcome to my world.'",
      "print(txt.rfind('q'))",
      "print(txt.rindex('q'))"
    ],
    "description": "An example for using rfind"
  },
  "rindex": {
    "prefix": ".rindex",
    "body": ".rindex()",
    "description": "Searches the string for a specified value and returns the last position of where it was found"
  },
  "string.rindex=>": {
    "prefix": "string.rindex=>",
    "body": ["txt = 'Mi casa, su casa.'", "x = txt.rindex('casa')", "print(x)"],
    "description": "An example for using rindex"
  },
  "string.rindex=>": {
    "prefix": "string.rindex=>",
    "body": [
      "txt = 'Hello, welcome to my world.'",
      "x = txt.rindex('e')",
      "print(x)"
    ],
    "description": "An example for using rindex"
  },
  "string.rindex=>": {
    "prefix": "string.rindex=>",
    "body": [
      "txt = 'Hello, welcome to my world.'",
      "x = txt.rindex('e', 5, 10)",
      "print(x)"
    ],
    "description": "An example for using rindex"
  },
  "string.rindex=>": {
    "prefix": "string.rindex=>",
    "body": [
      "txt = 'Hello, welcome to my world.'",
      "print(txt.rfind('q'))",
      "print(txt.rindex('q'))"
    ],
    "description": "An example for using rindex"
  },
  "rpartition": {
    "prefix": ".rpartition",
    "body": ".rpartition()",
    "description": "Returns a tuple where the string is parted into three parts"
  },
  "string.rpartition=>": {
    "prefix": "string.rpartition=>",
    "body": [
      "txt = 'I could eat bananas all day, bananas are my favorite fruit'",
      "x = txt.rpartition('bananas')",
      "print(x)"
    ],
    "description": "An example for using rpartition"
  },
  "string.rpartition=>": {
    "prefix": "string.rpartition=>",
    "body": [
      "txt = 'I could eat bananas all day, bananas are my favorite fruit'",
      "x = txt.rpartition('apples')",
      "print(x)"
    ],
    "description": "An example for using rpartition"
  },
  "rsplit": {
    "prefix": ".rsplit",
    "body": ".rsplit()",
    "description": "Returns a right trim version of the string"
  },
  "string.rsplit=>": {
    "prefix": "string.rsplit=>",
    "body": [
      "txt = 'apple, banana, cherry'",
      "x = txt.rsplit(', ')",
      "print(x)"
    ],
    "description": "An example for using rsplit"
  },
  "string.rsplit=>": {
    "prefix": "string.rsplit=>",
    "body": [
      "txt = 'apple, banana, cherry'",
      "# setting the max parameter to 1, will return a list with 2 elements!",
      "x = txt.rsplit(', ', 1)",
      "print(x)"
    ],
    "description": "An example for using rsplit"
  },
  "string.rsplit=>": {
    "prefix": "string.rsplit=>",
    "body": [
      "txt = 'banana,,,,,ssaaww.....'",
      "x = txt.rstrip(',.asw')",
      "print(x)"
    ],
    "description": "An example for using rsplit"
  },
  "split": {
    "prefix": ".split",
    "body": ".split()",
    "description": "Splits the string at the specified separator, and returns a list"
  },
  "string.split=>": {
    "prefix": "string.split=>",
    "body": ["txt = 'welcome to the jungle'", "x = txt.split()", "print(x)"],
    "description": "An example for using split"
  },
  "string.split=>": {
    "prefix": "string.split=>",
    "body": [
      "txt = 'hello, my name is Peter, I am 26 years old'",
      "x = txt.split(', ')",
      "print(x)"
    ],
    "description": "An example for using split"
  },
  "string.split=>": {
    "prefix": "string.split=>",
    "body": [
      "txt = 'apple#banana#cherry#orange'",
      "x = txt.split('#')",
      "print(x)"
    ],
    "description": "An example for using split"
  },
  "string.split=>": {
    "prefix": "string.split=>",
    "body": [
      "txt = 'apple#banana#cherry#orange'",
      "# setting the max parameter to 1, will return a list with 2 elements!",
      "x = txt.split('#', 1)",
      "print(x)"
    ],
    "description": "An example for using split"
  },
  "splitlines": {
    "prefix": ".splitlines",
    "body": ".splitlines()",
    "description": "Splits the string at line breaks and returns a list"
  },
  "string.splitlines=>": {
    "prefix": "string.splitlines=>",
    "body": [
      "txt = 'Thank you for the music\nWelcome to the jungle'",
      "x = txt.splitlines()",
      "print(x)"
    ],
    "description": "An example for using splitlines"
  },
  "string.splitlines=>": {
    "prefix": "string.splitlines=>",
    "body": [
      "txt = 'Thank you for the music\nWelcome to the jungle'",
      "x = txt.splitlines(True)",
      "print(x)"
    ],
    "description": "An example for using splitlines"
  },
  "startswith": {
    "prefix": ".startswith",
    "body": ".startswith()",
    "description": "Returns true if the string starts with the specified value"
  },
  "string.startswith=>": {
    "prefix": "string.startswith=>",
    "body": [
      "txt = 'Hello, welcome to my world.'",
      "x = txt.startswith('Hello')",
      "print(x)"
    ],
    "description": "An example for using startswith"
  },
  "string.startswith=>": {
    "prefix": "string.startswith=>",
    "body": [
      "txt = 'Hello, welcome to my world.'",
      "x = txt.startswith('wel', 7, 20)",
      "print(x)"
    ],
    "description": "An example for using startswith"
  },
  "swapcase": {
    "prefix": ".swapcase",
    "body": ".swapcase()",
    "description": "Swaps cases, lower case becomes upper case and vice versa"
  },
  "string.swapcase=>": {
    "prefix": "string.swapcase=>",
    "body": [
      "txt = 'Hello My Name Is PETER'",
      "x = txt.swapcase()",
      "print(x)"
    ],
    "description": "An example for using swapcase"
  },
  "title": {
    "prefix": ".title",
    "body": ".title()",
    "description": "Converts the first character of each word to upper case"
  },
  "string.title=>": {
    "prefix": "string.title=>",
    "body": ["txt = 'Welcome to my world'", "x = txt.title()", "print(x)"],
    "description": "An example for using title"
  },
  "string.title=>": {
    "prefix": "string.title=>",
    "body": ["txt = 'Welcome to my 2nd world'", "x = txt.title()", "print(x)"],
    "description": "An example for using title"
  },
  "string.title=>": {
    "prefix": "string.title=>",
    "body": ["txt = 'hello b2b2b2 and 3g3g3g'", "x = txt.title()", "print(x)"],
    "description": "An example for using title"
  },
  "translate": {
    "prefix": ".translate",
    "body": ".translate()",
    "description": "Returns a translated string"
  },
  "string.translate=>": {
    "prefix": "string.translate=>",
    "body": [
      "# translation table - a dictionary",
      "translation = {97: None, 98: None, 99: 105}",
      "",
      "string = 'abcdef'",
      "print('Original string:', string)",
      "",
      "# translate string",
      "print('Translated string:', string.translate(translation))"
    ],
    "description": "An example for using translate"
  },
  "upper": {
    "prefix": ".upper",
    "body": ".upper()",
    "description": "Converts a string into upper case"
  },
  "string.upper=>": {
    "prefix": "string.upper=>",
    "body": ["txt = 'Hello my friends'", "x = txt.upper()", "print(x)"],
    "description": "An example for using upper"
  },
  "zfill": {
    "prefix": ".zfill",
    "body": ".zfill()",
    "description": "Fills the string with a specified number of 0 values at the beginning"
  },
  "string.zfill=>": {
    "prefix": "string.zfill=>",
    "body": ["txt = '50'", "x = txt.zfill(10)", "print(x)"],
    "description": "An example for using zfill"
  },
  "append": {
    "prefix": ".append",
    "body": ".append()",
    "description": "Adds an element at the end of the list"
  },
  "list.append=>": {
    "prefix": "list.append=>",
    "body": [
      "fruits = ['apple', 'banana', 'cherry']",
      "fruits.append('orange')",
      "print(fruits)"
    ],
    "description": "An example for using append"
  },
  "list.append=>": {
    "prefix": "list.append=>",
    "body": [
      "a = ['apple', 'banana', 'cherry']",
      "b = ['Ford', 'BMW', 'Volvo']",
      "a.append(b)",
      "print(a)"
    ],
    "description": "An example for using append"
  },
  "clear": {
    "prefix": ".clear",
    "body": ".clear()",
    "description": "Removes all the elements from the list"
  },
  "list.clear=>": {
    "prefix": "list.clear=>",
    "body": [
      "fruits = ['apple', 'banana', 'cherry']",
      "fruits.clear()",
      "print(fruits)"
    ],
    "description": "An example for using clear"
  },
  "copy": {
    "prefix": ".copy",
    "body": ".copy()",
    "description": "Returns a copy of the list"
  },
  "list.copy=>": {
    "prefix": "list.copy=>",
    "body": [
      "fruits = ['apple', 'banana', 'cherry']",
      "x = fruits.copy()",
      "print(x)"
    ],
    "description": "An example for using copy"
  },
  "list.count": {
    "prefix": ".count",
    "body": ".count",
    "description": "Returns the number of elements with the specified value"
  },
  "list.count=>": {
    "prefix": "list.count=>",
    "body": [
      "fruits = ['apple', 'banana', 'cherry']",
      "x = fruits.count('cherry')",
      "print(x)"
    ],
    "description": "An example for using count"
  },
  "list.count=>": {
    "prefix": "list.count=>",
    "body": [
      "fruits = [1, 4, 2, 9, 7, 8, 9, 3, 1]",
      "x = fruits.count(9)",
      "print(x)"
    ],
    "description": "An example for using count"
  },
  "extend": {
    "prefix": ".extend",
    "body": ".extend()",
    "description": "Add the elements of a list (or any iterable), to the end of the current list"
  },
  "list.extend=>": {
    "prefix": "list.extend=>",
    "body": [
      "fruits = ['apple', 'banana', 'cherry']",
      "points = (1, 4, 5, 9)",
      "fruits.extend(points)",
      "print(fruits)"
    ],
    "description": "An example for using extend"
  },
  "index": {
    "prefix": ".index",
    "body": ".index()",
    "description": "Returns the index of the first element with the specified value"
  },
  "list.index=>": {
    "prefix": "list.index=>",
    "body": [
      "fruits = ['apple', 'banana', 'cherry']",
      "x = fruits.index('cherry')",
      "print(x)"
    ],
    "description": "An example for using index"
  },
  "list.index=>": {
    "prefix": "list.index=>",
    "body": [
      "fruits = [4, 55, 64, 32, 16, 32]",
      "x = fruits.index(32)",
      "print(x)"
    ],
    "description": "An example for using index"
  },
  "insert": {
    "prefix": ".insert",
    "body": ".insert()",
    "description": "Adds an element at the specified position"
  },
  "list.insert=>": {
    "prefix": "list.insert=>",
    "body": [
      "fruits = ['apple', 'banana', 'cherry']",
      "x = fruits.insert(1, 'orange')",
      "print(x)"
    ],
    "description": "An example for using insert"
  },
  "pop": {
    "prefix": ".pop",
    "body": ".pop()",
    "description": "Removes the element at the specified position"
  },
  "list.pop=>": {
    "prefix": "list.pop=>",
    "body": [
      "fruits = ['apple', 'banana', 'cherry']",
      "fruits.pop(1)",
      "print(fruits)"
    ],
    "description": "An example for using pop"
  },
  "remove": {
    "prefix": ".remove",
    "body": ".remove()",
    "description": "Removes the first item with the specified value"
  },
  "list.remove=>": {
    "prefix": "list.remove=>",
    "body": [
      "fruits = ['apple', 'banana', 'cherry']",
      "fruits.remove('banana')",
      "print(fruits)"
    ],
    "description": "An example for using remove"
  },
  "reverse": {
    "prefix": ".reverse",
    "body": ".reverse()",
    "description": "Reverses the order of the list"
  },
  "list.reverse=>": {
    "prefix": "list.reverse=>",
    "body": [
      "fruits = ['apple', 'banana', 'cherry']",
      "fruits.reverse()",
      "print(fruits)"
    ],
    "description": "An example for using reverse"
  },
  "sort": {
    "prefix": ".sort",
    "body": ".sort()",
    "description": "Sorts the list"
  },
  "list.sort=>": {
    "prefix": "list.sort=>",
    "body": ["cars = ['Ford', 'BMW', 'Volvo']", "cars.sort()", "print(cars)"],
    "description": "An example for using sort"
  },
  "list.sort=>": {
    "prefix": "list.sort=>",
    "body": [
      "cars = ['Ford', 'BMW', 'Volvo']",
      "cars.sort(reverse=True)",
      "print(cars)"
    ],
    "description": "An example for using sort"
  },
  "list.sort=>": {
    "prefix": "list.sort=>",
    "body": [
      "# A function that returns the length of the value:",
      "def myFunc(e):",
      "  return len(e)",
      "cars = ['Ford', 'Mitsubishi', 'BMW', 'VW']",
      "cars.sort(key=myFunc)",
      "print(cars)"
    ],
    "description": "An example for using sort"
  },
  "list.sort=>": {
    "prefix": "list.sort=>",
    "body": [
      "# A function that returns the length of the value:",
      "def myFunc(e):",
      "  return len(e)",
      "cars = ['Ford', 'Mitsubishi', 'BMW', 'VW']",
      "cars.sort(reverse=True, key=myFunc)",
      "print(cars)"
    ],
    "description": "An example for using sort"
  },
  "comprehensions": {
    "prefix": "comp=>",
    "body": "[ expression for item in list if conditional ]",
    "description": "List Comprehensions"
  },
  "list.comp=>_1": {
    "prefix": "list.comp=>_1",
    "body": ["x = [i for i in range(10)]", "print(x)"],
    "description": "An example for using list comprehension"
  },
  "list.comp=>_2": {
    "prefix": "list.comp=>_2",
    "body": ["x = [x**2 for x in range(10)]", "print(x)"],
    "description": "An example for using list comprehension"
  },
  "list.comp=>_3": {
    "prefix": "list.comp=>_3",
    "body": [
      "list1 = [3,4,5]",
      "multiplied = [item*3 for item in list1]",
      "print(multiplied)"
    ],
    "description": "An example for using list comprehension"
  },
  "list.comp=>_4": {
    "prefix": "list.comp=>_4",
    "body": [
      "listOfWords = ['this','is','a','list','of','words']",
      "items = [ word[0] for word in listOfWords ]",
      "print(items)"
    ],
    "description": "An example for using list comprehension"
  },
  "list.comp=>_5": {
    "prefix": "list.comp=>_5",
    "body": ["x = [double(x) for x in range(10) if x%2==0]", "print(x)"],
    "description": "An example for using list comprehension"
  },
  "clear": {
    "prefix": ".clear",
    "body": ".clear()",
    "description": "Removes all the elements from the dictionary"
  },
  "dictionary.clear=>": {
    "prefix": "dictionary.clear=>",
    "body": [
      "car = {",
      "  'brand': 'Ford',",
      "  'model': 'Mustang',",
      "  'year': 1964",
      "}",
      "car.clear()",
      "print(car)"
    ],
    "description": "An example for using clear"
  },
  "copy": {
    "prefix": ".copy",
    "body": ".copy()",
    "description": "Returns a copy of the dictionary"
  },
  "dictionary.copy=>": {
    "prefix": "dictionary.copy=>",
    "body": [
      "car = {",
      "  'brand': 'Ford',",
      "  'model': 'Mustang',",
      "  'year': 1964",
      "}",
      "x = car.copy()",
      "print(x)"
    ],
    "description": "An example for using copy"
  },
  "fromkeys": {
    "prefix": ".fromkeys",
    "body": ".fromkeys(x, y)",
    "description": "Returns a dictionary with the specified keys and values"
  },
  "dictionary.fromkeys=>": {
    "prefix": "dictionary.fromkeys=>",
    "body": [
      "x = ('key1', 'key2', 'key3')",
      "y = 0",
      "thisdict = dict.fromkeys(x, y)",
      "print(thisdict)"
    ],
    "description": "An example for using fromkeys"
  },
  "dictionary.fromkeys=>": {
    "prefix": "dictionary.fromkeys=>",
    "body": [
      "x = ('key1', 'key2', 'key3')",
      "thisdict = dict.fromkeys(x)",
      "print(thisdict)"
    ],
    "description": "An example for using fromkeys"
  },
  "get": {
    "prefix": ".get",
    "body": ".get()",
    "description": "Returns the value of the specified key"
  },
  "dictionary.get=>": {
    "prefix": "dictionary.get=>",
    "body": [
      "car = {",
      "  'brand': 'Ford',",
      "  'model': 'Mustang',",
      "  'year': 1964",
      "}",
      "x = car.get('model')",
      "print(x)"
    ],
    "description": "An example for using get"
  },
  "dictionary.get=>": {
    "prefix": "dictionary.get=>",
    "body": [
      "car = {",
      "  'brand': 'Ford',",
      "  'model': 'Mustang',",
      "  'year': 1964",
      "}",
      "x = car.get('price', 15000)",
      "print(x)"
    ],
    "description": "An example for using get"
  },
  "items": {
    "prefix": ".items",
    "body": ".items()",
    "description": "Returns a list containing the a tuple for each key value pair"
  },
  "dictionary.items=>": {
    "prefix": "dictionary.items=>",
    "body": [
      "car = {",
      "  'brand': 'Ford',",
      "  'model': 'Mustang',",
      "  'year': 1964",
      "}",
      "x = car.items()",
      "print(x)"
    ],
    "description": "An example for using items"
  },
  "dictionary.items=>": {
    "prefix": "dictionary.items=>",
    "body": [
      "car = {",
      "  'brand': 'Ford',",
      "  'model': 'Mustang',",
      "  'year': 1964",
      "}",
      "x = car.items()",
      "car['year'] = 2018",
      "print(x)"
    ],
    "description": "An example for using items"
  },
  "keys": {
    "prefix": ".keys",
    "body": ".keys()",
    "description": "Returns a list containing the dictionary's keys"
  },
  "dictionary.keys=>": {
    "prefix": "dictionary.keys=>",
    "body": [
      "car = {",
      "  'brand': 'Ford',",
      "  'model': 'Mustang',",
      "  'year': 1964",
      "}",
      "x = car.keys()",
      "print(x)"
    ],
    "description": "An example for using keys"
  },
  "dictionary.keys=>": {
    "prefix": "dictionary.keys=>",
    "body": [
      "car = {",
      "  'brand': 'Ford',",
      "  'model': 'Mustang',",
      "  'year': 1964",
      "}",
      "x = car.keys()",
      "car['color'] = 'white'",
      "print(x)"
    ],
    "description": "An example for using keys"
  },
  "pop": {
    "prefix": ".pop",
    "body": ".pop()",
    "description": "Removes the element with the specified key"
  },
  "dictionary.pop=>": {
    "prefix": "dictionary.pop=>",
    "body": [
      "car = {",
      "  'brand': 'Ford',",
      "  'model': 'Mustang',",
      "  'year': 1964",
      "}",
      "car.pop('model')",
      "print(car)"
    ],
    "description": "An example for using pop"
  },
  "popitem": {
    "prefix": ".popitem",
    "body": ".popitem()",
    "description": "Removes the last inserted key-value pai"
  },
  "dictionary.popitem=>": {
    "prefix": "dictionary.popitem=>",
    "body": [
      "car = {",
      "  'brand': 'Ford',",
      "  'model': 'Mustang',",
      "  'year': 1964",
      "}",
      "car.popitem()",
      "print(car)"
    ],
    "description": "An example for using popitem"
  },
  "setdefault": {
    "prefix": ".setdefault",
    "body": ".setdefault()",
    "description": "Returns the value of the specified key. If the key does not exist: insert the key, with the specified value"
  },
  "dictionary.setdefault=>": {
    "prefix": "dictionary.setdefault=>",
    "body": [
      "car = {",
      "  'brand': 'Ford',",
      "  'model': 'Mustang',",
      "  'year': 1964",
      "}",
      "x = car.setdefault('model', 'Bronco')",
      "print(x)"
    ],
    "description": "An example for using setdefault"
  },
  "dictionary.setdefault=>": {
    "prefix": "dictionary.setdefault=>",
    "body": [
      "car = {",
      "  'brand': 'Ford',",
      "  'model': 'Mustang',",
      "  'year': 1964",
      "}",
      "x = car.setdefault('color', 'white')",
      "print(x)"
    ],
    "description": "An example for using setdefault"
  },
  "update": {
    "prefix": ".update",
    "body": ".update()",
    "description": "Updates the dictionary with the specified key-value pairs"
  },
  "dictionary.update=>": {
    "prefix": "dictionary.update=>",
    "body": [
      "car = {",
      "  'brand': 'Ford',",
      "  'model': 'Mustang',",
      "  'year': 1964",
      "}",
      "car.update({'color': 'White'})",
      "print(car)"
    ],
    "description": "An example for using update"
  },
  "values": {
    "prefix": ".values",
    "body": ".values()",
    "description": "Returns a list of all the values in the dictionary"
  },
  "dictionary.values=>": {
    "prefix": "dictionary.values=>",
    "body": [
      "car = {",
      "  'brand': 'Ford',",
      "  'model': 'Mustang',",
      "  'year': 1964",
      "}",
      "x = car.values()",
      "print(x)"
    ],
    "description": "An example for using values"
  },
  "dictionary.values=>": {
    "prefix": "dictionary.values=>",
    "body": [
      "car = {",
      "  'brand': 'Ford',",
      "  'model': 'Mustang',",
      "  'year': 1964",
      "}",
      "x = car.values()",
      "car['year'] = 2018",
      "print(x)"
    ],
    "description": "An example for using values"
  },
  "tuple.count": {
    "prefix": ".count",
    "body": ".count(value)",
    "description": "Returns the number of times a specified value occurs in a tuple"
  },
  "tuple.count=>": {
    "prefix": "tuple.count=>",
    "body": [
      "thistuple = (1, 3, 7, 8, 7, 5, 4, 6, 8, 5)",
      "x = thistuple.count(5)",
      "print(x)"
    ],
    "description": "An example for using count"
  },
  "index": {
    "prefix": ".index",
    "body": ".index(value)",
    "description": "Searches the tuple for a specified value and returns the position of where it was found"
  },
  "tuple.index=>": {
    "prefix": "tuple.index=>",
    "body": [
      "thistuple = (1, 3, 7, 8, 7, 5, 4, 6, 8, 5)",
      "x = thistuple.index(8)",
      "print(x)"
    ],
    "description": "An example for using index"
  },
  "add": {
    "prefix": ".add",
    "body": ".add()",
    "description": "Adds an element to the set"
  },
  "sets.add=>": {
    "prefix": "sets.add=>",
    "body": [
      "fruits = {'apple', 'banana', 'cherry'}",
      "fruits.add('orange') ",
      "print(fruits)"
    ],
    "description": "An example for using add"
  },
  "clear": {
    "prefix": ".clear",
    "body": ".clear()",
    "description": "Removes all the elements from the set"
  },
  "sets.clear=>": {
    "prefix": "sets.clear=>",
    "body": [
      "fruits = {'apple', 'banana', 'cherry'}",
      "fruits.clear()",
      "print(fruits)"
    ],
    "description": "An example for using clear"
  },
  "copy": {
    "prefix": ".copy",
    "body": ".copy()",
    "description": "Returns a copy of the set"
  },
  "sets.copy=>": {
    "prefix": "sets.copy=>",
    "body": [
      "fruits = {'apple', 'banana', 'cherry'}",
      "x = fruits.copy()",
      "print(x)"
    ],
    "description": "An example for using copy"
  },
  "difference": {
    "prefix": ".difference",
    "body": "x.difference(y)",
    "description": "Returns a set containing the difference between two or more sets"
  },
  "sets.difference=>_1": {
    "prefix": "sets.difference=>_1",
    "body": [
      "x = {'apple', 'banana', 'cherry'}",
      "y = {'google', 'microsoft', 'apple'}",
      "z = x.difference(y)",
      "print(z)"
    ],
    "description": "An example for using difference"
  },
  "sets.difference=>_2": {
    "prefix": "sets.difference=>_2",
    "body": [
      "x = {'apple', 'banana', 'cherry'}",
      "y = {'google', 'microsoft', 'apple'}",
      "z = y.difference(x) ",
      "print(z)"
    ],
    "description": "An example for using difference"
  },
  "difference_update": {
    "prefix": ".difference_update",
    "body": "x.difference_update(y)",
    "description": "Removes the items in this set that are also included in another, specified set"
  },
  "sets.difference_update=>": {
    "prefix": "sets.difference_update=>",
    "body": [
      "x = {'apple', 'banana', 'cherry'}",
      "y = {'google', 'microsoft', 'apple'}",
      "x.difference_update(y)",
      "print(x)"
    ],
    "description": "An example for using difference_update"
  },
  "discard": {
    "prefix": ".discard",
    "body": ".discard()",
    "description": "Remove the specified item"
  },
  "sets.discard=>": {
    "prefix": "sets.discard=>",
    "body": [
      "fruits = {'apple', 'banana', 'cherry'}",
      "fruits.discard('banana') ",
      "print(fruits)"
    ],
    "description": "An example for using discard"
  },
  "intersection": {
    "prefix": ".intersection",
    "body": "x.intersection(y)",
    "description": "Returns a set, that is the intersection of two other sets"
  },
  "sets.intersection=>_1": {
    "prefix": "sets.intersection=>_1",
    "body": [
      "x = {'apple', 'banana', 'cherry'}",
      "y = {'google', 'microsoft', 'apple'}",
      "z = x.intersection(y)",
      "print(z)"
    ],
    "description": "An example for using intersection"
  },
  "sets.intersection=>_2": {
    "prefix": "sets.intersection=>_2",
    "body": [
      "x = {'a', 'b', 'c'}",
      "y = {'c', 'd', 'e'}",
      "z = {'f', 'g', 'c'}",
      "result = x.intersection(y, z)",
      "print(result)"
    ],
    "description": "An example for using intersection"
  },
  "intersection_update": {
    "prefix": ".intersection_update",
    "body": "x.intersection_update(y)",
    "description": "Removes the items in this set that are not present in other, specified set(s)"
  },
  "sets.intersection_update=>_1": {
    "prefix": "sets.intersection_update=>_1",
    "body": [
      "x = {'apple', 'banana', 'cherry'}",
      "y = {'google', 'microsoft', 'apple'}",
      "x.intersection_update(y)",
      "print(x)"
    ],
    "description": "An example for using intersection_update"
  },
  "sets.intersection_update=>_2": {
    "prefix": "sets.intersection_update=>_2",
    "body": [
      "x = {'a', 'b', 'c'}",
      "y = {'c', 'd', 'e'}",
      "z = {'f', 'g', 'c'}",
      "x.intersection_update(y, z)",
      "print(x)"
    ],
    "description": "An example for using intersection_update"
  },
  "isdisjoint": {
    "prefix": ".isdisjoint",
    "body": "x.isdisjoint(y)",
    "description": "Returns whether two sets have a intersection or not"
  },
  "sets.isdisjoint=>_1": {
    "prefix": "sets.isdisjoint=>_1",
    "body": [
      "x = {'apple', 'banana', 'cherry'}",
      "y = {'google', 'microsoft', 'facebook'}",
      "z = ",
      "print(z)"
    ],
    "description": "An example for using isdisjoint"
  },
  "sets.isdisjoint=>_2": {
    "prefix": "sets.isdisjoint=>_2",
    "body": [
      "x = {'apple', 'banana', 'cherry'}",
      "y = {'google', 'microsoft', 'apple'}",
      "z = x.isdisjoint(y) ",
      "print(z)"
    ],
    "description": "An example for using isdisjoint"
  },
  "issubset": {
    "prefix": ".issubset",
    "body": "x.issubset(y)",
    "description": "Returns whether another set contains this set or not"
  },
  "sets.issubset=>_1": {
    "prefix": "sets.sets.issubset=>_1",
    "body": [
      "x = {'a', 'b', 'c'}",
      "y = {'f', 'e', 'd', 'c', 'b', 'a'}",
      "z = x.issubset(y) ",
      "print(z)"
    ],
    "description": "An example for using issubset"
  },
  "sets.issubset=>_2": {
    "prefix": "sets.issubset=>_2",
    "body": [
      "x = {'a', 'b', 'c'}",
      "y = {'f', 'e', 'd', 'c', 'b'}",
      "z = x.issubset(y) ",
      "print(z)"
    ],
    "description": "An example for using issubset"
  },
  "issuperset": {
    "prefix": ".issuperset",
    "body": "x.issuperset(y)",
    "description": "Returns whether this set contains another set or not"
  },
  "sets.issuperset=>_1": {
    "prefix": "sets.issuperset=>_1",
    "body": [
      "x = {'f', 'e', 'd', 'c', 'b', 'a'}",
      "y = {'a', 'b', 'c'}",
      "z = x.issuperset(y) ",
      "print(z)"
    ],
    "description": "An example for using issuperset"
  },
  "sets.issuperset=>_2": {
    "prefix": "sets.issuperset=>_2",
    "body": [
      "x = {'f', 'e', 'd', 'c', 'b'}",
      "y = {'a', 'b', 'c'}",
      "z = x.issuperset(y) ",
      "print(z)"
    ],
    "description": "An example for using issuperset"
  },
  "popup": {
    "prefix": ".pop",
    "body": ".pop()",
    "description": "Removes the specified element"
  },
  "sets.pop=>": {
    "prefix": "sets.pop=>",
    "body": [
      "fruits = {'apple', 'banana', 'cherry'}",
      "fruits.pop() ",
      "print(fruits)"
    ],
    "description": "An example for using pop"
  },
  "remove": {
    "prefix": ".remove",
    "body": ".remove()",
    "description": "Removes the specified element"
  },
  "sets.remove=>": {
    "prefix": "sets.remove=>",
    "body": [
      "fruits = {'apple', 'banana', 'cherry'}",
      "fruits.remove('banana') ",
      "print(fruits)"
    ],
    "description": "An example for using remove"
  },
  "symmetric_difference": {
    "prefix": ".symmetric_difference",
    "body": "x.symmetric_difference(y)",
    "description": "Returns a set with the symmetric differences of two sets"
  },
  "sets.symmetric_difference=>": {
    "prefix": "sets.symmetric_difference=>",
    "body": [
      "x = {'apple', 'banana', 'cherry'}",
      "y = {'google', 'microsoft', 'apple'}",
      "z = x.symmetric_difference(y) ",
      "print(z)"
    ],
    "description": "An example for using symmetric_difference"
  },
  "symmetric_difference_update": {
    "prefix": ".symmetric_difference_update",
    "body": "x.symmetric_difference_update(y)",
    "description": "inserts the symmetric differences from this set and another"
  },
  "sets.symmetric_difference_update=>": {
    "prefix": "sets.symmetric_difference_update=>",
    "body": [
      "x = {'apple', 'banana', 'cherry'}",
      "y = {'google', 'microsoft', 'apple'}",
      "x.symmetric_difference_update(y) ",
      "print(x)"
    ],
    "description": "An example for using symmetric_difference_update"
  },
  "union": {
    "prefix": ".union",
    "body": "x.union(y)",
    "description": "Return a set containing the union of sets"
  },
  "sets.union=>_1": {
    "prefix": "sets.union=>_1",
    "body": [
      "x = {'apple', 'banana', 'cherry'}",
      "y = {'google', 'microsoft', 'apple'}",
      "z = x.union(y) ",
      "print(z)"
    ],
    "description": "An example for using union"
  },
  "sets.union=>_2": {
    "prefix": "sets.union=>_2",
    "body": [
      "x = {'a', 'b', 'c'}",
      "y = {'f', 'd', 'a'}",
      "z = {'c', 'd', 'e'}",
      "result = x.union(y, z) ",
      "print(result)"
    ],
    "description": "An example for using union"
  },
  "update": {
    "prefix": ".update",
    "body": "x.update(y)",
    "description": "Update the set with the union of this set and others"
  },
  "sets.update=>": {
    "prefix": "sets.update=>",
    "body": [
      "x = {'apple', 'banana', 'cherry'}",
      "y = {'google', 'microsoft', 'apple'}",
      "x.update(y) ",
      "print(x)"
    ],
    "description": "An example for using update"
  },
  "class": {
    "prefix": "class=>",
    "body": ["class MyClass:", "  pass"],
    "description": "python class"
  },
  "__init__": {
    "prefix": "__init__=>",
    "body": [
      "def __init__(self, name, age):",
      "  self.name = name",
      "  self.age = age"
    ],
    "description": "__init__ method"
  },
  "__iter__": {
    "prefix": "__iter__=>",
    "body": ["def __iter__(self):", "  self.a = 1", "  return self"],
    "description": "__iter__ method"
  },
  "__next__": {
    "prefix": "__next__=>",
    "body": [
      "def __next__(self):",
      "  x = self.a",
      "  self.a += 1",
      "  return x"
    ],
    "description": "__next__ method"
  },
  "importpython": {
    "prefix": "import=>",
    "body": "import mymodule as mx",
    "description": "import module"
  },
  "tryexcept": {
    "prefix": "trye=>",
    "body": [
      "try:",
      "  print(x)",
      "except:",
      "  print('An exception occurred')"
    ],
    "description": "tryexcept method"
  },
  "tryexceptfinally": {
    "prefix": "tryef=>",
    "body": [
      "try:",
      "  print(x)",
      "except:",
      "  print('Something went wrong')",
      "finally:",
      "  print('The try except is finished')"
    ],
    "description": "tryexceptfinally method"
  },
  "openFile": {
    "prefix": "file=>openFile",
    "body": ["f = open('demofile.txt', 'r')", "print(f.read())"],
    "description": "open a file"
  },
  "openFileReadLine": {
    "prefix": "file=>openFileReadLine",
    "body": ["f = open('demofile.txt', 'r')", "print(f.readline())"],
    "description": "Read one line of the file"
  },
  "writeExistFile": {
    "prefix": "file=>writeExistFile",
    "body": [
      "f = open('demofile.txt', 'a')",
      "f.write('Now the file has one more line!')"
    ],
    "description": "Write to an Existing File"
  },
  "writeOwerWrite": {
    "prefix": "file=>writeOwerWrite",
    "body": [
      "f = open('demofile.txt', 'w')",
      "f.write('Woops! I have deleted the content!')"
    ],
    "description": "Open a file and overwrite the content"
  },
  "createFileIfDoesNotExist": {
    "prefix": "file=>createFileIfDoesNotExist",
    "body": "f = open('myfile.txt', 'w')",
    "description": "Create a new file if it does not exist"
  },
  "createFile": {
    "prefix": "file=>createFile",
    "body": "f = open('myfile.txt', 'x')",
    "description": "Create a new file"
  },
  "deleteFile": {
    "prefix": "file=>deleteFile",
    "body": ["#import os", "os.remove('demofile.txt')"],
    "description": "delete a file"
  },
  "class=>_1": {
    "prefix": "class=>_1",
    "body": [
      "class Person:",
      "    pass  # An empty block",
      "p = Person()",
      "print(p)"
    ],
    "description": "oop inheritance example"
  },
  "class=>inheritance_1": {
    "prefix": "class=>inheritance_1",
    "body": [
      "class Bird:",
      "",
      "   def __init__(self):",
      "     print('Bird is ready')",
      "",
      "   def whoisThis(self):",
      "     print('Bird')",
      "",
      "   def swim(self):",
      "     print('Swim faster')",
      "",
      "# child class",
      "class Penguin(Bird):",
      "",
      "   def __init__(self):",
      "     # call super() function",
      "     super().__init__()",
      "     print('Penguin is ready')",
      "",
      "   def whoisThis(self):",
      "     print('Penguin')",
      "",
      "   def run(self):",
      "     print('Run faster')",
      "",
      "peggy = Penguin()",
      "peggy.whoisThis()",
      "peggy.swim()",
      "peggy.run()"
    ],
    "description": "oop inheritance example"
  },
  "class=>inheritance_2": {
    "prefix": "class=>inheritance_2",
    "body": [
      "class SchoolMember:",
      "    '''Represents any school member.'''",
      "    def __init__(self, name, age):",
      "        self.name = name",
      "        self.age = age",
      "        print('(Initialized SchoolMember: {})'.format(self.name))",
      "    def tell(self):",
      "        '''Tell my details.'''",
      "        print('Name:{} Age:{}'.format(self.name, self.age), end=' ')",
      "class Teacher(SchoolMember):",
      "    '''Represents a teacher.'''",
      "    def __init__(self, name, age, salary):",
      "        SchoolMember.__init__(self, name, age)",
      "        self.salary = salary",
      "        print('(Initialized Teacher: {})'.format(self.name))",
      "    def tell(self):",
      "        SchoolMember.tell(self)",
      "        print('Salary: {:d}'.format(self.salary))",
      "class Student(SchoolMember):",
      "    '''Represents a student.'''",
      "    def __init__(self, name, age, marks):",
      "        SchoolMember.__init__(self, name, age)",
      "        self.marks = marks",
      "        print('(Initialized Student: {})'.format(self.name))",
      "    def tell(self):",
      "        SchoolMember.tell(self)",
      "        print('Marks: {:d}'.format(self.marks))",
      "t = Teacher('Mrs. Shrividya', 40, 30000)",
      "s = Student('Swaroop', 25, 75)",
      "# prints a blank line",
      "print()",
      "members = [t, s]",
      "for member in members:",
      "    # Works for both Teachers and Students",
      "    member.tell()"
    ],
    "description": "oop inheritance example"
  },
  "class=>with_attribute_1": {
    "prefix": "class=>with_attribute_1",
    "body": [
      "class Parrot:",
      "",
      "# class attribute",
      " species = 'bird'",
      "",
      "# instance attribute",
      " def __init__(self, name, age):",
      "    self.name = name",
      "    self.age = age",
      "",
      "# instantiate the Parrot class",
      "blu = Parrot('Blu', 10)",
      "woo = Parrot('woo', 15)",
      "",
      "# access the class attributes",
      "print('Blu is a {}'.format(blu.__class__.species))",
      "print('Woo is also a {}'.format(woo.__class__.species))",
      "# access the instance attributes",
      "print('{} is {} years old'.format( blu.name, blu.age))",
      "print('{} is {} years old'.format( woo.name, woo.age))"
    ],
    "description": "class with attribute example"
  },
  "class=>with_attribute_2": {
    "prefix": "class=>with_attribute_2",
    "body": [
      "class Person:",
      "    def __init__(self, name):",
      "        self.name = name",
      "    def say_hi(self):",
      "        print('Hello, my name is', self.name)",
      "p = Person('Swaroop')",
      "p.say_hi()",
      "# The previous 2 lines can also be written as",
      "# Person('Swaroop').say_hi()"
    ],
    "description": "class with attribute example"
  },
  "class=>with_attribute_3": {
    "prefix": "class=>with_attribute_3",
    "body": [
      "class Robot:",
      "    '''Represents a robot, with a name.'''",
      "    # A class variable, counting the number of robots",
      "    population = 0",
      "    def __init__(self, name):",
      "        '''Initializes the data.'''",
      "        self.name = name",
      "        print('(Initializing {})'.format(self.name))",
      "        # When this person is created, the robot",
      "        # adds to the population",
      "        Robot.population += 1",
      "    def die(self):",
      "        '''I am dying.'''",
      "        print('{} is being destroyed!'.format(self.name))",
      "        Robot.population -= 1",
      "        if Robot.population == 0:",
      "            print('{} was the last one.'.format(self.name))",
      "        else:",
      "            print('There are still {:d} robots working.'.format(",
      "                Robot.population))",
      "    def say_hi(self):",
      "        '''Greeting by the robot.",
      "        Yeah, they can do that.'''",
      "        print('Greetings, my masters call me {}.'.format(self.name))",
      "    @classmethod",
      "    def how_many(cls):",
      "        '''Prints the current population.'''",
      "        print('We have {:d} robots.'.format(cls.population))",
      "droid1 = Robot('R2-D2')",
      "droid1.say_hi()",
      "Robot.how_many()",
      "droid2 = Robot('C-3PO')",
      "droid2.say_hi()",
      "Robot.how_many()",
      "print('Robots can do some work here.')",
      "print('Robots have finished their work. So lets destroy them.')",
      "droid1.die()",
      "droid2.die()",
      "Robot.how_many()"
    ],
    "description": "class with attribute example"
  },
  "class=>with_method_1": {
    "prefix": "class=>with_method_1",
    "body": [
      "class Parrot:",
      "",
      "# instance attributes",
      " def __init__(self, name, age):",
      "   self.name = name",
      "   self.age = age",
      "",
      "# instance method",
      " def sing(self, song):",
      "   return '{} sings {}'.format(self.name, song)",
      "",
      " def dance(self):",
      "   return '{} is now dancing'.format(self.name)",
      "",
      "# instantiate the object",
      "blu = Parrot('Blu', 10)",
      "# call our instance methods",
      "print(blu.sing('Happy'))",
      "print(blu.dance())"
    ],
    "description": "class with method example"
  },
  "class=>with_method_2": {
    "prefix": "class=>with_method_2",
    "body": [
      "class Person:",
      "    def say_hi(self):",
      "        print('Hello, how are you?')",
      "p = Person()",
      "p.say_hi()",
      "# The previous 2 lines can also be written as",
      "# Person().say_hi()"
    ],
    "description": "class with method example"
  },
  "class=>encapsulation": {
    "prefix": "class=>encapsulation",
    "body": [
      "class Computer:",
      "",
      " def __init__(self):",
      "   self.__maxprice = 900",
      "",
      " def sell(self):",
      "   print('Selling Price: {}'.format(self.__maxprice))",
      "",
      " def setMaxPrice(self, price):",
      "   self.__maxprice = price",
      "",
      "c = Computer()",
      "c.sell()",
      "",
      "# change the price",
      "c.__maxprice = 1000",
      "c.sell()",
      "",
      "# using setter function",
      "c.setMaxPrice(1000)",
      "c.sell()"
    ],
    "description": "class encapsulation example"
  },
  "class=>polymorphism": {
    "prefix": "class=>polymorphism",
    "body": [
      "class Parrot:",
      "",
      " def fly(self):",
      "   print('Parrot can fly')",
      "",
      " def swim(self):",
      "   print('Parrot can not swim')",
      "",
      "class Penguin:",
      "",
      " def fly(self):",
      "   print('Penguin can not fly')",
      "",
      " def swim(self):",
      "   print('Penguin can swim')",
      "",
      "# common interface",
      "def flying_test(bird):",
      "  bird.fly()",
      "",
      "#instantiate objects",
      "blu = Parrot()",
      "peggy = Penguin()",
      "",
      "# passing the object",
      "flying_test(blu)",
      "flying_test(peggy)"
    ],
    "description": "class polymorphism example"
  },
  "class=>polymorphism": {
    "prefix": "class=>polymorphism",
    "body": [
      "class Parrot:",
      "",
      " def fly(self):",
      "   print('Parrot can fly')",
      "",
      " def swim(self):",
      "   print('Parrot can not swim')",
      "",
      "class Penguin:",
      "",
      " def fly(self):",
      "   print('Penguin can not fly')",
      "",
      " def swim(self):",
      "   print('Penguin can swim')",
      "",
      "# common interface",
      "def flying_test(bird):",
      "  bird.fly()",
      "",
      "#instantiate objects",
      "blu = Parrot()",
      "peggy = Penguin()",
      "",
      "# passing the object",
      "flying_test(blu)",
      "flying_test(peggy)"
    ],
    "description": "class polymorphism example"
  }
}
